!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADD_ENTRY	includes/define.h	/^# define ADD_ENTRY	/;"	d
AK_AMOUNT	includes/define.h	/^# define AK_AMOUNT	/;"	d
AK_ARROW_DOWN	includes/enum.h	/^	AK_ARROW_DOWN,$/;"	e	enum:e_action_keys
AK_ARROW_DOWN_MASK	includes/define.h	/^# define AK_ARROW_DOWN_MASK /;"	d
AK_ARROW_LEFT	includes/enum.h	/^	AK_ARROW_LEFT,$/;"	e	enum:e_action_keys
AK_ARROW_LEFT_MASK	includes/define.h	/^# define AK_ARROW_LEFT_MASK /;"	d
AK_ARROW_RIGHT	includes/enum.h	/^	AK_ARROW_RIGHT,$/;"	e	enum:e_action_keys
AK_ARROW_RIGHT_MASK	includes/define.h	/^# define AK_ARROW_RIGHT_MASK	/;"	d
AK_ARROW_UP	includes/enum.h	/^	AK_ARROW_UP,$/;"	e	enum:e_action_keys
AK_ARROW_UP_MASK	includes/define.h	/^# define AK_ARROW_UP_MASK	/;"	d
AK_BACKSPACE	includes/enum.h	/^	AK_BACKSPACE,$/;"	e	enum:e_action_keys
AK_BACKSPACE_MASK	includes/define.h	/^# define AK_BACKSPACE_MASK	/;"	d
AK_CTRL_A	includes/enum.h	/^	AK_CTRL_A,$/;"	e	enum:e_action_keys
AK_CTRL_A_MASK	includes/define.h	/^# define AK_CTRL_A_MASK /;"	d
AK_CTRL_B	includes/enum.h	/^	AK_CTRL_B,$/;"	e	enum:e_action_keys
AK_CTRL_B_MASK	includes/define.h	/^# define AK_CTRL_B_MASK	/;"	d
AK_CTRL_D	includes/enum.h	/^	AK_CTRL_D,$/;"	e	enum:e_action_keys
AK_CTRL_DOWN	includes/enum.h	/^	AK_CTRL_DOWN,$/;"	e	enum:e_action_keys
AK_CTRL_DOWN_MASK	includes/define.h	/^# define AK_CTRL_DOWN_MASK	/;"	d
AK_CTRL_D_MASK	includes/define.h	/^# define AK_CTRL_D_MASK /;"	d
AK_CTRL_E	includes/enum.h	/^	AK_CTRL_E,$/;"	e	enum:e_action_keys
AK_CTRL_E_MASK	includes/define.h	/^# define AK_CTRL_E_MASK	/;"	d
AK_CTRL_F	includes/enum.h	/^	AK_CTRL_F,$/;"	e	enum:e_action_keys
AK_CTRL_F_MASK	includes/define.h	/^# define AK_CTRL_F_MASK	/;"	d
AK_CTRL_L	includes/enum.h	/^	AK_CTRL_L,$/;"	e	enum:e_action_keys
AK_CTRL_LEFT	includes/enum.h	/^	AK_CTRL_LEFT,$/;"	e	enum:e_action_keys
AK_CTRL_LEFT_MASK	includes/define.h	/^# define AK_CTRL_LEFT_MASK	/;"	d
AK_CTRL_L_MASK	includes/define.h	/^# define AK_CTRL_L_MASK	/;"	d
AK_CTRL_P	includes/enum.h	/^	AK_CTRL_P,$/;"	e	enum:e_action_keys
AK_CTRL_P_MASK	includes/define.h	/^# define AK_CTRL_P_MASK	/;"	d
AK_CTRL_R	includes/enum.h	/^	AK_CTRL_R,$/;"	e	enum:e_action_keys
AK_CTRL_RIGHT	includes/enum.h	/^	AK_CTRL_RIGHT,$/;"	e	enum:e_action_keys
AK_CTRL_RIGHT_MASK	includes/define.h	/^# define AK_CTRL_RIGHT_MASK	/;"	d
AK_CTRL_R_MASK	includes/define.h	/^# define AK_CTRL_R_MASK	/;"	d
AK_CTRL_T	includes/enum.h	/^	AK_CTRL_T,$/;"	e	enum:e_action_keys
AK_CTRL_T_MASK	includes/define.h	/^# define AK_CTRL_T_MASK	/;"	d
AK_CTRL_UP	includes/enum.h	/^	AK_CTRL_UP,$/;"	e	enum:e_action_keys
AK_CTRL_UP_MASK	includes/define.h	/^# define AK_CTRL_UP_MASK	/;"	d
AK_CTRL_X	includes/enum.h	/^	AK_CTRL_X,$/;"	e	enum:e_action_keys
AK_CTRL_X_MASK	includes/define.h	/^# define AK_CTRL_X_MASK	/;"	d
AK_DELETE	includes/enum.h	/^	AK_DELETE,$/;"	e	enum:e_action_keys
AK_DELETE_MASK	includes/define.h	/^# define AK_DELETE_MASK	/;"	d
AK_END	includes/enum.h	/^	AK_END,$/;"	e	enum:e_action_keys
AK_END_MASK	includes/define.h	/^# define AK_END_MASK /;"	d
AK_ESCAPE	includes/enum.h	/^	AK_ESCAPE,$/;"	e	enum:e_action_keys
AK_ESCAPE_MASK	includes/define.h	/^# define AK_ESCAPE_MASK	/;"	d
AK_HOME	includes/enum.h	/^	AK_HOME,$/;"	e	enum:e_action_keys
AK_HOME_MASK	includes/define.h	/^# define AK_HOME_MASK /;"	d
AK_TABULATION	includes/enum.h	/^	AK_TABULATION,$/;"	e	enum:e_action_keys
AK_TAB_MASK	includes/define.h	/^# define AK_TAB_MASK	/;"	d
ALL_REDIRECT	includes/define.h	/^# define ALL_REDIRECT	/;"	d
ANALYZER_H	includes/analyzer.h	/^# define ANALYZER_H$/;"	d
ANALYZER_STATES	includes/define.h	/^# define ANALYZER_STATES	/;"	d
AND	includes/expansion.h	/^# define AND /;"	d
AUTOCOMPLETION_H	includes/autocompletion.h	/^# define AUTOCOMPLETION_H$/;"	d
A_AMBIGOUS_REDIRECT	includes/enum.h	/^	A_AMBIGOUS_REDIRECT,$/;"	e	enum:e_actions
A_AND	includes/enum.h	/^	A_AND,$/;"	e	enum:e_actions
A_ARGS	includes/enum.h	/^	A_ARGS,$/;"	e	enum:e_actions
A_ASSIGN	includes/enum.h	/^	A_ASSIGN,$/;"	e	enum:e_actions
A_CLOSE	includes/enum.h	/^	A_CLOSE,$/;"	e	enum:e_actions
A_DAND	includes/enum.h	/^	A_DAND,$/;"	e	enum:e_actions
A_DUP	includes/enum.h	/^	A_DUP,$/;"	e	enum:e_actions
A_END	includes/enum.h	/^	A_END,$/;"	e	enum:e_actions
A_HEREDOC	includes/enum.h	/^	A_HEREDOC,$/;"	e	enum:e_actions
A_HEREDOC_TRIM	includes/enum.h	/^	A_HEREDOC_TRIM,$/;"	e	enum:e_actions
A_IO_APPEND_FILE	includes/enum.h	/^	A_IO_APPEND_FILE,$/;"	e	enum:e_actions
A_IO_HEREDOC	includes/enum.h	/^	A_IO_HEREDOC,$/;"	e	enum:e_actions
A_IO_HEREDOC_TRIM	includes/enum.h	/^	A_IO_HEREDOC_TRIM,$/;"	e	enum:e_actions
A_IO_READ_FD	includes/enum.h	/^	A_IO_READ_FD,$/;"	e	enum:e_actions
A_IO_READ_FILE	includes/enum.h	/^	A_IO_READ_FILE,$/;"	e	enum:e_actions
A_IO_TRUNCATE_FILE	includes/enum.h	/^	A_IO_TRUNCATE_FILE,$/;"	e	enum:e_actions
A_MOVE	includes/enum.h	/^	A_MOVE,$/;"	e	enum:e_actions
A_OPT	includes/define.h	/^# define A_OPT	/;"	d
A_OR	includes/enum.h	/^	A_OR,$/;"	e	enum:e_actions
A_STDIN_READ_FD	includes/enum.h	/^	A_STDIN_READ_FD,$/;"	e	enum:e_actions
A_STDIN_READ_FILE	includes/enum.h	/^	A_STDIN_READ_FILE,$/;"	e	enum:e_actions
A_STDOUT_APPEND_FILE	includes/enum.h	/^	A_STDOUT_APPEND_FILE,$/;"	e	enum:e_actions
A_STDOUT_TRUNCATE_FILE	includes/enum.h	/^	A_STDOUT_TRUNCATE_FILE,$/;"	e	enum:e_actions
A_STDOUT_TRUNCATE_FILE_SPECIAL	includes/enum.h	/^	A_STDOUT_TRUNCATE_FILE_SPECIAL,$/;"	e	enum:e_actions
BACKSLASH_DQUOTE	includes/define.h	/^# define BACKSLASH_DQUOTE	/;"	d
BACKSLASH_FLAG	includes/define.h	/^# define BACKSLASH_FLAG	/;"	d
BASE_MAX	libft/includes/ft_printf.h	/^# define BASE_MAX /;"	d
BASE_MAX	libft/includes/libft.h	/^# define BASE_MAX /;"	d
BINARY	libft/includes/ft_printf.h	/^# define BINARY /;"	d
BLACK	Makefile	/^BLACK = \\033[0;30m$/;"	m
BLACK	libft/Makefile	/^BLACK = \\033[0;30m$/;"	m
BLUE	Makefile	/^BLUE = \\033[0;34m$/;"	m
BLUE	libft/Makefile	/^BLUE = \\033[0;34m$/;"	m
BLUE	libft/includes/test.h	/^# define BLUE /;"	d
BRACEPARAM_FLAG	includes/define.h	/^# define BRACEPARAM_FLAG	/;"	d
BUFF_SIZE	libft/includes/ft_printf.h	/^# define BUFF_SIZE /;"	d
BUFF_SIZE	libft/includes/libft.h	/^# define BUFF_SIZE /;"	d
BUILTIN_H	includes/builtin.h	/^# define BUILTIN_H$/;"	d
BY_ID	includes/define.h	/^# define BY_ID	/;"	d
BY_NAME	includes/define.h	/^# define BY_NAME	/;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	libft/Makefile	/^CC = clang$/;"	m
CD_ERROR_OLDPWD_NOTSET	includes/define.h	/^# define CD_ERROR_OLDPWD_NOTSET	/;"	d
CD_USAGE	includes/define.h	/^# define CD_USAGE /;"	d
CFLAGS	libft/Makefile	/^CFLAGS = $(WFLAGS)$/;"	m
CLEANUP	Makefile	/^CLEANUP = rm -rf$/;"	m
CLEANUP	libft/Makefile	/^CLEANUP = rm -rf$/;"	m
CLEAR	Makefile	/^CLEAR = clear$/;"	m
CLIPBOARD_SZ	includes/define.h	/^# define CLIPBOARD_SZ	/;"	d
CLOSED_STDERR	includes/define.h	/^# define CLOSED_STDERR	/;"	d
CLOSED_STDIN	includes/define.h	/^# define CLOSED_STDIN	/;"	d
CLOSED_STDOUT	includes/define.h	/^# define CLOSED_STDOUT	/;"	d
CLOSE_P	includes/expansion.h	/^# define CLOSE_P	/;"	d
CMD_TYPE	includes/autocompletion.h	/^	CMD_TYPE,$/;"	e	enum:e_result_type
COLON_ON	includes/expansion.h	/^# define COLON_ON	/;"	d
COMMAND_ASSIGN	includes/define.h	/^# define COMMAND_ASSIGN	/;"	d
COMMAND_OPT	includes/define.h	/^# define COMMAND_OPT	/;"	d
COMMAND_RUN	includes/define.h	/^# define COMMAND_RUN	/;"	d
COMPILE	Makefile	/^COMPILE = $(CC) -c -g3$/;"	m
COMPILE	libft/Makefile	/^COMPILE = $(CC) -c$/;"	m
CONVERSION_H	libft/includes/conversion.h	/^# define CONVERSION_H$/;"	d
CRITICAL_ERROR	includes/define.h	/^# define CRITICAL_ERROR /;"	d
CURSOR_FAIL	includes/define.h	/^# define CURSOR_FAIL /;"	d
CUR_CHAR	includes/define.h	/^# define CUR_CHAR	/;"	d
CYAN	Makefile	/^CYAN = \\033[0;36m$/;"	m
CYAN	libft/Makefile	/^CYAN = \\033[0;36m$/;"	m
DBNAME	libft/Makefile	/^DBNAME = libftdb.a$/;"	m
DEBUG	Makefile	/^DEBUG = $(CC) -g3 -c -fsanitize=address,undefined -fno-omit-frame-pointer$/;"	m
DEBUG	libft/Makefile	/^DEBUG = $(CC) -g3 -c$/;"	m
DEBUG_OPT	includes/define.h	/^# define DEBUG_OPT	/;"	d
DEC_BASE	includes/expansion.h	/^# define DEC_BASE	/;"	d
DEFAULT_PEX_BUFFER	includes/expansion.h	/^# define DEFAULT_PEX_BUFFER /;"	d
DEFAULT_VECTOR_SCALE	libft/includes/vector.h	/^# define DEFAULT_VECTOR_SCALE /;"	d
DEFAULT_VECTOR_SIZE	libft/includes/vector.h	/^# define DEFAULT_VECTOR_SIZE /;"	d
DEFINE_H	includes/define.h	/^# define DEFINE_H$/;"	d
DFLAGS	Makefile	/^DFLAGS = $(CFLAGS)$/;"	m
DFLT_PROFILE	includes/define.h	/^# define DFLT_PROFILE /;"	d
DIFF	includes/expansion.h	/^# define DIFF	/;"	d
DIRECTORY_H	libft/includes/directory.h	/^# define DIRECTORY_H$/;"	d
DIVIDE	includes/expansion.h	/^# define DIVIDE	/;"	d
DOUBLEQUOTE_FLAG	includes/define.h	/^# define DOUBLEQUOTE_FLAG	/;"	d
ENDED	includes/define.h	/^# define ENDED	/;"	d
END_CMD	includes/define.h	/^# define END_CMD	/;"	d
END_COLOR	libft/includes/ft_printf.h	/^# define END_COLOR /;"	d
END_OPERATOR	includes/define.h	/^# define END_OPERATOR	/;"	d
END_RESERVED_WORD	includes/define.h	/^# define END_RESERVED_WORD	/;"	d
ENUM_H	includes/enum.h	/^# define ENUM_H$/;"	d
ENV_USAGE_1	includes/define.h	/^# define ENV_USAGE_1 /;"	d
ENV_USAGE_2	includes/define.h	/^# define ENV_USAGE_2 /;"	d
EQUAL	includes/expansion.h	/^# define EQUAL	/;"	d
ERROR	includes/define.h	/^# define ERROR	/;"	d
ERROR_OPT	includes/define.h	/^# define ERROR_OPT	/;"	d
ESC	libft/includes/ft_printf.h	/^# define ESC /;"	d
EXEC	Makefile	/^EXEC ?= 1$/;"	m
EXEC_PROFILE	includes/define.h	/^# define EXEC_PROFILE	/;"	d
EXPANSION_H	includes/expansion.h	/^# define EXPANSION_H$/;"	d
EXPORT_USAGE	includes/define.h	/^# define EXPORT_USAGE /;"	d
EXPORT_VAR	includes/define.h	/^# define EXPORT_VAR	/;"	d
EXP_CHECK	includes/define.h	/^# define EXP_CHECK	/;"	d
EXP_INTERUPT	includes/define.h	/^# define EXP_INTERUPT	/;"	d
EXP_SPECIAL	includes/define.h	/^# define EXP_SPECIAL	/;"	d
E_AND	includes/enum.h	/^	E_AND,$/;"	e	enum:e_type
E_ANDDGREAT	includes/enum.h	/^	E_ANDDGREAT,$/;"	e	enum:e_type
E_ANDGREAT	includes/enum.h	/^	E_ANDGREAT,$/;"	e	enum:e_type
E_ASSIGN	includes/enum.h	/^	E_ASSIGN,$/;"	e	enum:e_type
E_BACKQUOTE	includes/enum.h	/^	E_BACKQUOTE,$/;"	e	enum:e_type
E_BRACKET_CLOSE	includes/enum.h	/^	E_BRACKET_CLOSE,$/;"	e	enum:e_type
E_BRACKET_OPEN	includes/enum.h	/^	E_BRACKET_OPEN,$/;"	e	enum:e_type
E_CASE	includes/enum.h	/^	E_CASE,$/;"	e	enum:e_type
E_CLOBBER	includes/enum.h	/^	E_CLOBBER,$/;"	e	enum:e_type
E_DAND	includes/enum.h	/^	E_DAND,$/;"	e	enum:e_type
E_DB_QUOTE	includes/enum.h	/^	E_DB_QUOTE,$/;"	e	enum:e_type
E_DEFAULT	includes/enum.h	/^	E_DEFAULT,$/;"	e	enum:e_type
E_DEQ	includes/enum.h	/^	E_DEQ,$/;"	e	enum:e_type
E_DGREAT	includes/enum.h	/^	E_DGREAT,$/;"	e	enum:e_type
E_DLESS	includes/enum.h	/^	E_DLESS,$/;"	e	enum:e_type
E_DLESSDASH	includes/enum.h	/^	E_DLESSDASH,$/;"	e	enum:e_type
E_DO	includes/enum.h	/^	E_DO,$/;"	e	enum:e_type
E_DONE	includes/enum.h	/^	E_DONE,$/;"	e	enum:e_type
E_DSEMI	includes/enum.h	/^	E_DSEMI,$/;"	e	enum:e_type
E_ELIF	includes/enum.h	/^	E_ELIF,$/;"	e	enum:e_type
E_ELSE	includes/enum.h	/^	E_ELSE,$/;"	e	enum:e_type
E_END	includes/enum.h	/^	E_END,$/;"	e	enum:e_type
E_END_OPTION	includes/enum.h	/^	E_END_OPTION,$/;"	e	enum:e_state_option
E_ERROR	includes/enum.h	/^	E_ERROR,$/;"	e	enum:e_type
E_ESAC	includes/enum.h	/^	E_ESAC,$/;"	e	enum:e_type
E_FI	includes/enum.h	/^	E_FI,$/;"	e	enum:e_type
E_FOR	includes/enum.h	/^	E_FOR,$/;"	e	enum:e_type
E_GREAT	includes/enum.h	/^	E_GREAT,$/;"	e	enum:e_type
E_GREATAND	includes/enum.h	/^	E_GREATAND,$/;"	e	enum:e_type
E_HASH	includes/enum.h	/^	E_HASH,$/;"	e	enum:e_type
E_HOOK_CLOSE	includes/enum.h	/^	E_HOOK_CLOSE,$/;"	e	enum:e_type
E_HOOK_OPEN	includes/enum.h	/^	E_HOOK_OPEN,$/;"	e	enum:e_type
E_IF	includes/enum.h	/^	E_IF,$/;"	e	enum:e_type
E_IN	includes/enum.h	/^	E_IN,$/;"	e	enum:e_type
E_IO_NUMBER	includes/enum.h	/^	E_IO_NUMBER,$/;"	e	enum:e_type
E_LESS	includes/enum.h	/^	E_LESS,$/;"	e	enum:e_type
E_LESSAND	includes/enum.h	/^	E_LESSAND,$/;"	e	enum:e_type
E_LESSGREAT	includes/enum.h	/^	E_LESSGREAT,$/;"	e	enum:e_type
E_M_AND	includes/enum.h	/^	E_M_AND,$/;"	e	enum:e_mtype
E_M_ASSIGN	includes/enum.h	/^	E_M_ASSIGN,$/;"	e	enum:e_mtype
E_M_CLOSEP	includes/enum.h	/^	E_M_CLOSEP,$/;"	e	enum:e_mtype
E_M_DEFAULT	includes/enum.h	/^	E_M_DEFAULT$/;"	e	enum:e_mtype
E_M_DELIMITER	includes/enum.h	/^	E_M_DELIMITER,$/;"	e	enum:e_mtype
E_M_DIVIDE	includes/enum.h	/^	E_M_DIVIDE,$/;"	e	enum:e_mtype
E_M_DMINUS	includes/enum.h	/^	E_M_DMINUS,$/;"	e	enum:e_mtype
E_M_DPLUS	includes/enum.h	/^	E_M_DPLUS,$/;"	e	enum:e_mtype
E_M_END	includes/enum.h	/^	E_M_END,$/;"	e	enum:e_mtype
E_M_EQUAL	includes/enum.h	/^	E_M_EQUAL,$/;"	e	enum:e_mtype
E_M_GREAT	includes/enum.h	/^	E_M_GREAT,$/;"	e	enum:e_mtype
E_M_GREATEQ	includes/enum.h	/^	E_M_GREATEQ,$/;"	e	enum:e_mtype
E_M_LESS	includes/enum.h	/^	E_M_LESS,$/;"	e	enum:e_mtype
E_M_LESSEQ	includes/enum.h	/^	E_M_LESSEQ,$/;"	e	enum:e_mtype
E_M_MINUS	includes/enum.h	/^	E_M_MINUS,$/;"	e	enum:e_mtype
E_M_MODULO	includes/enum.h	/^	E_M_MODULO,$/;"	e	enum:e_mtype
E_M_NB_DEC	includes/enum.h	/^	E_M_NB_DEC,$/;"	e	enum:e_mtype
E_M_NB_HEX	includes/enum.h	/^	E_M_NB_HEX,$/;"	e	enum:e_mtype
E_M_NB_OCT	includes/enum.h	/^	E_M_NB_OCT,$/;"	e	enum:e_mtype
E_M_NEQUAL	includes/enum.h	/^	E_M_NEQUAL,$/;"	e	enum:e_mtype
E_M_OPENP	includes/enum.h	/^	E_M_OPENP,$/;"	e	enum:e_mtype
E_M_OR	includes/enum.h	/^	E_M_OR,$/;"	e	enum:e_mtype
E_M_PLUS	includes/enum.h	/^	E_M_PLUS,$/;"	e	enum:e_mtype
E_M_STRING	includes/enum.h	/^	E_M_STRING,$/;"	e	enum:e_mtype
E_M_TIMES	includes/enum.h	/^	E_M_TIMES,$/;"	e	enum:e_mtype
E_NEWLINE	includes/enum.h	/^	E_NEWLINE,$/;"	e	enum:e_type
E_NOTEQ	includes/enum.h	/^	E_NOTEQ,$/;"	e	enum:e_type
E_NO_OPTION	includes/enum.h	/^	E_NO_OPTION$/;"	e	enum:e_state_option
E_OPT	includes/define.h	/^# define E_OPT	/;"	d
E_OPTION	includes/enum.h	/^	E_OPTION,$/;"	e	enum:e_state_option
E_OR	includes/enum.h	/^	E_OR,$/;"	e	enum:e_type
E_PARENT_CLOSE	includes/enum.h	/^	E_PARENT_CLOSE,$/;"	e	enum:e_type
E_PARENT_OPEN	includes/enum.h	/^	E_PARENT_OPEN,$/;"	e	enum:e_type
E_PERCENT	includes/enum.h	/^	E_PERCENT,$/;"	e	enum:e_type
E_PIPE	includes/enum.h	/^	E_PIPE,$/;"	e	enum:e_type
E_SEMICOLON	includes/enum.h	/^	E_SEMICOLON,$/;"	e	enum:e_type
E_START	includes/define.h	/^# define E_START	/;"	d
E_START_OPTION	includes/enum.h	/^	E_START_OPTION,$/;"	e	enum:e_state_option
E_STRING	includes/enum.h	/^	E_STRING,$/;"	e	enum:e_type
E_THEN	includes/enum.h	/^	E_THEN,$/;"	e	enum:e_type
E_UNTIL	includes/enum.h	/^	E_UNTIL,$/;"	e	enum:e_type
E_WHILE	includes/enum.h	/^	E_WHILE,$/;"	e	enum:e_type
FAILED	includes/define.h	/^# define FAILED	/;"	d
FAILURE	includes/define.h	/^# define FAILURE	/;"	d
FAILURE	libft/includes/hashmap.h	/^# define FAILURE /;"	d
FAILURE	libft/includes/libft.h	/^# define FAILURE /;"	d
FAIL_EOF	includes/define.h	/^# define FAIL_EOF	/;"	d
FALSE	includes/define.h	/^# define FALSE	/;"	d
FALSE	libft/includes/libft.h	/^# define FALSE /;"	d
FC_FILE_TMP	includes/define.h	/^# define FC_FILE_TMP	/;"	d
FD_AMBIGOUS_REDIRECT	includes/define.h	/^# define FD_AMBIGOUS_REDIRECT	/;"	d
FD_BAD_DESCRIPTOR	includes/define.h	/^# define FD_BAD_DESCRIPTOR	/;"	d
FD_CLOSE	includes/define.h	/^# define FD_CLOSE	/;"	d
FD_CLOSE_SPECIAL	includes/define.h	/^# define FD_CLOSE_SPECIAL	/;"	d
FD_CRITICAL_ERROR	includes/define.h	/^# define FD_CRITICAL_ERROR	/;"	d
FD_DUP	includes/define.h	/^# define FD_DUP	/;"	d
FD_DUP_ERROR	includes/define.h	/^# define FD_DUP_ERROR	/;"	d
FD_MOVE	includes/define.h	/^# define FD_MOVE	/;"	d
FD_OPEN_ERROR	includes/define.h	/^# define FD_OPEN_ERROR	/;"	d
FD_PIPE_IN	includes/define.h	/^# define FD_PIPE_IN	/;"	d
FD_PIPE_OUT	includes/define.h	/^# define FD_PIPE_OUT	/;"	d
FD_REDIRECT	includes/define.h	/^# define FD_REDIRECT	/;"	d
FGCOL	libft/includes/ft_printf.h	/^# define FGCOL /;"	d
FILE_TYPE	includes/autocompletion.h	/^	FILE_TYPE$/;"	e	enum:e_result_type
FLAGS	libft/includes/ft_printf.h	/^# define FLAGS /;"	d
FLOAT	libft/includes/ft_printf.h	/^# define FLOAT /;"	d
FLUSH_MEMORY	libft/includes/ft_malloc.h	/^# define FLUSH_MEMORY	/;"	d
FREE_HISTORY	includes/define.h	/^# define FREE_HISTORY	/;"	d
FT_HISTORY_H	includes/history.h	/^# define FT_HISTORY_H$/;"	d
FT_MALLOC_H	libft/includes/ft_malloc.h	/^# define FT_MALLOC_H$/;"	d
FT_PRINTF_H	libft/includes/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
F_OPT	includes/define.h	/^# define F_OPT	/;"	d
GARBAGE_COLLECTOR_OPT	includes/define.h	/^# define GARBAGE_COLLECTOR_OPT	/;"	d
GC	Makefile	/^GC ?= 1$/;"	m
GC	libft/Makefile	/^GC ?= 1$/;"	m
GET_ENTRY	includes/define.h	/^# define GET_ENTRY	/;"	d
GET_HEAD	libft/includes/ft_malloc.h	/^# define GET_HEAD	/;"	d
GET_NEXT_LINE_H	libft/includes/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
GREAT	includes/expansion.h	/^# define GREAT	/;"	d
GREATEQ	includes/expansion.h	/^# define GREATEQ	/;"	d
GREEN	Makefile	/^GREEN = \\033[32m$/;"	m
GREEN	libft/Makefile	/^GREEN = \\033[32m$/;"	m
GREEN	libft/includes/test.h	/^# define GREEN /;"	d
GROUP_AND	includes/define.h	/^# define GROUP_AND	/;"	d
GROUP_BG	includes/define.h	/^# define GROUP_BG	/;"	d
GROUP_OR	includes/define.h	/^# define GROUP_OR	/;"	d
GROUP_RUN	includes/define.h	/^# define GROUP_RUN	/;"	d
HASHMAP_H	libft/includes/hashmap.h	/^# define HASHMAP_H$/;"	d
HASH_GENERAL_ERROR	includes/define.h	/^# define HASH_GENERAL_ERROR	/;"	d
HASH_HELP	includes/define.h	/^# define HASH_HELP /;"	d
HASH_HIT_ERROR	includes/define.h	/^# define HASH_HIT_ERROR	/;"	d
HASH_H_ALL	includes/define.h	/^# define HASH_H_ALL	/;"	d
HASH_H_HELP	includes/define.h	/^# define HASH_H_HELP	/;"	d
HASH_H_WIPE	includes/define.h	/^# define HASH_H_WIPE	/;"	d
HASH_INVALID_OPT	includes/define.h	/^# define HASH_INVALID_OPT	/;"	d
HASH_MALLOC_ERROR	includes/define.h	/^# define HASH_MALLOC_ERROR	/;"	d
HASH_NOT_FOUND	includes/define.h	/^# define HASH_NOT_FOUND	/;"	d
HASH_NO_AV	includes/define.h	/^# define HASH_NO_AV	/;"	d
HASH_OPT_1	includes/define.h	/^# define HASH_OPT_1	/;"	d
HASH_OPT_2	includes/define.h	/^# define HASH_OPT_2	/;"	d
HASH_ORULE_1	includes/define.h	/^# define HASH_ORULE_1	/;"	d
HASH_ORULE_2	includes/define.h	/^# define HASH_ORULE_2	/;"	d
HASH_USAGE	includes/define.h	/^# define HASH_USAGE /;"	d
HASH_UTIL_1	includes/define.h	/^# define HASH_UTIL_1	/;"	d
HASH_UTIL_2	includes/define.h	/^# define HASH_UTIL_2	/;"	d
HELP_OPT	includes/define.h	/^# define HELP_OPT	/;"	d
HERETRIM	includes/define.h	/^# define HERETRIM	/;"	d
HEXA	libft/includes/ft_printf.h	/^# define HEXA /;"	d
HEX_BASE	includes/expansion.h	/^# define HEX_BASE	/;"	d
HISTFILE_DEFAULT	includes/define.h	/^# define HISTFILE_DEFAULT	/;"	d
HISTSIZE_DEFAULT	includes/define.h	/^# define HISTSIZE_DEFAULT	/;"	d
HIST_FAIL	includes/define.h	/^# define HIST_FAIL /;"	d
HMAP_BIN_SIZE	includes/define.h	/^# define HMAP_BIN_SIZE	/;"	d
HMAP_BLT_SIZE	includes/define.h	/^# define HMAP_BLT_SIZE	/;"	d
H_ALL	includes/define.h	/^# define H_ALL	/;"	d
H_HELP	includes/define.h	/^# define H_HELP	/;"	d
H_WIPE	includes/define.h	/^# define H_WIPE	/;"	d
IFLAGS	Makefile	/^IFLAGS = $(addprefix -I, $(IPATH))$/;"	m
IFLAGS	libft/Makefile	/^IFLAGS = -I$(PATHI)$/;"	m
IFS_CHAR	includes/define.h	/^# define IFS_CHAR	/;"	d
IMPOSSIBLE	includes/define.h	/^# define IMPOSSIBLE	/;"	d
INC_SEARCH	includes/define.h	/^# define INC_SEARCH /;"	d
INIT_HANDLER	includes/define.h	/^# define INIT_HANDLER /;"	d
INIT_HISTORY	includes/define.h	/^# define INIT_HISTORY	/;"	d
INTEPRETER_EXECVE_ERROR	includes/define.h	/^# define INTEPRETER_EXECVE_ERROR	/;"	d
INTEPRETER_FORK_ERROR	includes/define.h	/^# define INTEPRETER_FORK_ERROR	/;"	d
INTEPRETER_NOT_FOUND	includes/define.h	/^# define INTEPRETER_NOT_FOUND	/;"	d
INTERACTIVE_OPT	includes/define.h	/^# define INTERACTIVE_OPT	/;"	d
INTERFACE_FUNCTIONS_H	includes/sle.h	/^# define INTERFACE_FUNCTIONS_H$/;"	d
INTERNAL_FAIL	includes/define.h	/^# define INTERNAL_FAIL /;"	d
INTERPRETER_H	includes/interpreter.h	/^# define INTERPRETER_H$/;"	d
INT_COLS	includes/define.h	/^# define INT_COLS	/;"	d
INT_DBG_FD	includes/define.h	/^# define INT_DBG_FD	/;"	d
INT_DBG_FILE	includes/define.h	/^# define INT_DBG_FILE	/;"	d
INT_PS1	includes/define.h	/^# define INT_PS1	/;"	d
INT_PS1_VALUE	includes/define.h	/^# define INT_PS1_VALUE	/;"	d
INT_PS2	includes/define.h	/^# define INT_PS2	/;"	d
INT_PS2_VALUE	includes/define.h	/^# define INT_PS2_VALUE	/;"	d
INT_PS3	includes/define.h	/^# define INT_PS3	/;"	d
INT_PS3_VALUE	includes/define.h	/^# define INT_PS3_VALUE	/;"	d
INT_ROWS	includes/define.h	/^# define INT_ROWS	/;"	d
INT_TERM	includes/define.h	/^# define INT_TERM	/;"	d
INT_TERM_DFLT_VALUE	includes/define.h	/^# define INT_TERM_DFLT_VALUE	/;"	d
INVALID_TERM	includes/define.h	/^# define INVALID_TERM /;"	d
INVALID_TERMCAPS	includes/define.h	/^# define INVALID_TERMCAPS /;"	d
ISFALSE	libft/includes/test.h	/^# define ISFALSE /;"	d
ISTRUE	libft/includes/test.h	/^# define ISTRUE /;"	d
IS_ABS	includes/define.h	/^# define IS_ABS	/;"	d
IS_ALONE	includes/define.h	/^# define IS_ALONE	/;"	d
IS_ASSIGN	includes/define.h	/^# define IS_ASSIGN	/;"	d
IS_BIN	includes/define.h	/^# define IS_BIN	/;"	d
IS_BLT	includes/define.h	/^# define IS_BLT	/;"	d
IS_CRITICAL	includes/define.h	/^# define IS_CRITICAL	/;"	d
IS_DUP_FAILED	includes/define.h	/^# define IS_DUP_FAILED	/;"	d
IS_EXP_ERROR	includes/define.h	/^# define IS_EXP_ERROR	/;"	d
IS_NOTFOUND	includes/define.h	/^# define IS_NOTFOUND	/;"	d
IS_OPEN_FAILED	includes/define.h	/^# define IS_OPEN_FAILED	/;"	d
I_OPT	includes/define.h	/^# define I_OPT	/;"	d
JOBCTL_H	includes/jobctl.h	/^# define JOBCTL_H$/;"	d
JOBCTL_ID	includes/define.h	/^# define JOBCTL_ID	/;"	d
JOBCTL_LIST	includes/define.h	/^# define JOBCTL_LIST	/;"	d
JOBCTL_LONG	includes/define.h	/^# define JOBCTL_LONG	/;"	d
JOBCTL_MINUS	includes/define.h	/^# define JOBCTL_MINUS	/;"	d
JOBCTL_PLUS	includes/define.h	/^# define JOBCTL_PLUS	/;"	d
JOBCTL_PUTINBG	includes/define.h	/^# define JOBCTL_PUTINBG	/;"	d
JOBCTL_PUTINFG	includes/define.h	/^# define JOBCTL_PUTINFG	/;"	d
JOBCTL_RUNINBG	includes/define.h	/^# define JOBCTL_RUNINBG	/;"	d
KILLED	includes/define.h	/^# define KILLED	/;"	d
LDFLAGS	Makefile	/^LDFLAGS = -L $(LPATH)$/;"	m
LDLIBD	Makefile	/^LDLIBD = -lftdb$/;"	m
LDLIBN	Makefile	/^LDLIBN = -lft$/;"	m
LESS	includes/expansion.h	/^# define LESS	/;"	d
LESSEQ	includes/expansion.h	/^# define LESSEQ	/;"	d
LEXER_H	includes/lexer.h	/^# define LEXER_H$/;"	d
LFLAGS	Makefile	/^LFLAGS = -ltermcap$/;"	m
LIB	Makefile	/^LIB = $(addprefix $(LPATH), $(LIBFT))$/;"	m
LIBDB	Makefile	/^LIBDB = $(addprefix $(LPATH), $(LIBFTDB))$/;"	m
LIBFT	Makefile	/^LIBFT = libft.a$/;"	m
LIBFTDB	Makefile	/^LIBFTDB = libftdb.a$/;"	m
LIBFT_H	libft/includes/libft.h	/^# define LIBFT_H$/;"	d
LINE_FAIL	includes/define.h	/^# define LINE_FAIL /;"	d
LINK	Makefile	/^LINK = $(CC) -g3$/;"	m
LINKD	Makefile	/^LINKD = $(CC) -g3 -fsanitize=address,undefined -fno-omit-frame-pointer$/;"	m
LISTEN	includes/define.h	/^# define LISTEN	/;"	d
LIST_H	libft/includes/list.h	/^# define LIST_H$/;"	d
LOG_CRITICAL	includes/define.h	/^# define LOG_CRITICAL	/;"	d
LOG_ERROR	includes/define.h	/^# define LOG_ERROR	/;"	d
LOG_H	includes/log.h	/^# define LOG_H$/;"	d
LOG_INFO	includes/define.h	/^# define LOG_INFO /;"	d
LOG_OK	includes/define.h	/^# define LOG_OK	/;"	d
LOG_WARNING	includes/define.h	/^# define LOG_WARNING	/;"	d
LONGEST_ON	includes/expansion.h	/^# define LONGEST_ON	/;"	d
LPATH	Makefile	/^LPATH = libft\/$/;"	m
L_FINISH	includes/enum.h	/^	L_FINISH$/;"	e	enum:e_lexer_state
L_OPT	includes/define.h	/^# define L_OPT	/;"	d
L_OUT	includes/enum.h	/^	L_OUT,$/;"	e	enum:e_lexer_state
L_PROCESS	includes/enum.h	/^	L_PROCESS,$/;"	e	enum:e_lexer_state
MALLOC_FAIL	includes/define.h	/^# define MALLOC_FAIL /;"	d
MATHS	includes/define.h	/^# define MATHS	/;"	d
MATHS_FLAG	includes/define.h	/^# define MATHS_FLAG	/;"	d
MATH_CLOSE_PARENT	includes/expansion.h	/^	MATH_CLOSE_PARENT,$/;"	e	enum:e_mathstate
MATH_END	includes/expansion.h	/^	MATH_END$/;"	e	enum:e_mathstate
MATH_ERROR	includes/expansion.h	/^	MATH_ERROR,$/;"	e	enum:e_mathstate
MATH_LOGICAL_OPERATOR	includes/expansion.h	/^	MATH_LOGICAL_OPERATOR,$/;"	e	enum:e_mathstate
MATH_NUMBER	includes/expansion.h	/^	MATH_NUMBER,$/;"	e	enum:e_mathstate
MATH_OPEN_PARENT	includes/expansion.h	/^	MATH_OPEN_PARENT,$/;"	e	enum:e_mathstate
MATH_OPERATOR	includes/expansion.h	/^	MATH_OPERATOR,$/;"	e	enum:e_mathstate
MATH_PREFFIX	includes/expansion.h	/^	MATH_PREFFIX,$/;"	e	enum:e_mathstate
MATH_START	includes/expansion.h	/^	MATH_START,$/;"	e	enum:e_mathstate
MATH_STATE	includes/expansion.h	/^# define MATH_STATE	/;"	d
MATH_SUFFIX	includes/expansion.h	/^	MATH_SUFFIX,$/;"	e	enum:e_mathstate
MATH_TOKEN	includes/expansion.h	/^# define MATH_TOKEN	/;"	d
MATH_UNARY	includes/expansion.h	/^	MATH_UNARY,$/;"	e	enum:e_mathstate
MATH_VARIABLE	includes/expansion.h	/^	MATH_VARIABLE,$/;"	e	enum:e_mathstate
MATH_VARIABLE_FLUSH	includes/expansion.h	/^	MATH_VARIABLE_FLUSH,$/;"	e	enum:e_mathstate
MAX_FILL	libft/includes/hashmap.h	/^# define MAX_FILL /;"	d
MAX_HIT	libft/srcs/hashmap/ft_hmap_hits.c	/^#define MAX_HIT	/;"	d	file:
MEMORY_H	libft/includes/memory.h	/^# define MEMORY_H$/;"	d
MINUS	includes/expansion.h	/^# define MINUS	/;"	d
MIN_FILL	libft/includes/hashmap.h	/^# define MIN_FILL /;"	d
MIN_MAP_SIZE	libft/includes/hashmap.h	/^# define MIN_MAP_SIZE /;"	d
MKDIR	Makefile	/^MKDIR = mkdir -p$/;"	m
MKDIR	libft/Makefile	/^MKDIR = mkdir -p$/;"	m
MODULO	includes/expansion.h	/^# define MODULO	/;"	d
M_AND	includes/define.h	/^# define M_AND	/;"	d
M_ASSIGN	includes/define.h	/^# define M_ASSIGN	/;"	d
M_CLOSEP	includes/define.h	/^# define M_CLOSEP	/;"	d
M_DELIMITER	includes/define.h	/^# define M_DELIMITER	/;"	d
M_DIVIDE	includes/define.h	/^# define M_DIVIDE	/;"	d
M_DMINUS	includes/define.h	/^# define M_DMINUS	/;"	d
M_DPLUS	includes/define.h	/^# define M_DPLUS	/;"	d
M_END	includes/define.h	/^# define M_END	/;"	d
M_EQUAL	includes/define.h	/^# define M_EQUAL	/;"	d
M_GREAT	includes/define.h	/^# define M_GREAT	/;"	d
M_GREATOR	includes/define.h	/^# define M_GREATOR	/;"	d
M_LESS	includes/define.h	/^# define M_LESS	/;"	d
M_LESSOR	includes/define.h	/^# define M_LESSOR	/;"	d
M_MINUS	includes/define.h	/^# define M_MINUS	/;"	d
M_MODULO	includes/define.h	/^# define M_MODULO	/;"	d
M_NB_DEC	includes/define.h	/^# define M_NB_DEC	/;"	d
M_NB_HEX	includes/define.h	/^# define M_NB_HEX	/;"	d
M_NB_OCT	includes/define.h	/^# define M_NB_OCT	/;"	d
M_NEQUAL	includes/define.h	/^# define M_NEQUAL	/;"	d
M_OPENP	includes/define.h	/^# define M_OPENP	/;"	d
M_OR	includes/define.h	/^# define M_OR	/;"	d
M_PLUS	includes/define.h	/^# define M_PLUS	/;"	d
M_START	includes/define.h	/^# define M_START	/;"	d
M_STRING	includes/define.h	/^# define M_STRING	/;"	d
M_TIMES	includes/define.h	/^# define M_TIMES	/;"	d
NAME	Makefile	/^NAME = 42sh$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NAMEDB	Makefile	/^NAMEDB = 42shdb$/;"	m
NB_OF_MTOKENS	includes/define.h	/^# define NB_OF_MTOKENS	/;"	d
NB_OF_TOKENS	includes/define.h	/^# define NB_OF_TOKENS	/;"	d
NB_SIGNALS	includes/define.h	/^# define NB_SIGNALS	/;"	d
NC	Makefile	/^NC = \\033[0m$/;"	m
NC	libft/Makefile	/^NC = \\033[0m$/;"	m
NEW_SEARCH	includes/autocompletion.h	/^# define NEW_SEARCH	/;"	d
NEXT	includes/define.h	/^# define NEXT	/;"	d
NEXT_CHAR	includes/define.h	/^# define NEXT_CHAR	/;"	d
NEXT_NEXT_CHAR	includes/define.h	/^# define NEXT_NEXT_CHAR	/;"	d
NOFI	includes/define.h	/^# define NOFI /;"	d
NOT_FOUND	includes/define.h	/^# define NOT_FOUND	/;"	d
NOT_FOUND	libft/srcs/hashmap/ft_hmap_hits.c	/^#define NOT_FOUND	/;"	d	file:
NO_FLAG	includes/define.h	/^# define NO_FLAG	/;"	d
NO_OPT	includes/define.h	/^# define NO_OPT	/;"	d
NO_PIPE	includes/define.h	/^# define NO_PIPE	/;"	d
N_AND	includes/define.h	/^# define N_AND	/;"	d
N_ANDDGREAT	includes/define.h	/^# define N_ANDDGREAT	/;"	d
N_ANDGREAT	includes/define.h	/^# define N_ANDGREAT	/;"	d
N_ASSIGN	includes/define.h	/^# define N_ASSIGN	/;"	d
N_BACKQUOTE	includes/define.h	/^# define N_BACKQUOTE	/;"	d
N_BRACKET_CLOSE	includes/define.h	/^# define N_BRACKET_CLOSE	/;"	d
N_BRACKET_OPEN	includes/define.h	/^# define N_BRACKET_OPEN	/;"	d
N_CASE	includes/define.h	/^# define N_CASE	/;"	d
N_CLOBBER	includes/define.h	/^# define N_CLOBBER	/;"	d
N_DAND	includes/define.h	/^# define N_DAND	/;"	d
N_DB_QUOTE	includes/define.h	/^# define N_DB_QUOTE	/;"	d
N_DEQ	includes/define.h	/^# define N_DEQ	/;"	d
N_DGREAT	includes/define.h	/^# define N_DGREAT	/;"	d
N_DLESS	includes/define.h	/^# define N_DLESS	/;"	d
N_DLESSDASH	includes/define.h	/^# define N_DLESSDASH	/;"	d
N_DO	includes/define.h	/^# define N_DO	/;"	d
N_DONE	includes/define.h	/^# define N_DONE	/;"	d
N_DSEMI	includes/define.h	/^# define N_DSEMI	/;"	d
N_ELIF	includes/define.h	/^# define N_ELIF	/;"	d
N_ELSE	includes/define.h	/^# define N_ELSE	/;"	d
N_END	includes/define.h	/^# define N_END	/;"	d
N_ERROR	includes/define.h	/^# define N_ERROR	/;"	d
N_ESAC	includes/define.h	/^# define N_ESAC	/;"	d
N_FI	includes/define.h	/^# define N_FI	/;"	d
N_FOR	includes/define.h	/^# define N_FOR	/;"	d
N_GREAT	includes/define.h	/^# define N_GREAT	/;"	d
N_GREATAND	includes/define.h	/^# define N_GREATAND	/;"	d
N_HASH	includes/define.h	/^# define N_HASH	/;"	d
N_HOOK_CLOSE	includes/define.h	/^# define N_HOOK_CLOSE	/;"	d
N_HOOK_OPEN	includes/define.h	/^# define N_HOOK_OPEN	/;"	d
N_IF	includes/define.h	/^# define N_IF	/;"	d
N_IN	includes/define.h	/^# define N_IN	/;"	d
N_IO_NUMBER	includes/define.h	/^# define N_IO_NUMBER	/;"	d
N_LESS	includes/define.h	/^# define N_LESS	/;"	d
N_LESSAND	includes/define.h	/^# define N_LESSAND	/;"	d
N_LESSGREAT	includes/define.h	/^# define N_LESSGREAT	/;"	d
N_NEWLINE	includes/define.h	/^# define N_NEWLINE	/;"	d
N_NOTEQ	includes/define.h	/^# define N_NOTEQ	/;"	d
N_OPT	includes/define.h	/^# define N_OPT	/;"	d
N_OR	includes/define.h	/^# define N_OR	/;"	d
N_PARENT_CLOSE	includes/define.h	/^# define N_PARENT_CLOSE	/;"	d
N_PARENT_OPEN	includes/define.h	/^# define N_PARENT_OPEN	/;"	d
N_PERCENT	includes/define.h	/^# define N_PERCENT	/;"	d
N_PIPE	includes/define.h	/^# define N_PIPE	/;"	d
N_SEMICOLON	includes/define.h	/^# define N_SEMICOLON	/;"	d
N_START	includes/define.h	/^# define N_START	/;"	d
N_STRING	includes/define.h	/^# define N_STRING	/;"	d
N_THEN	includes/define.h	/^# define N_THEN	/;"	d
N_UNTIL	includes/define.h	/^# define N_UNTIL	/;"	d
N_WHILE	includes/define.h	/^# define N_WHILE	/;"	d
OBJD	Makefile	/^OBJD = $(patsubst %.c, $(OPATH)db%.o, $(SRCS))$/;"	m
OBJD	libft/Makefile	/^OBJD = $(patsubst %.c, $(PATHO)db%.o, $(SRCS))$/;"	m
OBJS	Makefile	/^OBJS = $(patsubst %.c, $(OPATH)%.o, $(SRCS))$/;"	m
OBJS	libft/Makefile	/^OBJS = $(patsubst %.c, $(PATHO)%.o, $(SRCS))$/;"	m
OCTAL	libft/includes/ft_printf.h	/^# define OCTAL /;"	d
OCTAL_BASE	includes/expansion.h	/^# define OCTAL_BASE	/;"	d
ONELINE	Makefile	/^ONELINE =\\e[1A\\r$/;"	m
ONELINE	libft/Makefile	/^ONELINE =\\e[1A\\r$/;"	m
OPATH	Makefile	/^OPATH = objs\/$/;"	m
OPEN_P	includes/expansion.h	/^# define OPEN_P	/;"	d
OPERATOR	includes/expansion.h	/^# define OPERATOR	/;"	d
OR	includes/expansion.h	/^# define OR /;"	d
OTHER	libft/includes/ft_printf.h	/^# define OTHER /;"	d
OTHER_H	libft/includes/other.h	/^# define OTHER_H$/;"	d
OUTPUT_H	libft/includes/output.h	/^# define OUTPUT_H$/;"	d
PARSER_H	includes/parser.h	/^# define PARSER_H$/;"	d
PATHI	libft/Makefile	/^PATHI = includes\/$/;"	m
PATHO	libft/Makefile	/^PATHO = objs\/$/;"	m
PENDING	includes/define.h	/^# define PENDING	/;"	d
PEX_ADVANCED_EXP	includes/expansion.h	/^# define PEX_ADVANCED_EXP /;"	d
PEX_DELIM	includes/expansion.h	/^	PEX_DELIM,$/;"	e	enum:e_paramexp
PEX_DELIMITERS	includes/expansion.h	/^# define PEX_DELIMITERS /;"	d
PEX_END	includes/expansion.h	/^	PEX_END$/;"	e	enum:e_paramexp
PEX_FIRST_DELIM	includes/expansion.h	/^# define PEX_FIRST_DELIM /;"	d
PEX_NEXT_DELIM	includes/expansion.h	/^# define PEX_NEXT_DELIM /;"	d
PEX_PARAM	includes/expansion.h	/^	PEX_PARAM,$/;"	e	enum:e_paramexp
PEX_PARAM_INTERUPT	includes/expansion.h	/^# define PEX_PARAM_INTERUPT /;"	d
PEX_SPECIAL	includes/expansion.h	/^# define PEX_SPECIAL	/;"	d
PEX_STATES	includes/expansion.h	/^# define PEX_STATES /;"	d
PEX_VALID_DELIM	includes/expansion.h	/^# define PEX_VALID_DELIM /;"	d
PEX_WORD	includes/expansion.h	/^	PEX_WORD,$/;"	e	enum:e_paramexp
PLUS	includes/expansion.h	/^# define PLUS	/;"	d
POP_ENTRY	includes/define.h	/^# define POP_ENTRY	/;"	d
POSSIBLE	includes/define.h	/^# define POSSIBLE	/;"	d
POST_DECRE	includes/expansion.h	/^# define POST_DECRE	/;"	d
POST_INCRE	includes/expansion.h	/^# define POST_INCRE	/;"	d
POW_128	libft/includes/hashmap.h	/^# define POW_128 /;"	d
PRECEDENCE	includes/expansion.h	/^# define PRECEDENCE	/;"	d
PREV	includes/define.h	/^# define PREV	/;"	d
PRE_DECRE	includes/expansion.h	/^# define PRE_DECRE	/;"	d
PRE_INCRE	includes/expansion.h	/^# define PRE_INCRE	/;"	d
PRINT	Makefile	/^PRINT = printf$/;"	m
PRINT	libft/includes/ft_malloc.h	/^# define PRINT	/;"	d
PRINT_AND	includes/enum.h	/^	PRINT_AND,$/;"	e	enum:prompt_type
PRINT_BQUOTE	includes/enum.h	/^	PRINT_BQUOTE,$/;"	e	enum:prompt_type
PRINT_BRACE	includes/enum.h	/^	PRINT_BRACE,$/;"	e	enum:prompt_type
PRINT_DQUOTE	includes/enum.h	/^	PRINT_DQUOTE,$/;"	e	enum:prompt_type
PRINT_HISTORY	includes/define.h	/^# define PRINT_HISTORY	/;"	d
PRINT_ID	includes/define.h	/^# define PRINT_ID	/;"	d
PRINT_MATHS	includes/enum.h	/^	PRINT_MATHS$/;"	e	enum:prompt_type
PRINT_NL	includes/enum.h	/^	PRINT_NL,$/;"	e	enum:prompt_type
PRINT_OR	includes/enum.h	/^	PRINT_OR,$/;"	e	enum:prompt_type
PRINT_PIPE	includes/enum.h	/^	PRINT_PIPE,$/;"	e	enum:prompt_type
PRINT_QUOTE	includes/enum.h	/^	PRINT_QUOTE,$/;"	e	enum:prompt_type
PRMPT_FAIL	includes/define.h	/^# define PRMPT_FAIL /;"	d
PROMPT_AND	includes/define.h	/^# define PROMPT_AND	/;"	d
PROMPT_BQUOTE	includes/define.h	/^# define PROMPT_BQUOTE	/;"	d
PROMPT_BRACE	includes/define.h	/^# define PROMPT_BRACE	/;"	d
PROMPT_DQUOTE	includes/define.h	/^# define PROMPT_DQUOTE	/;"	d
PROMPT_MATHS	includes/define.h	/^# define PROMPT_MATHS	/;"	d
PROMPT_NL	includes/define.h	/^# define PROMPT_NL	/;"	d
PROMPT_OR	includes/define.h	/^# define PROMPT_OR	/;"	d
PROMPT_PIPE	includes/define.h	/^# define PROMPT_PIPE	/;"	d
PROMPT_QUOTE	includes/define.h	/^# define PROMPT_QUOTE	/;"	d
PURPLE	Makefile	/^PURPLE = \\033[0;35m$/;"	m
PURPLE	libft/Makefile	/^PURPLE = \\033[0;35m$/;"	m
P_ASSIGN_DATA	includes/enum.h	/^	P_ASSIGN_DATA,$/;"	e	enum:e_analyzer_state
P_ASSIGN_FLUSH	includes/enum.h	/^	P_ASSIGN_FLUSH,$/;"	e	enum:e_analyzer_state
P_ASSIGN_NAME	includes/enum.h	/^	P_ASSIGN_NAME,$/;"	e	enum:e_analyzer_state
P_CWD	includes/define.h	/^# define P_CWD	/;"	d
P_DATE	includes/define.h	/^# define P_DATE	/;"	d
P_DUP_MOVE	includes/enum.h	/^	P_DUP_MOVE,$/;"	e	enum:e_analyzer_state
P_END	includes/enum.h	/^	P_END,$/;"	e	enum:e_analyzer_state
P_ERROR	includes/enum.h	/^	P_ERROR,$/;"	e	enum:e_analyzer_state
P_ESCAPE	includes/define.h	/^# define P_ESCAPE	/;"	d
P_FILENAME	includes/enum.h	/^	P_FILENAME,$/;"	e	enum:e_analyzer_state
P_HEREDOC	includes/enum.h	/^	P_HEREDOC,$/;"	e	enum:e_analyzer_state
P_HEREDOC_DELIMITER	includes/enum.h	/^	P_HEREDOC_DELIMITER,$/;"	e	enum:e_analyzer_state
P_HEREDOC_REDIRECT	includes/enum.h	/^	P_HEREDOC_REDIRECT,$/;"	e	enum:e_analyzer_state
P_HOST	includes/define.h	/^# define P_HOST	/;"	d
P_IO	includes/enum.h	/^	P_IO,$/;"	e	enum:e_analyzer_state
P_IO_DUP_MOVE	includes/enum.h	/^	P_IO_DUP_MOVE,$/;"	e	enum:e_analyzer_state
P_IO_FILENAME	includes/enum.h	/^	P_IO_FILENAME,$/;"	e	enum:e_analyzer_state
P_IO_FLUSH	includes/enum.h	/^	P_IO_FLUSH,$/;"	e	enum:e_analyzer_state
P_IO_FLUSH_AND	includes/enum.h	/^	P_IO_FLUSH_AND,$/;"	e	enum:e_analyzer_state
P_IO_HEREDOC	includes/enum.h	/^	P_IO_HEREDOC,$/;"	e	enum:e_analyzer_state
P_IO_HEREDOC_DELIMITER	includes/enum.h	/^	P_IO_HEREDOC_DELIMITER,$/;"	e	enum:e_analyzer_state
P_IO_HEREDOC_REDIRECT	includes/enum.h	/^	P_IO_HEREDOC_REDIRECT,$/;"	e	enum:e_analyzer_state
P_IO_REDIRECT	includes/enum.h	/^	P_IO_REDIRECT,$/;"	e	enum:e_analyzer_state
P_IO_REDIRECT_AND	includes/enum.h	/^	P_IO_REDIRECT_AND,$/;"	e	enum:e_analyzer_state
P_LOW_OPT	includes/define.h	/^# define P_LOW_OPT	/;"	d
P_MISS	includes/define.h	/^# define P_MISS	/;"	d
P_NAME	includes/define.h	/^# define P_NAME	/;"	d
P_OPT	includes/define.h	/^# define P_OPT	/;"	d
P_PIPE	includes/enum.h	/^	P_PIPE,$/;"	e	enum:e_analyzer_state
P_REDIRECT	includes/enum.h	/^	P_REDIRECT,$/;"	e	enum:e_analyzer_state
P_REDIRECT_AND	includes/enum.h	/^	P_REDIRECT_AND,$/;"	e	enum:e_analyzer_state
P_REDIRECT_FLUSH	includes/enum.h	/^	P_REDIRECT_FLUSH,$/;"	e	enum:e_analyzer_state
P_REDIRECT_FLUSH_AND	includes/enum.h	/^	P_REDIRECT_FLUSH_AND,$/;"	e	enum:e_analyzer_state
P_START	includes/enum.h	/^	P_START,$/;"	e	enum:e_analyzer_state
P_STOP	includes/enum.h	/^	P_STOP,$/;"	e	enum:e_analyzer_state
P_STRING	includes/enum.h	/^	P_STRING,$/;"	e	enum:e_analyzer_state
P_STRING_FLUSH	includes/enum.h	/^	P_STRING_FLUSH,$/;"	e	enum:e_analyzer_state
P_USER	includes/define.h	/^# define P_USER	/;"	d
QUOTE_BACKSLASH	includes/enum.h	/^	QUOTE_BACKSLASH,$/;"	e	enum:e_quote
QUOTE_DOUBLE	includes/enum.h	/^	QUOTE_DOUBLE,$/;"	e	enum:e_quote
QUOTE_OFF	includes/enum.h	/^	QUOTE_OFF,$/;"	e	enum:e_quote
QUOTE_SINGLE	includes/enum.h	/^	QUOTE_SINGLE,$/;"	e	enum:e_quote
QUOTING	includes/define.h	/^# define QUOTING	/;"	d
RD_CEND	includes/define.h	/^# define RD_CEND /;"	d
RD_CHOME	includes/define.h	/^# define RD_CHOME /;"	d
RD_CLEAR	includes/define.h	/^# define RD_CLEAR /;"	d
RD_CMOVE	includes/define.h	/^# define RD_CMOVE /;"	d
RD_FPTE	includes/define.h	/^# define RD_FPTE /;"	d
RD_FPTP	includes/define.h	/^# define RD_FPTP /;"	d
RD_FSTP	includes/define.h	/^# define RD_FSTP /;"	d
RD_LAST	includes/define.h	/^# define RD_LAST /;"	d
RD_LINE	includes/define.h	/^# define RD_LINE /;"	d
RD_NONE	includes/define.h	/^# define RD_NONE /;"	d
RD_SEARCH	includes/define.h	/^# define RD_SEARCH /;"	d
RD_VISUAL	includes/define.h	/^# define RD_VISUAL	/;"	d
READONLY_VAR	includes/define.h	/^# define READONLY_VAR	/;"	d
READ_SIZE	includes/define.h	/^# define READ_SIZE	/;"	d
RECORD_HISTORY_OPT	includes/define.h	/^# define RECORD_HISTORY_OPT	/;"	d
RED	Makefile	/^RED = \\033[0;31m$/;"	m
RED	libft/Makefile	/^RED = \\033[0;31m$/;"	m
RED	libft/includes/test.h	/^# define RED /;"	d
REDIR	includes/define.h	/^# define REDIR	/;"	d
REDIRECT_ACTION	includes/define.h	/^# define REDIRECT_ACTION	/;"	d
REDIR_AND	includes/define.h	/^# define REDIR_AND	/;"	d
REDIR_DB	includes/define.h	/^# define REDIR_DB	/;"	d
REL	includes/define.h	/^# define REL	/;"	d
RESET_HEAD	includes/define.h	/^# define RESET_HEAD	/;"	d
RESET_RESULT	includes/autocompletion.h	/^# define RESET_RESULT	/;"	d
RESOLVE_H	includes/resolve.h	/^# define RESOLVE_H$/;"	d
RESTORE_TERM	includes/define.h	/^# define RESTORE_TERM	/;"	d
REVERSE	includes/define.h	/^# define REVERSE	/;"	d
REV_SEARCH	includes/define.h	/^# define REV_SEARCH	/;"	d
RPN_NUMBER	includes/expansion.h	/^	RPN_NUMBER,$/;"	e	enum:e_rpn
RPN_OPERATOR	includes/expansion.h	/^	RPN_OPERATOR,$/;"	e	enum:e_rpn
RPN_PARENT_CLOSE	includes/expansion.h	/^	RPN_PARENT_CLOSE,$/;"	e	enum:e_rpn
RPN_PARENT_OPEN	includes/expansion.h	/^	RPN_PARENT_OPEN,$/;"	e	enum:e_rpn
RUNNING	includes/define.h	/^# define RUNNING	/;"	d
R_OPT	includes/define.h	/^# define R_OPT	/;"	d
SEARCH_SUFFIX	includes/define.h	/^# define SEARCH_SUFFIX	/;"	d
SETENV_USAGE	includes/define.h	/^# define SETENV_USAGE /;"	d
SETUP_DONE	includes/define.h	/^# define SETUP_DONE	/;"	d
SET_TERM	includes/define.h	/^# define SET_TERM	/;"	d
SET_VAR	includes/define.h	/^# define SET_VAR	/;"	d
SH21_H	includes/sh21.h	/^# define SH21_H$/;"	d
SH42_USAGE_1	includes/define.h	/^# define SH42_USAGE_1	/;"	d
SH42_USAGE_2	includes/define.h	/^# define SH42_USAGE_2	/;"	d
SH42_USAGE_LONG_OPTION	includes/define.h	/^# define SH42_USAGE_LONG_OPTION	/;"	d
SH42_USAGE_LONG_OPTION_2	includes/define.h	/^# define SH42_USAGE_LONG_OPTION_2	/;"	d
SHELL	includes/define.h	/^# define SHELL	/;"	d
SH_GENERAL_ERROR	includes/define.h	/^# define SH_GENERAL_ERROR	/;"	d
SH_MALLOC_ERROR	includes/define.h	/^# define SH_MALLOC_ERROR	/;"	d
SIGNED	libft/includes/ft_printf.h	/^# define SIGNED /;"	d
SIG_H	includes/sig.h	/^# define SIG_H$/;"	d
SILENCE	libft/includes/ft_malloc.h	/^# define SILENCE	/;"	d
SINGLEQUOTE_FLAG	includes/define.h	/^# define SINGLEQUOTE_FLAG	/;"	d
SIZE	libft/includes/ft_printf.h	/^# define SIZE /;"	d
SLE_CC	includes/define.h	/^# define SLE_CC	/;"	d
SLE_EXIT	includes/define.h	/^# define SLE_EXIT	/;"	d
SLE_GET_INPUT	includes/define.h	/^# define SLE_GET_INPUT	/;"	d
SLE_PROFILE	includes/define.h	/^# define SLE_PROFILE	/;"	d
SLE_PS2_PROMPT	includes/define.h	/^# define SLE_PS2_PROMPT	/;"	d
SLE_PS3_PROMPT	includes/define.h	/^# define SLE_PS3_PROMPT	/;"	d
SLE_RD_PROMPT	includes/define.h	/^# define SLE_RD_PROMPT	/;"	d
SLE_SIZE_UPDATE	includes/define.h	/^# define SLE_SIZE_UPDATE	/;"	d
SSIG_ABT	includes/define.h	/^# define SSIG_ABT	/;"	d
SSIG_INT	includes/define.h	/^# define SSIG_INT /;"	d
SSIG_KILL	includes/define.h	/^# define SSIG_KILL /;"	d
SSIG_QUIT	includes/define.h	/^# define SSIG_QUIT /;"	d
SSIG_SEGV	includes/define.h	/^# define SSIG_SEGV	/;"	d
SSIG_STOP	includes/define.h	/^# define SSIG_STOP /;"	d
START_OPERATOR	includes/define.h	/^# define START_OPERATOR	/;"	d
START_RESERVED_WORD	includes/define.h	/^# define START_RESERVED_WORD	/;"	d
STATE_AUTOCP	includes/define.h	/^# define STATE_AUTOCP	/;"	d
STATE_SEARCH	includes/define.h	/^# define STATE_SEARCH	/;"	d
STATE_STD	includes/define.h	/^# define STATE_STD	/;"	d
STATE_VISUAL	includes/define.h	/^# define STATE_VISUAL	/;"	d
STOPPED	includes/define.h	/^# define STOPPED	/;"	d
STRUCT_H	includes/struct.h	/^# define STRUCT_H$/;"	d
STR_H	libft/includes/str.h	/^# define STR_H$/;"	d
SUCCEDED	includes/define.h	/^# define SUCCEDED	/;"	d
SUCCESS	includes/define.h	/^# define SUCCESS	/;"	d
SUCCESS	libft/includes/hashmap.h	/^# define SUCCESS /;"	d
SUCCESS	libft/includes/libft.h	/^# define SUCCESS /;"	d
S_OPT	includes/define.h	/^# define S_OPT	/;"	d
TEN	libft/includes/ft_printf.h	/^# define TEN /;"	d
TERMMDE_FAIL	includes/define.h	/^# define TERMMDE_FAIL /;"	d
TERMMODE_DFLT	includes/define.h	/^# define TERMMODE_DFLT /;"	d
TERMMODE_EXEC	includes/define.h	/^# define TERMMODE_EXEC /;"	d
TERMMODE_INIT	includes/define.h	/^# define TERMMODE_INIT /;"	d
TERMMODE_SLE	includes/define.h	/^# define TERMMODE_SLE /;"	d
TEST_H	libft/includes/test.h	/^# define TEST_H$/;"	d
TGETSTR_FAIL	includes/define.h	/^# define TGETSTR_FAIL /;"	d
TIMES	includes/expansion.h	/^# define TIMES	/;"	d
TOUCH	Makefile	/^TOUCH = touch$/;"	m
TO_CLOSE	includes/define.h	/^# define TO_CLOSE	/;"	d
TRIM_OFF	includes/define.h	/^# define TRIM_OFF	/;"	d
TRIM_ON	includes/define.h	/^# define TRIM_ON	/;"	d
TRUE	includes/define.h	/^# define TRUE	/;"	d
TRUE	libft/includes/libft.h	/^# define TRUE /;"	d
TYPE	libft/includes/ft_printf.h	/^# define TYPE /;"	d
T_OPT	includes/define.h	/^# define T_OPT	/;"	d
UNARY_MINUS	includes/expansion.h	/^# define UNARY_MINUS	/;"	d
UNARY_PLUS	includes/expansion.h	/^# define UNARY_PLUS	/;"	d
UNSETENV_USAGE	includes/define.h	/^# define UNSETENV_USAGE /;"	d
UNSET_USAGE	includes/define.h	/^# define UNSET_USAGE /;"	d
UNSIGNED	libft/includes/ft_printf.h	/^# define UNSIGNED /;"	d
VALID_PROCESS	includes/define.h	/^# define VALID_PROCESS	/;"	d
VARIABLE_BRACKET_TYPE	includes/autocompletion.h	/^	VARIABLE_BRACKET_TYPE,$/;"	e	enum:e_result_type
VARIABLE_TYPE	includes/autocompletion.h	/^	VARIABLE_TYPE,$/;"	e	enum:e_result_type
VCT_FAIL	includes/define.h	/^# define VCT_FAIL /;"	d
VCT_UNIT_H	libft/vctunit/vct_unit.h	/^# define VCT_UNIT_H$/;"	d
VECTOR_BUFFER_SIZE	libft/includes/str.h	/^# define VECTOR_BUFFER_SIZE /;"	d
VECTOR_H	libft/includes/vector.h	/^# define VECTOR_H$/;"	d
WHITE	Makefile	/^WHITE = \\033[0;37m$/;"	m
WHITE	libft/Makefile	/^WHITE = \\033[0;37m$/;"	m
WINDOW_FAIL	includes/define.h	/^# define WINDOW_FAIL /;"	d
WITHOUT_SPACE	includes/define.h	/^# define WITHOUT_SPACE	/;"	d
WORD	includes/define.h	/^# define WORD	/;"	d
WRITE_HISTFILE	includes/define.h	/^# define WRITE_HISTFILE	/;"	d
YELLOW	Makefile	/^YELLOW = \\033[0;33m$/;"	m
YELLOW	libft/Makefile	/^YELLOW = \\033[0;33m$/;"	m
YELLOW	libft/includes/test.h	/^# define YELLOW /;"	d
__unused	includes/define.h	/^#  define __unused /;"	d
actionkeys	includes/struct.h	/^	int8_t				(*actionkeys[AK_AMOUNT])(t_registry *shell, struct s_sle *sle);$/;"	m	struct:s_sle
actions	includes/struct.h	/^	t_list				*actions;$/;"	m	struct:s_command
active_completion	srcs/module/autocompletion/autocompletion.c	/^static char		*active_completion(t_autocomplete *result,$/;"	f	file:
active_jobs	includes/struct.h	/^	uint64_t			active_jobs;$/;"	m	struct:s_registry
add_end_slash	srcs/module/builtin/cd/cd_cdpath.c	/^static uint8_t	add_end_slash(char **path)$/;"	f	file:
add_entry	srcs/module/history/entry_manager.c	/^void	add_entry(t_entry **head, t_entry *new_entry)$/;"	f
add_fd_to_param	srcs/module/builtin/fc/fc_editor.c	/^static void		add_fd_to_param(char **param, int fd)$/;"	f	file:
add_file_to_list	srcs/module/autocompletion/get_completion_file.c	/^static void		add_file_to_list(t_autocomplete *result,$/;"	f	file:
add_nbr_var	srcs/core/tools/intern_var/intern_var_manager.c	/^int8_t		add_nbr_var(t_list **intern, char *name, int data, t_option flag)$/;"	f
add_new_entry	srcs/module/history/history.c	/^static void	add_new_entry(t_history *history, char *new)$/;"	f	file:
add_redraw_flags	srcs/module/sle/redraw/redraw.c	/^inline void		add_redraw_flags(t_sle *sle, uint32_t rd_flag)$/;"	f
add_to_buffer	srcs/module/lexer/process/lexer_tools.c	/^void	add_to_buffer(t_lexer *lexer)$/;"	f
add_var	srcs/core/tools/intern_var/intern_var_manager.c	/^int8_t		add_var(t_list **intern, char *name, char *data, t_option flag)$/;"	f
add_var_to_list	srcs/module/autocompletion/get_completion_var.c	/^static void		add_var_to_list(t_autocomplete *result,$/;"	f	file:
addr	libft/includes/ft_malloc.h	/^	void		*addr;$/;"	m	struct:s_meminfo
advanced_expansion	srcs/module/expansion/parameter/parameter_get.c	/^int		advanced_expansion(t_list *intern, t_parameter *parameter)$/;"	f
ak_arrow_down	srcs/module/sle/action_keys/movement/execute_arrow_ak.c	/^int8_t				ak_arrow_down(t_registry *shell, t_sle *sle)$/;"	f
ak_arrow_left	srcs/module/sle/action_keys/movement/execute_arrow_ak.c	/^int8_t				ak_arrow_left(t_registry *shell, t_sle *sle)$/;"	f
ak_arrow_right	srcs/module/sle/action_keys/movement/execute_arrow_ak.c	/^int8_t				ak_arrow_right(t_registry *shell, t_sle *sle)$/;"	f
ak_arrow_up	srcs/module/sle/action_keys/movement/execute_arrow_ak.c	/^int8_t				ak_arrow_up(t_registry *shell, t_sle *sle)$/;"	f
ak_backspace	srcs/module/sle/action_keys/execute_special_ak.c	/^int8_t		ak_backspace(__unused t_registry *shell, t_sle *sle)$/;"	f
ak_copy_selection	srcs/module/sle/action_keys/clipboard/execute_clipboard_copy_ak.c	/^int8_t	ak_copy_selection(t_registry *shell, t_sle *sle)$/;"	f
ak_ctrl_d	srcs/module/sle/action_keys/execute_special_ak.c	/^int8_t		ak_ctrl_d(__unused t_registry *shell, t_sle *sle)$/;"	f
ak_ctrl_down	srcs/module/sle/action_keys/movement/execute_word_jumping_ak.c	/^int8_t		ak_ctrl_down(t_registry *shell, t_sle *sle)$/;"	f
ak_ctrl_l	srcs/module/sle/action_keys/execute_special_ak.c	/^int8_t		ak_ctrl_l(__unused t_registry *shell, t_sle *sle)$/;"	f
ak_ctrl_left	srcs/module/sle/action_keys/movement/execute_word_jumping_ak.c	/^int8_t		ak_ctrl_left(t_registry *shell, t_sle *sle)$/;"	f
ak_ctrl_r	srcs/module/sle/action_keys/execute_special_ak.c	/^int8_t		ak_ctrl_r(__unused t_registry *shell, t_sle *sle)$/;"	f
ak_ctrl_right	srcs/module/sle/action_keys/movement/execute_word_jumping_ak.c	/^int8_t		ak_ctrl_right(t_registry *shell, t_sle *sle)$/;"	f
ak_ctrl_t	srcs/module/sle/action_keys/execute_special_ak.c	/^int8_t		ak_ctrl_t(__unused t_registry *shell, __unused t_sle *sle)$/;"	f
ak_ctrl_up	srcs/module/sle/action_keys/movement/execute_word_jumping_ak.c	/^int8_t		ak_ctrl_up(t_registry *shell, t_sle *sle)$/;"	f
ak_cut_selection	srcs/module/sle/action_keys/clipboard/execute_clipboard_cut_ak.c	/^int8_t				ak_cut_selection(t_registry *shell, t_sle *sle)$/;"	f
ak_delete	srcs/module/sle/action_keys/execute_special_ak.c	/^int8_t		ak_delete(__unused t_registry *shell, t_sle *sle)$/;"	f
ak_end	srcs/module/sle/action_keys/movement/execute_he_ak.c	/^int8_t	ak_end(t_registry *shell, t_sle *sle)$/;"	f
ak_enter_visual_mode	srcs/module/sle/action_keys/visual_mode.c	/^int8_t					ak_enter_visual_mode(__unused t_registry *shell,$/;"	f
ak_exit_modes	srcs/module/sle/action_keys/visual_mode.c	/^int8_t					ak_exit_modes(__unused t_registry *shell, t_sle *sle)$/;"	f
ak_hightab	srcs/module/sle/action_keys/execute_special_ak.c	/^int8_t		ak_hightab(__unused t_registry *shell, t_sle *sle)$/;"	f
ak_home	srcs/module/sle/action_keys/movement/execute_he_ak.c	/^int8_t	ak_home(t_registry *shell, t_sle *sle)$/;"	f
ak_masks	includes/struct.h	/^	uint64_t			ak_masks[AK_AMOUNT];$/;"	m	struct:s_sle
ak_paste_clipboard	srcs/module/sle/action_keys/clipboard/execute_clipboard_paste.c	/^int8_t				ak_paste_clipboard(t_registry *shell, t_sle *sle)$/;"	f
align_prompt	srcs/module/sle/prompt/prompt_tools.c	/^static void		align_prompt(__unused t_sle *sle)$/;"	f	file:
all_is_done	srcs/module/interpreter/core/waiter.c	/^static uint8_t	all_is_done(t_list *processes)$/;"	f	file:
analyzer	srcs/module/analyzer/analyzer.c	/^t_list			*analyzer(t_resolution *resolve)$/;"	f
analyzer_print_debug	srcs/module/logging/print_debug.c	/^void		analyzer_print_debug(t_registry *shell, t_list *command_group)$/;"	f
arg	libft/includes/ft_printf.h	/^	t_args				arg;$/;"	m	struct:s_format
arithmetic	srcs/module/expansion/arithmetic.c	/^static int		arithmetic(__unused t_list *intern, char **output, int i)$/;"	f	file:
arithmetic_analyzer	srcs/module/expansion/arithmetic/arithmetic_analyzer.c	/^int8_t		arithmetic_analyzer(t_arithmetic *arithmetic)$/;"	f
arithmetic_expansion	srcs/module/expansion/arithmetic.c	/^char		*arithmetic_expansion(t_list *intern, char *input)$/;"	f
arithmetic_replace	srcs/module/expansion/arithmetic.c	/^int				arithmetic_replace(t_arithmetic *arithmetic, char **output, int i)$/;"	f
assign_data_analyzer	srcs/module/analyzer/state/assign_analyzer.c	/^void	assign_data_analyzer(t_resolution *resolve)$/;"	f
assign_expansion	srcs/module/expansion/parameter/parameter_actions.c	/^int			assign_expansion(t_list *intern, t_parameter *param)$/;"	f
assign_flush_analyzer	srcs/module/analyzer/state/assign_analyzer.c	/^void	assign_flush_analyzer(t_resolution *resolve)$/;"	f
assign_intern	srcs/module/interpreter/core/fork_process.c	/^int			assign_intern(t_registry *shell, t_list **assign)$/;"	f
assign_keycodes	srcs/module/sle/init/load_sle.c	/^uint64_t    assign_keycodes(t_sle *sle)$/;"	f
assign_name_analyzer	srcs/module/analyzer/state/assign_analyzer.c	/^void	assign_name_analyzer(t_resolution *resolve)$/;"	f
assignation	includes/struct.h	/^	uint8_t				assignation;$/;"	m	struct:s_lexer
autocompletion	srcs/module/autocompletion/autocompletion.c	/^int8_t			autocompletion(char *input, t_registry *shell,$/;"	f
av	includes/struct.h	/^	char				**av;$/;"	m	struct:s_process
av	includes/struct.h	/^	t_list				*av;$/;"	m	struct:s_command
backslash_process	srcs/module/sle/prompt/prompt_subroutine_tools.c	/^void			backslash_process(t_sle *sle)$/;"	f
batch_mode	srcs/core/launch/batch_mode.c	/^void					batch_mode(t_registry *shell)$/;"	f
bg_blt	srcs/module/builtin/bg/bg.c	/^uint8_t		bg_blt(t_registry *shell, __unused char **av)$/;"	f
bin	includes/struct.h	/^	t_hash				bin;$/;"	m	struct:s_hashmap
binary	libft/srcs/ft_printf/unsigned.c	/^void	binary(t_format *format)$/;"	f
blt	includes/struct.h	/^	t_hash				blt;$/;"	m	struct:s_hashmap
brace_exp_routine	srcs/module/sle/prompt/prompt_subroutine.c	/^uint8_t			brace_exp_routine(t_sle *sle, size_t *i)$/;"	f
buffer	includes/expansion.h	/^	t_vector				*buffer;$/;"	m	struct:s_parameter
buffer	includes/struct.h	/^	t_vector			*buffer;$/;"	m	struct:s_lexer
buffer	libft/includes/output.h	/^	char			*buffer;$/;"	m	struct:s_buffer
buffer	libft/includes/vector.h	/^    char            *buffer;$/;"	m	struct:s_vector
bzero_analyzer	srcs/module/analyzer/init/init_analyzer.c	/^static void	bzero_analyzer(t_analyzer analyzer)$/;"	f	file:
bzero_analyzer	srcs/module/expansion/arithmetic/math_analyzer.c	/^static void	bzero_analyzer(t_ar_analyzer analyzer)$/;"	f	file:
calcul	includes/expansion.h	/^	t_stack					calcul;$/;"	m	struct:s_infix
calculate_rpn	srcs/module/expansion/arithmetic/calculate_rpn.c	/^int8_t			calculate_rpn(t_stack *rpn, t_infix  *infix)$/;"	f
calculator	srcs/module/expansion/arithmetic/calculator.c	/^int8_t		calculator(t_infix *infix)$/;"	f
cd_blt	srcs/module/builtin/cd/cd.c	/^uint8_t				cd_blt(t_registry *shell, char **av)$/;"	f
change_directory	srcs/module/builtin/cd/cd.c	/^static uint8_t		change_directory(t_registry *shell, char *curpath,$/;"	f	file:
change_node	srcs/core/tools/intern_var/intern_var_tools.c	/^int8_t			change_node(t_list **alst, char *name, char *data,$/;"	f
character	libft/includes/ft_printf.h	/^	char				character;$/;"	m	union:u_args
character	libft/srcs/ft_printf/other.c	/^void			character(t_format *format)$/;"	f
character_swap	srcs/module/expansion/expansion.c	/^char	character_swap(const char swapped)$/;"	f
check_access	srcs/module/analyzer/tools/analyzer_tools.c	/^uint8_t	check_access(char *data)$/;"	f
check_backslash	srcs/module/expansion/expansion.c	/^int		check_backslash(char *dest, t_quote quote, int i)$/;"	f
check_delimiter	srcs/module/interpreter/tools/redirect_tools.c	/^int				check_delimiter(char **delimiter, t_vector **vector, int fd)$/;"	f
check_expansion	srcs/module/expansion/variable.c	/^static int	check_expansion(t_list *intern, char **dest, int i, t_quote quote)$/;"	f	file:
check_filename	srcs/module/analyzer/tools/analyzer_tools.c	/^void	check_filename(t_resolution *resolve)$/;"	f
check_forbidden_operation	srcs/module/expansion/arithmetic/calculate_rpn.c	/^static int8_t	check_forbidden_operation(t_rpn_tk *curr, t_rpn_tk *second)$/;"	f	file:
check_math_expansion	srcs/module/expansion/arithmetic.c	/^static int		check_math_expansion(t_list *intern, char **buff, int i, __unused t_quote quote)$/;"	f	file:
check_path	srcs/module/builtin/cd/cd_cdpath.c	/^uint8_t			check_path(t_registry *shell, char *curpath,$/;"	f
check_redirect_error	srcs/module/interpreter/core/redirects.c	/^int		check_redirect_error(void *context, void *data)$/;"	f
check_token	srcs/module/analyzer/state/analyzer_interface.c	/^int		check_token(t_resolution *resolve)$/;"	f
child_process	srcs/module/interpreter/core/fork_process.c	/^static void	child_process(t_registry *shell, t_process *process, char **env)$/;"	f	file:
clear	includes/struct.h	/^	char				*clear;$/;"	m	struct:s_termcaps
clear_line	includes/struct.h	/^	char				*clear_line;$/;"	m	struct:s_termcaps
clear_screen	includes/struct.h	/^	char				*clear_screen;$/;"	m	struct:s_termcaps
clip	includes/struct.h	/^	t_vector			*clip;$/;"	m	struct:s_sle
close_bracket	srcs/module/expansion/arithmetic/shunting_yard.c	/^static int8_t	close_bracket(t_rpn_tk *curr, t_stack *operator, t_stack *rpn)$/;"	f	file:
close_fd	srcs/module/interpreter/core/redirect_functions.c	/^void		close_fd(t_registry *shell, t_redirect *redirect, t_action *action)$/;"	f
close_pipe	srcs/module/interpreter/tools/pipe_interpreter.c	/^void	close_pipe(void *data)$/;"	f
close_redirect	srcs/module/interpreter/core/redirects.c	/^void	close_redirect(void *data)$/;"	f
cmd	includes/struct.h	/^	char		*cmd;$/;"	m	struct:s_entry
cmd_to_process	srcs/module/interpreter/maping/map.c	/^void		*cmd_to_process(void *context, void *data)$/;"	f
color	libft/includes/ft_printf.h	/^	char				*color;$/;"	m	struct:s_format
color_len	libft/includes/ft_printf.h	/^	int					color_len;$/;"	m	struct:s_format
colors	libft/srcs/ft_printf/widthprec.c	/^char		*colors(t_format *format, char *tmp)$/;"	f
cols	includes/struct.h	/^	uint32_t			cols;$/;"	m	struct:s_window
command_args	srcs/module/analyzer/analyzer.c	/^static void		command_args(t_stack *tree_node, t_command *command)$/;"	f	file:
command_assign	srcs/module/analyzer/analyzer.c	/^static void		command_assign(t_stack *tree_node, t_command *command)$/;"	f	file:
command_list	includes/struct.h	/^	t_list				*command_list;$/;"	m	struct:s_group
command_str	includes/struct.h	/^	char				*command_str;$/;"	m	struct:s_opt
compare	includes/expansion.h	/^	t_stack					compare;$/;"	m	struct:s_arithmetic
completed	includes/struct.h	/^	uint8_t				completed;$/;"	m	struct:s_process
compute_mask	srcs/module/sle/utils/input_tools.c	/^uint64_t			compute_mask(char c[READ_SIZE])$/;"	f
compute_redrawinfo	srcs/module/sle/redraw/redraw.c	/^void	compute_redrawinfo(t_sle *sle, t_redrawinfo *rd_info)$/;"	f
concat_pwd_with_curpath	srcs/module/builtin/cd/cd_additions.c	/^char			*concat_pwd_with_curpath(t_registry *shell, char **path)$/;"	f
convert	libft/includes/ft_printf.h	/^	t_convert			convert;$/;"	m	struct:s_format
convert	libft/srcs/ft_printf/digit.c	/^static char			*convert(t_format *format, long long value)$/;"	f	file:
convert_logical_operator	srcs/module/expansion/arithmetic/arithmetic_base_states.c	/^void		convert_logical_operator(t_arithmetic *arithmetic, t_rpn_tk *token)$/;"	f
convert_number	srcs/module/expansion/arithmetic/arithmetic_base_states.c	/^void		convert_number(t_rpn_tk *current, t_token *token)$/;"	f
convert_operator	srcs/module/expansion/arithmetic/arithmetic_variable.c	/^void		convert_operator(t_arithmetic *arithmetic, t_rpn_tk *token)$/;"	f
convert_sign	libft/srcs/conversion/ft_convert_base.c	/^char				*convert_sign(char *nbr, char *base_from, char *base_to)$/;"	f
convert_unsign	libft/srcs/conversion/ft_convert_base.c	/^char				*convert_unsign(char *nbr, char *base_from, char *base_to)$/;"	f
converter	libft/srcs/conversion/ft_atoi.c	/^static	int	converter(const char *str, long result, int sign)$/;"	f	file:
converter	libft/srcs/conversion/ft_atoll_base.c	/^static void	converter(char *str, char *base, int len, long long *res)$/;"	f	file:
converter	libft/srcs/conversion/ft_atoull_base.c	/^static void			converter(char *str, char *base, int len, \\$/;"	f	file:
converter	libft/srcs/conversion/ft_itoa.c	/^static	void	converter(char *buffer, long n, int i)$/;"	f	file:
converter	libft/srcs/conversion/ft_llitoa.c	/^static	void	converter(char *buffer, long long n, int i)$/;"	f	file:
converter	libft/srcs/conversion/ft_ullitoa.c	/^static	void	converter(char *buffer, unsigned long long n, int i)$/;"	f	file:
converter	libft/srcs/ft_printf/other.c	/^static char		*converter(t_format *format)$/;"	f	file:
converter	libft/srcs/output/ft_putnbr.c	/^static	void	converter(long nb)$/;"	f	file:
converter	libft/srcs/output/ft_putnbr_fd.c	/^static	void	converter(long nb, int fd)$/;"	f	file:
copy_var	srcs/module/interpreter/tools/generate_env.c	/^int		copy_var(void *src, void *dest)$/;"	f
create_entry	srcs/module/history/entry_manager.c	/^t_entry	*create_entry(const char *cmd)$/;"	f
create_list	libft/srcs/directory/ft_dirlist.c	/^static int		create_list(DIR *current, char *path, t_list **lst)$/;"	f	file:
create_node	srcs/core/tools/intern_var/intern_var_tools.c	/^int8_t			create_node(t_list **alst, char *name, char *data,$/;"	f
create_pipe	srcs/module/interpreter/tools/pipe_interpreter.c	/^t_list	*create_pipe(int to, int from, unsigned int pipe_type)$/;"	f
cur	libft/includes/get_next_line.h	/^	char			*cur;$/;"	m	struct:s_gnl_file
curr_token	includes/expansion.h	/^	t_token					*curr_token;$/;"	m	struct:s_arithmetic
current	includes/expansion.h	/^	t_list					*current;$/;"	m	struct:s_arithmetic
current	includes/struct.h	/^	char				current;$/;"	m	struct:s_job
current_minus	includes/struct.h	/^	t_list				*current_minus;$/;"	m	struct:s_registry
current_plus	includes/struct.h	/^	t_list				*current_plus;$/;"	m	struct:s_registry
current_token	includes/expansion.h	/^	t_token					*current_token;$/;"	m	struct:s_math
cursor	includes/struct.h	/^	t_cursor			cursor;$/;"	m	struct:s_sle
cursor_move	srcs/module/sle/cursor.c	/^static inline void cursor_move(t_sle *sle)$/;"	f	file:
data	includes/expansion.h	/^	char					*data;$/;"	m	struct:s_pex_token
data	includes/struct.h	/^	char				*data;$/;"	m	struct:s_token
data	includes/struct.h	/^	char				*data;$/;"	m	struct:s_variable
data	includes/struct.h	/^	t_list				*data;$/;"	m	struct:s_action
data	libft/includes/hashmap.h	/^	void		*data;$/;"	m	struct:s_hnode
data	libft/includes/list.h	/^	void			*data;$/;"	m	struct:s_list
data_size	libft/includes/list.h	/^	size_t			data_size;$/;"	m	struct:s_list
debug_logger_extend	srcs/module/logging/debug_logger.c	/^static void		debug_logger_extend(t_registry *shell,$/;"	f	file:
default_expansion	srcs/module/expansion/parameter/parameter_actions.c	/^int			default_expansion(t_list *intern, t_parameter *param)$/;"	f
default_io	srcs/module/interpreter/tools/map_tools.c	/^void	default_io(const uint8_t std, char *tty_name)$/;"	f
default_variable	srcs/core/startup/init/setup.c	/^static void		default_variable(t_list **intern, char *name)$/;"	f	file:
define_io_dup_move	srcs/module/analyzer/state/io_redirect_analyzer.c	/^int		 define_io_dup_move(t_token *token)$/;"	f
define_io_redirect	srcs/module/analyzer/state/io_redirect_analyzer.c	/^enum e_actions	define_io_redirect(t_token *token)$/;"	f
define_redirect	srcs/module/analyzer/state/redirect_analyzer.c	/^enum e_actions	define_redirect(t_token *token)$/;"	f
del_action	srcs/module/interpreter/tools/list_tools.c	/^void		del_action(void *data)$/;"	f
del_command	srcs/module/interpreter/tools/list_tools.c	/^void		del_command(void *data)$/;"	f
del_group	srcs/module/interpreter/tools/list_tools.c	/^void		del_group(void *data)$/;"	f
del_infix	srcs/module/expansion/arithmetic/arithmetic_tools.c	/^void		del_infix(t_infix *infix)$/;"	f
del_interns	srcs/module/sle/save_interns.c	/^static void	del_interns(t_sle *sle)$/;"	f	file:
del_job	srcs/module/interpreter/tools/list_tools.c	/^void		del_job(void *data)$/;"	f
del_meminfo	libft/srcs/garbage_collector/ft_free.c	/^void	del_meminfo(t_list **lst)$/;"	f
del_node	srcs/core/tools/intern_var/intern_var_free.c	/^static int8_t	del_node(t_list *intern, char *name)$/;"	f	file:
del_pex_token	srcs/module/expansion/parameter.c	/^void	del_pex_token(void *data)$/;"	f
del_process	srcs/module/interpreter/tools/list_tools.c	/^void		del_process(void *data)$/;"	f
del_process_redirect	srcs/module/interpreter/core/redirects.c	/^void	del_process_redirect(void *data)$/;"	f
del_token	srcs/core/tools/list_function_pointers.c	/^void	del_token(void *token)$/;"	f
delete_analyzer	srcs/module/analyzer/tools/analyzer_tools.c	/^void	delete_analyzer(t_resolution *resolve)$/;"	f
delete_backslash	srcs/module/expansion/quoting.c	/^static int delete_backslash(char *str, t_quote quote)$/;"	f	file:
delete_char	srcs/module/expansion/quoting.c	/^static void	delete_char(char *str)$/;"	f	file:
delete_entry	srcs/module/history/history.c	/^static void	delete_entry(t_history *history, const int id)$/;"	f	file:
delete_job	srcs/core/tools/list_function_pointers.c	/^void	delete_job(void *data)$/;"	f
delete_parameter	srcs/module/expansion/parameter.c	/^void	delete_parameter(t_parameter *parameter)$/;"	f
delete_process	srcs/core/tools/list_function_pointers.c	/^void	delete_process(void *data)$/;"	f
diff	libft/includes/ft_printf.h	/^	unsigned int		diff;$/;"	m	struct:s_format
digit	includes/expansion.h	/^	int64_t					digit;$/;"	m	union:u_value
digit	libft/srcs/ft_printf/digit.c	/^void				digit(t_format *format)$/;"	f
dir_del	libft/srcs/directory/ft_dirdel.c	/^static void	dir_del(void *file)$/;"	f	file:
disp_len	includes/struct.h	/^	uint64_t			disp_len;$/;"	m	struct:s_redrawinfo
displayed_line	includes/struct.h	/^	t_vector			*displayed_line;$/;"	m	struct:s_window
do_compare	srcs/module/expansion/arithmetic/math.c	/^void		do_compare(t_rpn_tk *first, t_rpn_tk *second, t_rpn_tk *curr)$/;"	f
do_high_op	srcs/module/expansion/arithmetic/math.c	/^void		do_high_op(t_rpn_tk *first, t_rpn_tk *second, t_rpn_tk *curr)$/;"	f
do_i_run	srcs/module/interpreter/tools/interpreter_tools.c	/^uint8_t		do_i_run(t_registry *shell, t_job *job, int job_type)$/;"	f
do_logical	srcs/module/expansion/arithmetic/math.c	/^void		do_logical(t_rpn_tk *first, t_rpn_tk *second, t_rpn_tk *curr)$/;"	f
do_low_op	srcs/module/expansion/arithmetic/math.c	/^void		do_low_op(t_rpn_tk *first, t_rpn_tk *second, t_rpn_tk *curr)$/;"	f
do_math	srcs/module/expansion/arithmetic/calculate_rpn.c	/^static void		do_math(t_rpn_tk *first, t_rpn_tk *second, t_rpn_tk *curr)$/;"	f	file:
do_nofork_redirect	srcs/module/interpreter/interpreter.c	/^static int		do_nofork_redirect(void *context, void *data)$/;"	f	file:
do_redirect	srcs/module/interpreter/core/redirects.c	/^void	do_redirect(void *data)$/;"	f
do_unary	srcs/module/expansion/arithmetic/math.c	/^void		do_unary(t_rpn_tk *number, t_rpn_tk *curr)$/;"	f
double_parameter	srcs/module/expansion/parameter/parameter_get.c	/^int		double_parameter(__unused t_list *intern,__unused t_parameter *parameter)$/;"	f
double_quote_routine	srcs/module/sle/prompt/prompt_subroutine.c	/^uint8_t			double_quote_routine(t_sle *sle, size_t *i)$/;"	f
doubles	libft/srcs/ft_printf/doubles.c	/^void				doubles(t_format *format)$/;"	f
doutput	libft/srcs/ft_printf/output.c	/^int				doutput(const char *fmt, t_list *node, int fd)$/;"	f
down	includes/struct.h	/^	char				*down;$/;"	m	struct:s_termcaps
dup_move_analyzer	srcs/module/analyzer/state/filename_analyzer.c	/^void	dup_move_analyzer(t_resolution *resolve)$/;"	f
dup_stderr	srcs/module/analyzer/state/redirect_analyzer.c	/^void	dup_stderr(t_resolution *resolve)$/;"	f
duplicate_fd	srcs/module/interpreter/core/io_redirect_functions.c	/^void		duplicate_fd(t_registry *shell, t_redirect *redirect$/;"	f
e_action_keys	includes/enum.h	/^enum	e_action_keys$/;"	g
e_actions	includes/enum.h	/^enum e_actions$/;"	g
e_analyzer_state	includes/enum.h	/^enum	e_analyzer_state$/;"	g
e_lexer_state	includes/enum.h	/^enum	e_lexer_state$/;"	g
e_mathstate	includes/expansion.h	/^enum						e_mathstate$/;"	g
e_mtype	includes/enum.h	/^typedef enum	e_mtype$/;"	g
e_paramexp	includes/expansion.h	/^enum						e_paramexp$/;"	g
e_quote	includes/enum.h	/^typedef enum	e_quote$/;"	g
e_result_type	includes/autocompletion.h	/^enum e_result_type$/;"	g
e_rpn	includes/expansion.h	/^enum						e_rpn$/;"	g
e_state_option	includes/enum.h	/^enum	e_state_option$/;"	g
e_type	includes/enum.h	/^typedef enum	e_type$/;"	g
echo_blt	srcs/module/builtin/echo/echo.c	/^uint8_t				echo_blt(t_registry *shell, char **av)$/;"	f
end	includes/expansion.h	/^	size_t					end;$/;"	m	struct:s_arithmetic
end_analyzer	srcs/module/analyzer/state/analyzer_interface.c	/^void	end_analyzer(t_resolution *resolve)$/;"	f
end_parameter	srcs/module/expansion/parameter/parameter_lexer.c	/^static int end_parameter(t_parameter *param)$/;"	f	file:
entry	includes/struct.h	/^	t_entry		*entry;$/;"	m	struct:s_history
entry_roll_back	srcs/module/history/history_tools.c	/^t_entry		*entry_roll_back(t_entry *entry)$/;"	f
env	includes/struct.h	/^	t_list				*env;$/;"	m	struct:s_process
eraser	libft/srcs/list/ft_lstdel.c	/^static t_list	*eraser(t_list *current, void (*del)(void *))$/;"	f	file:
ereaser	libft/srcs/list/ft_lstremove_if.c	/^t_list		*ereaser(t_list *current, void *data,  t_cmp cmp, t_del del)$/;"	f
error_analyzer	srcs/module/analyzer/state/analyzer_interface.c	/^void	error_analyzer(t_resolution *resolve)$/;"	f
error_exists	srcs/module/expansion/parameter/parameter_actions.c	/^static int	error_exists(char *parameter, char *message)$/;"	f	file:
error_parameter	srcs/module/expansion/parameter.c	/^int		error_parameter(char **dest, t_parameter *parameter)$/;"	f
exec_mode	includes/struct.h	/^	struct termios		*exec_mode;$/;"	m	struct:s_registry	typeref:struct:s_registry::termios
exec_new_pipeline	srcs/module/builtin/fc/fc_editor.c	/^static int8_t	exec_new_pipeline(t_registry *shell)$/;"	f	file:
execution_pipeline	srcs/core/routine/routine.c	/^int8_t				execution_pipeline(t_registry *shell, t_vector *input)$/;"	f
exists_expansion	srcs/module/expansion/parameter/parameter_actions.c	/^int			exists_expansion(t_list *intern, t_parameter *param)$/;"	f
exit_blt	srcs/module/builtin/exit/exit.c	/^uint8_t			exit_blt(t_registry *shell, char **av)$/;"	f
exit_cd	srcs/module/builtin/cd/cd_additions.c	/^uint8_t			exit_cd(t_registry *shell, char **old_pwd,$/;"	f
expand_process	srcs/module/interpreter/tools/process_tools.c	/^int		expand_process(t_list *intern, t_process *process)$/;"	f
expand_prompt	srcs/module/sle/prompt/prompt_tools.c	/^static void	expand_prompt(t_sle *sle, t_vector *text)$/;"	f	file:
expanded	includes/expansion.h	/^	char					*expanded;$/;"	m	struct:s_arithmetic
expanded	includes/expansion.h	/^	char					*expanded;$/;"	m	struct:s_math
expanded	includes/expansion.h	/^	char					*expanded;$/;"	m	struct:s_parameter
expansion_pipeline	srcs/module/expansion/expansion.c	/^char	*expansion_pipeline(t_list *intern_var, char *str)$/;"	f
export_blt	srcs/module/builtin/export/export.c	/^uint8_t				export_blt(t_registry *shell, char **av)$/;"	f
export_process	srcs/module/builtin/export/export.c	/^static uint8_t		export_process(t_registry *shell, char **av)$/;"	f	file:
export_var	srcs/module/builtin/export/export.c	/^static void			export_var(t_registry *shell, t_variable *variable)$/;"	f	file:
extract_flags	libft/srcs/ft_printf/extract.c	/^void		extract_flags(char **spec, t_format *format, va_list args)$/;"	f
extract_path	srcs/module/autocompletion/get_completion_file.c	/^static char		*extract_path(char *input)$/;"	f	file:
extract_precision	libft/srcs/ft_printf/extract.c	/^void		extract_precision(char **spec, t_format *format, va_list args)$/;"	f
extract_size	libft/srcs/ft_printf/extract.c	/^void		extract_size(char **spec, t_format *format)$/;"	f
extract_type	libft/srcs/ft_printf/extract.c	/^int			extract_type(char **spec, t_format *format, va_list args)$/;"	f
extract_width	libft/srcs/ft_printf/extract.c	/^void		extract_width(char **spec, t_format *format, va_list args)$/;"	f
failure	libft/includes/test.h	/^	int			failure;$/;"	m	struct:s_result
fc_blt	srcs/module/builtin/fc/fc.c	/^uint8_t			fc_blt(t_registry *shell, char **av)$/;"	f
fc_editor	srcs/module/builtin/fc/fc_editor.c	/^uint8_t			fc_editor(t_registry *shell, char **av, char *editor)$/;"	f
fc_list	srcs/module/builtin/fc/fc_list.c	/^uint8_t			fc_list(char **av, t_option option)$/;"	f
fc_redo	srcs/module/builtin/fc/fc_redo.c	/^uint8_t			fc_redo(t_registry *shell, char **av)$/;"	f
fd	includes/struct.h	/^	int		fd;$/;"	m	struct:s_param
fd	libft/includes/get_next_line.h	/^	int				fd;$/;"	m	struct:s_gnl_file
fd	libft/includes/str.h	/^	int				fd;$/;"	m	struct:s_file
fd_manager	libft/srcs/other/ft_getdelim.c	/^static t_file	*fd_manager(t_list **lst, const int fd, t_list *current)$/;"	f	file:
fd_reader	libft/srcs/other/ft_getdelim.c	/^static int		fd_reader(t_file *current, char *buffer, char *tmp, char delim)$/;"	f	file:
fg_blt	srcs/module/builtin/fg/fg.c	/^uint8_t	fg_blt(__unused t_registry *shell, char **av)$/;"	f
file	includes/struct.h	/^	char				*file;$/;"	m	struct:s_redirect
file	libft/includes/ft_malloc.h	/^	const char	*file;$/;"	m	struct:s_meminfo
filename_analyzer	srcs/module/analyzer/state/filename_analyzer.c	/^void	filename_analyzer(t_resolution *resolve)$/;"	f
fill_float	libft/srcs/ft_printf/doubles.c	/^static void			fill_float(t_format *format, char **tmp, long double value)$/;"	f	file:
find_bin	srcs/core/tools/path/search_path.c	/^static int8_t			find_bin(char *path, char *bin, char **buf)$/;"	f	file:
find_bin	srcs/module/autocompletion/get_completion_cmd.c	/^static void		find_bin(char *input, DIR *dir, t_autocomplete *result,$/;"	f	file:
find_builtin	srcs/module/autocompletion/get_completion_cmd.c	/^void			find_builtin(char * input, t_autocomplete *result)$/;"	f
find_expansion_end	srcs/module/expansion/arithmetic.c	/^static int8_t	find_expansion_end(t_arithmetic *arithmetic,  char *input, size_t start)$/;"	f	file:
find_in_path	srcs/core/tools/path/search_path.c	/^int8_t					find_in_path(t_registry *shell, char *bin, char **buf)$/;"	f
find_job	srcs/module/jobcontrol/utils.c	/^t_job	*find_job(pid_t pgid)$/;"	f
find_multiline_coord	srcs/module/sle/action_keys/movement/execute_arrow_ak.c	/^void				find_multiline_coord(t_sle *sle, int8_t offset)$/;"	f
find_var	srcs/core/tools/intern_var/intern_var_manager.c	/^int			find_var(void *data, void *to_find)$/;"	f
find_x2_coord	srcs/module/sle/action_keys/movement/execute_arrow_ak.c	/^static void				find_x2_coord(t_sle *sle, uint32_t prompt_len,$/;"	f	file:
find_x3_coord	srcs/module/sle/action_keys/movement/execute_arrow_ak.c	/^static void				find_x3_coord(t_sle *sle, uint32_t prompt_len)$/;"	f	file:
first	includes/struct.h	/^	int		first;$/;"	m	struct:s_param
first_search	includes/struct.h	/^	int			first_search;$/;"	m	struct:s_history
flag	includes/struct.h	/^	t_option			flag;$/;"	m	struct:s_variable
flag_color	libft/includes/ft_printf.h	/^	char				flag_color;$/;"	m	struct:s_format
flag_create	libft/srcs/ft_printf/digit.c	/^static long long	flag_create(t_format *format, char *flag)$/;"	f	file:
flag_create	libft/srcs/ft_printf/doubles.c	/^static long double	flag_create(t_format *format, char *flag)$/;"	f	file:
flag_hashtag	libft/includes/ft_printf.h	/^	char				flag_hashtag;$/;"	m	struct:s_format
flag_minus	libft/includes/ft_printf.h	/^	char				flag_minus;$/;"	m	struct:s_format
flag_plus	libft/includes/ft_printf.h	/^	char				flag_plus;$/;"	m	struct:s_format
flag_space	libft/includes/ft_printf.h	/^	char				flag_space;$/;"	m	struct:s_format
flag_zero	libft/includes/ft_printf.h	/^	char				flag_zero;$/;"	m	struct:s_format
flush_redirect	srcs/module/analyzer/state/redirect_analyzer.c	/^void			flush_redirect(t_resolution *resolve)$/;"	f
flush_string	srcs/module/analyzer/state/string_analyzer.c	/^void	flush_string(t_resolution *resolve)$/;"	f
fork_process	srcs/module/interpreter/core/fork_process.c	/^void		fork_process(t_registry *shell, t_process *process)$/;"	f
format_delete	libft/srcs/ft_printf/format.c	/^void			format_delete(void *data)$/;"	f
format_init	libft/srcs/ft_printf/format.c	/^static void		format_init(t_format *format)$/;"	f	file:
format_list	libft/srcs/ft_printf/format.c	/^t_list			*format_list(const char *format, va_list args)$/;"	f
format_to_fd	libft/srcs/ft_printf/output.c	/^static int		format_to_fd(const char **format, int fd)$/;"	f	file:
format_to_str	libft/srcs/ft_printf/output.c	/^static int		format_to_str(const char **format, char **dst)$/;"	f	file:
free_hash	srcs/core/routine/exit_routine.c	/^static void		free_hash(t_hash hashmap, void (*del)(void *))$/;"	f	file:
free_history	srcs/module/history/entry_manager.c	/^void	free_history(t_entry *entry)$/;"	f
free_hnode_lst	libft/srcs/hashmap/ft_hmap_free_content.c	/^static void		free_hnode_lst(t_list **ptr, void (*del)(void *))$/;"	f	file:
free_node	srcs/core/tools/intern_var/intern_var_free.c	/^void			free_node(void *node)$/;"	f
free_one_node_token	srcs/module/parser/parser_subprompt.c	/^static void			free_one_node_token(t_list **token_lst)$/;"	f	file:
free_opt	srcs/core/routine/exit_routine.c	/^static void		free_opt(t_opt option)$/;"	f	file:
free_registry	srcs/core/routine/exit_routine.c	/^static void		free_registry(t_registry *shell)$/;"	f	file:
free_tools	srcs/module/builtin/fc/fc_redo.c	/^static void				free_tools(char **target, char **result, char **param)$/;"	f	file:
free_var	srcs/core/tools/intern_var/intern_var_free.c	/^int8_t			free_var(t_list **alst, char *name)$/;"	f
from	includes/struct.h	/^	int32_t				from;$/;"	m	struct:s_redirect
ft_abs	libft/srcs/conversion/ft_abs.c	/^int	ft_abs(int c)$/;"	f
ft_asprintf	libft/srcs/ft_printf/ft_printf.c	/^int		ft_asprintf(char **dst, const char *format, ...)$/;"	f
ft_atoi	libft/srcs/conversion/ft_atoi.c	/^int			ft_atoi(const char *str)$/;"	f
ft_atoll_base	libft/srcs/conversion/ft_atoll_base.c	/^long long	ft_atoll_base(char *str, char *base)$/;"	f
ft_atoull_base	libft/srcs/conversion/ft_atoull_base.c	/^unsigned long long	ft_atoull_base(char *str, char *base)$/;"	f
ft_bzero	libft/srcs/memory/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_checkstat	libft/srcs/directory/ft_checkstat.c	/^int			ft_checkstat(char *file, mode_t st_mode)$/;"	f
ft_chr	libft/srcs/string/ft_strtrim.c	/^static char			*ft_chr(const char *s, int c)$/;"	f	file:
ft_convert_base	libft/srcs/conversion/ft_convert_base.c	/^char				*ft_convert_base(char *nbr, char *base_from, char *base_to)$/;"	f
ft_create_hnode	libft/srcs/hashmap/ft_hmap_insert.c	/^static int		ft_create_hnode(t_list **alst, char *key, void *data)$/;"	f	file:
ft_del_hnode	libft/srcs/hashmap/ft_hmap_remove.c	/^void			ft_del_hnode(void *node, void (*del)(void *))$/;"	f
ft_dirdel	libft/srcs/directory/ft_dirdel.c	/^void		ft_dirdel(t_list **dirlist)$/;"	f
ft_dirlist	libft/srcs/directory/ft_dirlist.c	/^int				ft_dirlist(t_list **dirlist, char *path)$/;"	f
ft_dprintf	libft/srcs/ft_printf/ft_printf.c	/^int		ft_dprintf(int fd, const char *format, ...)$/;"	f
ft_exists_and_is_exec	srcs/core/tools/path/search_path.c	/^static uint8_t			ft_exists_and_is_exec(char *path)$/;"	f	file:
ft_fill_line_with_rest	libft/srcs/get_next_line/get_next_line.c	/^static void		ft_fill_line_with_rest(t_gnl_file *file)$/;"	f	file:
ft_flush_memory	libft/srcs/garbage_collector/ft_flush_memory.c	/^void		ft_flush_memory(uint8_t opt)$/;"	f
ft_free	libft/includes/ft_malloc.h	/^#  define ft_free /;"	d
ft_free	libft/srcs/garbage_collector/ft_free.c	/^void		ft_free(void *ptr)$/;"	f
ft_freetab	libft/srcs/tab/ft_freetab.c	/^void		ft_freetab(char ***tab)$/;"	f
ft_get_curpath	srcs/module/builtin/cd/cd.c	/^static char			*ft_get_curpath(t_registry *shell,$/;"	f	file:
ft_get_head_list_allocation	libft/srcs/garbage_collector/ft_head_memory.c	/^void		*ft_get_head_list_allocation(uint8_t opt)$/;"	f
ft_get_two_pw	libft/srcs/hashmap/ft_hmap_resize.c	/^size_t		ft_get_two_pw(size_t nb)$/;"	f
ft_getargslst	libft/srcs/list/ft_getargslst.c	/^t_list		*ft_getargslst(int ac, char **av)$/;"	f
ft_getargstab	libft/srcs/tab/ft_getargstab.c	/^char	**ft_getargstab(int ac, char **av)$/;"	f
ft_getdelim	libft/srcs/other/ft_getdelim.c	/^int				ft_getdelim(const int fd, char **line, char delim)$/;"	f
ft_getopt	libft/srcs/other/ft_getopt.c	/^int				ft_getopt(int ac, char **av, const char *optstr)$/;"	f
ft_hash_str	libft/srcs/hashmap/ft_hash_str.c	/^uint32_t		ft_hash_str(char *key, size_t tab_size)$/;"	f
ft_hmap_collision	libft/srcs/hashmap/ft_hmap_collision.c	/^size_t		ft_hmap_collision(t_hash *hashmap)$/;"	f
ft_hmap_collision_rate	libft/srcs/hashmap/ft_hmap_collision.c	/^size_t		ft_hmap_collision_rate(t_hash *hashmap)$/;"	f
ft_hmap_filled	libft/srcs/hashmap/ft_hmap_resize.c	/^size_t		ft_hmap_filled(t_hash *hashmap)$/;"	f
ft_hmap_filled_norm	libft/srcs/hashmap/ft_hmap_resize.c	/^size_t		ft_hmap_filled_norm(t_hash *hashmap)$/;"	f
ft_hmap_free_content	libft/srcs/hashmap/ft_hmap_free_content.c	/^void			ft_hmap_free_content(t_hash *hashmap, void (*del)(void *))$/;"	f
ft_hmap_getdata	libft/srcs/hashmap/ft_hmap_getdata.c	/^void	*ft_hmap_getdata(t_hash *hashmap, char *key)$/;"	f
ft_hmap_hits	libft/srcs/hashmap/ft_hmap_hits.c	/^int8_t		ft_hmap_hits(t_hash *hashmap, char *key)$/;"	f
ft_hmap_init	libft/srcs/hashmap/ft_hmap_init.c	/^t_hash	ft_hmap_init(size_t size)$/;"	f
ft_hmap_insert	libft/srcs/hashmap/ft_hmap_insert.c	/^int				ft_hmap_insert(t_hash *hashmap, char *key, void *data)$/;"	f
ft_hmap_remove	libft/srcs/hashmap/ft_hmap_remove.c	/^int				ft_hmap_remove(t_hash *hashmap, char *key, void (*del)(void *))$/;"	f
ft_hmap_resize	libft/srcs/hashmap/ft_hmap_resize.c	/^int			ft_hmap_resize(t_hash *hashmap, size_t nw_size)$/;"	f
ft_init	libft/srcs/memory/ft_memalloc.c	/^static void	ft_init(void *s, size_t n)$/;"	f	file:
ft_init	libft/srcs/string/ft_strclr.c	/^static void		ft_init(void *s, size_t n)$/;"	f	file:
ft_init	libft/srcs/string/ft_strnew.c	/^static void	ft_init(void *s, size_t n)$/;"	f	file:
ft_isalnum	libft/srcs/other/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/srcs/other/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/srcs/other/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft/srcs/other/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isnumeric	libft/srcs/string/ft_isnumeric.c	/^uint8_t			ft_isnumeric(char *str)$/;"	f
ft_isprint	libft/srcs/other/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_itoa	libft/srcs/conversion/ft_itoa.c	/^char			*ft_itoa(int n)$/;"	f
ft_len	libft/srcs/string/ft_strclr.c	/^static size_t	ft_len(const char *s)$/;"	f	file:
ft_llitoa	libft/srcs/conversion/ft_llitoa.c	/^char			*ft_llitoa(long long n)$/;"	f
ft_lstadd	libft/srcs/list/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstaddback	libft/srcs/list/ft_lstaddback.c	/^int		ft_lstaddback(t_list **alst, t_list *new)$/;"	f
ft_lstcmp	libft/srcs/list/ft_lstcmp.c	/^int		ft_lstcmp(t_list *lst1, t_list *lst2, int (*f)(void *, void *))$/;"	f
ft_lstdel	libft/srcs/list/ft_lstdel.c	/^void			*ft_lstdel(t_list **alst, void (*del)(void *))$/;"	f
ft_lstdelfirst	libft/srcs/list/ft_lstdelfirst.c	/^int		ft_lstdelfirst(t_list **alst, void (*del)(void *))$/;"	f
ft_lstdelnext	libft/srcs/list/ft_lstdelnext.c	/^void	ft_lstdelnext(t_list *current, void f(void *))$/;"	f
ft_lstdelone	libft/srcs/list/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void *))$/;"	f
ft_lstfilter	libft/ft_lstfilter.c	/^t_list		*ft_lstfilter(t_list *lst, void *to_find, t_cmp filter, t_cmp cpy)$/;"	f
ft_lstfilter	libft/srcs/list/ft_lstfilter.c	/^t_list		*ft_lstfilter(t_list *lst, void *to_find, t_cmp filter, t_cmp cpy)$/;"	f
ft_lstfind	libft/srcs/list/ft_lstfind.c	/^t_list	*ft_lstfind(t_list *lst, void *to_find, int (*f)(void *, void *))$/;"	f
ft_lstiter	libft/srcs/list/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *data))$/;"	f
ft_lstiter_ctx	libft/srcs/list/ft_lstiter_ctx.c	/^int		ft_lstiter_ctx(t_list *lst, void *context$/;"	f
ft_lstlen	libft/srcs/list/ft_lstlen.c	/^size_t		ft_lstlen(t_list *lst)$/;"	f
ft_lstmap	libft/srcs/list/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *context, t_lstmap func, t_del del)$/;"	f
ft_lstmerge	libft/srcs/list/ft_lstmerge.c	/^t_list	*ft_lstmerge(t_list **alst, t_list *blst)$/;"	f
ft_lstnew	libft/srcs/list/ft_lstnew.c	/^t_list		*ft_lstnew(void const *data, size_t data_size)$/;"	f
ft_lstnew_malloc	libft/srcs/garbage_collector/ft_malloc.c	/^static t_list	*ft_lstnew_malloc(void const *data, size_t data_size)$/;"	f	file:
ft_lstremove_if	libft/srcs/list/ft_lstremove_if.c	/^int			ft_lstremove_if(t_list **lst, void *data, t_cmp cmp, t_del del)$/;"	f
ft_lstrev	libft/srcs/list/ft_lstrev.c	/^void			ft_lstrev(t_list **alst)$/;"	f
ft_lstsplit_if	libft/srcs/list/ft_lstsplit_if.c	/^t_list			*ft_lstsplit_if(t_list **lst, void *context, t_cmp cmp)$/;"	f
ft_lsttotab	libft/srcs/list/ft_lsttotab.c	/^char	**ft_lsttotab(t_list *lst, char *(*f)(void *))$/;"	f
ft_malloc	libft/includes/ft_malloc.h	/^#   define ft_malloc(/;"	d
ft_malloc	libft/includes/ft_malloc.h	/^#  define ft_malloc /;"	d
ft_malloc_up	libft/srcs/garbage_collector/ft_malloc.c	/^void				*ft_malloc_up(size_t size, const char *function,$/;"	f
ft_memalloc	libft/srcs/memory/ft_memalloc.c	/^void		*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft/srcs/memory/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/srcs/memory/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/srcs/memory/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/srcs/memory/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memdel	libft/srcs/memory/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memmove	libft/srcs/memory/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t n)$/;"	f
ft_memset	libft/srcs/memory/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_mergesort	libft/srcs/list/ft_mergesort.c	/^void			ft_mergesort(t_list **lst, int (*cmp)(void *, void *))$/;"	f
ft_ncpy	libft/srcs/string/ft_strsub.c	/^static char	*ft_ncpy(char *dst, const char *src, size_t len)$/;"	f	file:
ft_ncpy	libft/srcs/string/ft_strtrim.c	/^static char			*ft_ncpy(char *dst, const char *src, size_t len)$/;"	f	file:
ft_norm_hash	libft/srcs/hashmap/ft_hash_str.c	/^static uint32_t	ft_norm_hash(uint32_t hash, size_t tab_size)$/;"	f	file:
ft_print_hashmap	libft/srcs/hashmap/ft_hmap_print.c	/^void			ft_print_hashmap(t_hash *hashmap)$/;"	f
ft_print_hashmap_p	libft/srcs/hashmap/ft_hmap_print.c	/^void			ft_print_hashmap_p(t_hash *hashmap)$/;"	f
ft_print_memory_debug	libft/srcs/garbage_collector/ft_head_memory.c	/^void		ft_print_memory_debug(t_meminfo *meminfo)$/;"	f
ft_print_stack_functions	libft/srcs/garbage_collector/ft_head_memory.c	/^void		ft_print_stack_functions(char **stack, size_t size)$/;"	f
ft_printf	libft/srcs/ft_printf/ft_printf.c	/^int		ft_printf(const char *format, ...)$/;"	f
ft_process_flush	libft/srcs/garbage_collector/ft_head_memory.c	/^void		ft_process_flush(t_list *lst, uint8_t opt, int *leaks)$/;"	f
ft_process_free	libft/srcs/garbage_collector/ft_free.c	/^static void	ft_process_free(t_list **lst, void *ptr)$/;"	f	file:
ft_process_transform	srcs/module/builtin/cd/cd_simple.c	/^static void		ft_process_transform(const char *path, char **new_path)$/;"	f	file:
ft_ptr_ascii	libft/srcs/garbage_collector/ft_head_memory.c	/^uint8_t		ft_ptr_ascii(unsigned char *s, size_t size)$/;"	f
ft_putc	srcs/module/sle/utils/input_tools.c	/^int	ft_putc(const int c)$/;"	f
ft_putchar	libft/srcs/output/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libft/srcs/output/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/srcs/output/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	libft/srcs/output/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft/srcs/output/ft_putnbr.c	/^void			ft_putnbr(int n)$/;"	f
ft_putnbr_fd	libft/srcs/output/ft_putnbr_fd.c	/^void			ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnstr	libft/srcs/output/ft_putnstr.c	/^void	ft_putnstr(char *str, size_t n)$/;"	f
ft_putstr	libft/srcs/output/ft_putstr.c	/^int		ft_putstr(char const *str)$/;"	f
ft_putstr_fd	libft/srcs/output/ft_putstr_fd.c	/^int		ft_putstr_fd(char const *str, int fd)$/;"	f
ft_read	libft/srcs/get_next_line/get_next_line.c	/^static int		ft_read(t_gnl_file *file)$/;"	f	file:
ft_ringbuffer	libft/srcs/output/ft_ringbuffer.c	/^int				ft_ringbuffer(char *str, int fd)$/;"	f
ft_ringflush	libft/srcs/output/ft_ringbuffer.c	/^static int		ft_ringflush(t_buffer *ring, int fd)$/;"	f	file:
ft_showtab	libft/srcs/tab/ft_showtab.c	/^void	ft_showtab(char **t)$/;"	f
ft_shunting_yds	srcs/module/expansion/arithmetic/shunting_yard.c	/^int8_t			ft_shunting_yds(t_stack *infix, t_stack *rpn)$/;"	f
ft_simplified_hash_print	libft/srcs/hashmap/ft_hmap_print.c	/^void			ft_simplified_hash_print(t_hash *hashmap)$/;"	f
ft_stckdestroy	libft/srcs/list/ft_stckdestroy.c	/^void	ft_stckdestroy(t_stack *stack, void (*f)(void *))$/;"	f
ft_stckinit	libft/srcs/list/ft_stckinit.c	/^void	ft_stckinit(t_stack *stack)$/;"	f
ft_stckpop	libft/srcs/list/ft_stckpop.c	/^void	*ft_stckpop(t_stack *stack)$/;"	f
ft_stckpopnode	libft/srcs/list/ft_stckpopnode.c	/^t_list	*ft_stckpopnode(t_stack *stack)$/;"	f
ft_stckpush	libft/srcs/list/ft_stckpush.c	/^int		ft_stckpush(t_stack *stack, void *data, size_t size)$/;"	f
ft_stckpushnode	libft/srcs/list/ft_stckpushnode.c	/^int		ft_stckpushnode(t_stack *stack, t_list *node)$/;"	f
ft_stcksize	libft/srcs/list/ft_stcksize.c	/^size_t	ft_stcksize(t_stack *stack)$/;"	f
ft_stcktop	libft/srcs/list/ft_stcktop.c	/^void	*ft_stcktop(t_stack *stack)$/;"	f
ft_strbeginswith	libft/srcs/string/ft_strbeginswith.c	/^int	ft_strbeginswith(const char *string, char *prefix)$/;"	f
ft_strcat	libft/srcs/string/ft_strcat.c	/^char	*ft_strcat(char *s1, const char *s2)$/;"	f
ft_strcheck	libft/srcs/string/ft_strcheck.c	/^int		ft_strcheck(char *str, int (*f)(int))$/;"	f
ft_strchr	libft/srcs/string/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	libft/srcs/string/ft_strclr.c	/^void			ft_strclr(char *c)$/;"	f
ft_strcmp	libft/srcs/string/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft/srcs/string/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strcspn	libft/srcs/string/ft_strcspn.c	/^size_t		ft_strcspn(const char *s, const char *charset)$/;"	f
ft_strdel	libft/srcs/string/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	libft/srcs/string/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strendswith	libft/srcs/string/ft_strendswith.c	/^int	ft_strendswith(char *string, char *suffix)$/;"	f
ft_strequ	libft/srcs/string/ft_strequ.c	/^int		ft_strequ(char const *s1, char const *s2)$/;"	f
ft_strinsert	libft/srcs/string/ft_strinsert.c	/^char		*ft_strinsert(char **str, char c, size_t index)$/;"	f
ft_striter	libft/srcs/string/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/;"	f
ft_striteri	libft/srcs/string/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	libft/srcs/string/ft_strjoin.c	/^char		*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_protected	libft/srcs/get_next_line/get_next_line.c	/^static char	*ft_strjoin_protected(char const *s1, char const *s2)$/;"	f	file:
ft_strlcat	libft/srcs/string/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t size)$/;"	f
ft_strlen	libft/srcs/string/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strlower	libft/srcs/string/ft_strlower.c	/^void	ft_strlower(char *str)$/;"	f
ft_strmap	libft/srcs/string/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft/srcs/string/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	libft/srcs/string/ft_strncat.c	/^char	*ft_strncat(char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	libft/srcs/string/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/srcs/string/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strnequ	libft/srcs/string/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft/srcs/string/ft_strnew.c	/^char		*ft_strnew(size_t size)$/;"	f
ft_strnstr	libft/srcs/string/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/srcs/string/ft_strrchr.c	/^char			*ft_strrchr(const char *s, int c)$/;"	f
ft_strrev	libft/srcs/string/ft_strrev.c	/^char	*ft_strrev(char *str)$/;"	f
ft_strsplit	libft/srcs/string/ft_strsplit.c	/^char		**ft_strsplit(char const *s, char *c)$/;"	f
ft_strspn	libft/srcs/string/ft_strspn.c	/^size_t		ft_strspn(const char *s, const char *charset)$/;"	f
ft_strstr	libft/srcs/string/ft_strstr.c	/^char	*ft_strstr(const char *haystack, const char *needle)$/;"	f
ft_strsub	libft/srcs/string/ft_strsub.c	/^char		*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft/srcs/string/ft_strtrim.c	/^char				*ft_strtrim(char const *s)$/;"	f
ft_strupper	libft/srcs/string/ft_strupper.c	/^void	ft_strupper(char *str)$/;"	f
ft_sub	libft/srcs/string/ft_strtrim.c	/^static char			*ft_sub(char const *s, unsigned int start, size_t len)$/;"	f	file:
ft_taboneach	libft/srcs/tab/ft_taboneach.c	/^int			ft_taboneach(char **current, void *context$/;"	f
ft_tabtolst	libft/srcs/other/ft_tabtolst.c	/^t_list	*ft_tabtolst(char **tab)$/;"	f
ft_tolower	libft/srcs/other/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft/srcs/other/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
ft_ullitoa	libft/srcs/conversion/ft_ullitoa.c	/^char			*ft_ullitoa(unsigned long long int n)$/;"	f
ft_vasprintf	libft/srcs/ft_printf/ft_printf.c	/^int		ft_vasprintf(char **dst, const char *format, va_list args)$/;"	f
ft_vctlen	libft/srcs/string/ft_vctlen.c	/^size_t	ft_vctlen(t_vector *vct)$/;"	f
ft_vctnew	libft/srcs/string/ft_vctnew.c	/^t_vector	*ft_vctnew(size_t optional_size)$/;"	f
ft_vctrescale	libft/srcs/string/ft_vctrescale.c	/^int		ft_vctrescale(t_vector *vector)$/;"	f
ft_vctreset	libft/srcs/string/ft_vctreset.c	/^int		ft_vctreset(t_vector *vct)$/;"	f
ft_vdprintf	libft/srcs/ft_printf/ft_printf.c	/^int		ft_vdprintf(const char *format, va_list args, int fd)$/;"	f
function	libft/includes/ft_malloc.h	/^	const char	*function;$/;"	m	struct:s_meminfo
g_shell	srcs/core/startup/main.c	/^t_registry	*g_shell;$/;"	v
g_test_results	libft/includes/test.h	/^t_result		g_test_results;$/;"	v
generate_cmd_group	srcs/module/analyzer/analyzer.c	/^static int8_t	generate_cmd_group(t_list **cmd_group, t_stack *tree_node)$/;"	f	file:
generate_cmd_list	srcs/module/analyzer/analyzer.c	/^static t_list	*generate_cmd_list(t_stack *tree_node)$/;"	f	file:
generate_env	srcs/module/interpreter/tools/generate_env.c	/^char	**generate_env(t_registry *shell, t_list *local_env)$/;"	f
generate_grammar	srcs/core/startup/init/grammar.c	/^void		generate_grammar(void)$/;"	f
generate_maths_grammar	srcs/core/startup/init/grammar.c	/^static void	generate_maths_grammar(void)$/;"	f	file:
generate_pex_token	srcs/module/expansion/parameter/parameter_lexer.c	/^void	generate_pex_token(t_parameter *param)$/;"	f
generate_shell_grammar	srcs/core/startup/init/grammar.c	/^static void	generate_shell_grammar(void)$/;"	f	file:
generate_summary	libft/srcs/test/setup_test.c	/^void	generate_summary(t_list **summary, t_result result)$/;"	f
generate_token	srcs/module/lexer/process/lexer_interface.c	/^static t_token	generate_token(t_lexer *lexer)$/;"	f	file:
generate_token_m	srcs/module/lexer/process/lexer_maths_interface.c	/^static t_token	generate_token_m(t_lexer *lexer)$/;"	f	file:
get_cmd	srcs/module/builtin/fc/fc_redo.c	/^static int8_t			get_cmd(t_registry *shell, char **av, char **cmd)$/;"	f	file:
get_completion	srcs/module/autocompletion/autocompletion.c	/^static char		*get_completion(char **input, t_registry *shell,$/;"	f	file:
get_completion_cmd	srcs/module/autocompletion/get_completion_cmd.c	/^void			get_completion_cmd(char *input, t_autocomplete *result,$/;"	f
get_completion_file	srcs/module/autocompletion/get_completion_file.c	/^void			get_completion_file(char *input, t_autocomplete *result,$/;"	f
get_completion_var	srcs/module/autocompletion/get_completion_var.c	/^void	get_completion_var(char *input,$/;"	f
get_current_job	srcs/module/builtin/jobs/utils.c	/^int8_t			get_current_job(t_job **job, char c)$/;"	f
get_custom_fd	srcs/module/interpreter/tools/redirect_tools.c	/^int		get_custom_fd(char **str, t_list *node)$/;"	f
get_default_editor	srcs/module/builtin/fc/fc.c	/^static char		*get_default_editor(t_registry *shell)$/;"	f	file:
get_delimiter	srcs/module/expansion/parameter/parameter_parser.c	/^int			get_delimiter(t_parameter *param, t_pex_token *token)$/;"	f
get_elem	srcs/module/history/print_history.c	/^static void	get_elem(t_history *history, const char *elem, t_param *param)$/;"	f	file:
get_elem_by_col	srcs/module/autocompletion/print_result.c	/^static size_t		get_elem_by_col(t_autocomplete *result)$/;"	f	file:
get_elem_by_line	srcs/module/autocompletion/print_result.c	/^static size_t		get_elem_by_line(t_autocomplete *result, int col)$/;"	f	file:
get_entry	srcs/module/history/get_entry.c	/^char		*get_entry(t_history *history, const char *search,$/;"	f
get_entry_by_id	srcs/module/history/get_entry.c	/^static char	*get_entry_by_id(t_history *history, int id, const uint64_t option)$/;"	f	file:
get_entry_by_name_next	srcs/module/history/get_entry.c	/^static char	*get_entry_by_name_next(t_history *history, const char *name)$/;"	f	file:
get_entry_by_name_prev	srcs/module/history/get_entry.c	/^static char	*get_entry_by_name_prev(t_history *history, const char *name)$/;"	f	file:
get_env	srcs/core/startup/init/setup.c	/^static int8_t	get_env(t_list **alst, char **env)$/;"	f	file:
get_expansion_input	srcs/module/expansion/arithmetic.c	/^static int8_t	get_expansion_input(t_arithmetic *arithmetic,  char *input, size_t start)$/;"	f	file:
get_failed_process	srcs/module/interpreter/tools/interpreter_tools.c	/^int			get_failed_process(void *data, void *context)$/;"	f
get_fc_options	srcs/module/builtin/fc/fc.c	/^static char		*get_fc_options(char ***av, t_option *option)$/;"	f	file:
get_file_list	srcs/module/autocompletion/get_completion_file.c	/^static void		get_file_list(char *dirname, char *input,$/;"	f	file:
get_filename	srcs/module/interpreter/tools/redirect_tools.c	/^char			*get_filename(t_list *node)$/;"	f
get_filename_special	srcs/module/interpreter/core/redirect_functions.c	/^int		get_filename_special(t_list *node, char **file)$/;"	f
get_first_last	srcs/module/builtin/fc/fc_list.c	/^int8_t			get_first_last(char **av, char **param)$/;"	f
get_histfile	srcs/module/history/histfile.c	/^static char		*get_histfile(t_registry *shell)$/;"	f	file:
get_history_return	srcs/module/history/history_expansion.c	/^static char		*get_history_return(t_vector *to_replace, const uint64_t option)$/;"	f	file:
get_histsize	srcs/module/history/histfile.c	/^static int		get_histsize(t_registry *shell)$/;"	f	file:
get_home_input	srcs/module/autocompletion/autocompletion_tools2.c	/^char			*get_home_input(char *input, t_registry *shell)$/;"	f
get_home_path	srcs/module/builtin/cd/cd_additions.c	/^char			*get_home_path(void)$/;"	f
get_input	srcs/module/lexer/process/lexer_tools.c	/^char	get_input(t_lexer *lexer, uint8_t pos)$/;"	f
get_input_cmd	srcs/core/launch/batch_mode.c	/^static inline t_vector	*get_input_cmd(t_registry *shell)$/;"	f	file:
get_io	srcs/module/interpreter/tools/redirect_tools.c	/^int				get_io(t_list *node)$/;"	f
get_job_av	srcs/module/builtin/jobs/get_avs.c	/^void		get_job_av(t_job *job, char **str)$/;"	f
get_maxlen	srcs/module/autocompletion/autocompletion_tools.c	/^size_t	get_maxlen(size_t ref, size_t len)$/;"	f
get_name_and_data	srcs/module/builtin/export/export.c	/^static void			get_name_and_data(t_variable *variable, char *arg)$/;"	f	file:
get_next_char	srcs/module/sle/utils/move_tools.c	/^uint32_t		get_next_char(const char *str, uint32_t index,$/;"	f
get_next_line	libft/srcs/get_next_line/get_next_line.c	/^int				get_next_line(const int fd, char **line)$/;"	f
get_next_or_prev_entry	srcs/module/history/get_entry.c	/^static char	*get_next_or_prev_entry(t_history *history, const uint64_t option)$/;"	f	file:
get_option_cd	srcs/module/builtin/cd/cd_additions.c	/^t_option		get_option_cd(char *s, t_option option)$/;"	f
get_option_export	srcs/module/builtin/export/export.c	/^t_option			get_option_export(char *s, t_option option)$/;"	f
get_option_fc	srcs/module/builtin/fc/fc.c	/^t_option		get_option_fc(char *s, t_option option)$/;"	f
get_option_jobs	srcs/module/builtin/jobs/jobs.c	/^t_option		get_option_jobs(char *s, t_option option)$/;"	f
get_option_pwd	srcs/module/builtin/pwd/pwd.c	/^t_option		get_option_pwd(char *s, t_option option)$/;"	f
get_process_av	srcs/module/builtin/jobs/get_avs.c	/^void		get_process_av(t_process *process, char **str)$/;"	f
get_process_type	srcs/module/interpreter/tools/process_tools.c	/^int8_t	get_process_type(t_registry *shell, t_process *process)$/;"	f
get_prompt_length	srcs/module/sle/prompt/get_prompt_length.c	/^uint64_t	get_prompt_length(t_prompt *prompt)$/;"	f
get_pwd	srcs/module/builtin/pwd/pwd.c	/^char			*get_pwd(t_registry *shell, const t_option option)$/;"	f
get_relative_path	srcs/module/builtin/cd/cd_additions.c	/^char			*get_relative_path(char **curpath)$/;"	f
get_result_type	srcs/module/autocompletion/get_type.c	/^enum e_result_type	get_result_type(char *input)$/;"	f
get_start_input	srcs/module/autocompletion/get_start_input.c	/^char		*get_start_input(char *input, enum e_result_type type)$/;"	f
get_start_input_cmd	srcs/module/autocompletion/get_start_input.c	/^static char	*get_start_input_cmd(char *input, size_t len)$/;"	f	file:
get_start_input_file	srcs/module/autocompletion/get_start_input.c	/^static char	*get_start_input_file(char *input, size_t len)$/;"	f	file:
get_start_input_variable	srcs/module/autocompletion/get_start_input.c	/^static char	*get_start_input_variable(char *input, size_t len, char c)$/;"	f	file:
get_target_and_result	srcs/module/builtin/fc/fc_redo.c	/^static void			get_target_and_result(char ***av, char **target,$/;"	f	file:
get_terminal_info	srcs/module/sle/init/init_sle.c	/^uint64_t    get_terminal_info(t_registry *shell)$/;"	f
get_token	srcs/module/analyzer/tools/token_tools.c	/^void	get_token(t_resolution *resolve)$/;"	f
get_var	srcs/core/tools/intern_var/intern_var_manager.c	/^char		*get_var(t_list *intern, char *name)$/;"	f
get_var_status	srcs/core/tools/intern_var/intern_var_manager.c	/^int			get_var_status(t_list *intern, char *name)$/;"	f
good_type	includes/struct.h	/^	enum e_type			*good_type;$/;"	m	struct:s_graph	typeref:enum:s_graph::e_type
grammar	includes/struct.h	/^	const char			**grammar;$/;"	m	struct:s_registry
grammar_m	includes/struct.h	/^	const char			**grammar_m;$/;"	m	struct:s_registry
group_to_job	srcs/module/interpreter/maping/map.c	/^void		*group_to_job(void *context, void *data)$/;"	f
handle_actionkey	srcs/module/sle/handle_input_keys.c	/^static void		handle_actionkey(t_registry *shell, t_sle *sle, char c[READ_SIZE])$/;"	f	file:
handle_bracket	srcs/module/expansion/arithmetic/shunting_yard.c	/^static int8_t	handle_bracket(t_rpn_tk *curr, t_stack *operator, t_stack *rpn)$/;"	f	file:
handle_cc	srcs/module/sle/launch_sle.c	/^void		handle_cc(t_registry *shell, t_sle *sl, uint32_t flag)$/;"	f
handle_infix_token	srcs/module/expansion/arithmetic/shunting_yard.c	/^static int8_t	handle_infix_token(t_rpn_tk *curr$/;"	f	file:
handle_input_key	srcs/module/sle/handle_input_keys.c	/^void			handle_input_key(t_registry *shell, t_sle *sle, char c[READ_SIZE])$/;"	f
handle_operator	srcs/module/expansion/arithmetic/calculate_rpn.c	/^static int8_t	handle_operator(t_rpn_tk *curr, t_stack *solve)$/;"	f	file:
handle_operator	srcs/module/expansion/arithmetic/shunting_yard.c	/^static int8_t	handle_operator(t_rpn_tk *curr, t_stack *operator, t_stack *rpn)$/;"	f	file:
handle_printable_char	srcs/module/sle/handle_input_keys.c	/^static void		handle_printable_char(t_sle *sle, const char c)$/;"	f	file:
hash	includes/struct.h	/^	t_hashmap			hash;$/;"	m	struct:s_registry
hash_all_path	srcs/module/builtin/hash/h_opt.c	/^int8_t		hash_all_path(t_registry *shell)$/;"	f
hash_args	srcs/module/builtin/hash/h_utils.c	/^int8_t			hash_args(t_registry *shell, char *key)$/;"	f
hash_blt	srcs/module/builtin/hash/hash.c	/^uint8_t			hash_blt(t_registry *shell, char **av)$/;"	f
hash_builtin	srcs/module/builtin/hash/hash.c	/^void			hash_builtin(t_registry *shell)$/;"	f
hash_dir	srcs/module/builtin/hash/h_opt.c	/^static void		hash_dir(t_registry *shell, const char *dir)$/;"	f	file:
hash_get_opt	srcs/module/builtin/hash/h_opt.c	/^int			hash_get_opt(int i, char **av, t_option *opt)$/;"	f
hash_handle_opt	srcs/module/builtin/hash/hash.c	/^static int16_t	hash_handle_opt(t_registry *shell, t_option opt)$/;"	f	file:
hash_one	srcs/module/builtin/hash/h_utils.c	/^int8_t			hash_one(t_registry *shell, char *key, char *path)$/;"	f
hash_print_help	srcs/module/builtin/hash/h_utils.c	/^void			hash_print_help(void)$/;"	f
head	libft/includes/list.h	/^	t_list			*head;$/;"	m	struct:s_stack
head_ptr	includes/struct.h	/^	t_entry		*head_ptr;$/;"	m	struct:s_history
heredoc	srcs/module/interpreter/core/heredoc_interpreter.c	/^void	heredoc(t_registry *shell, t_redirect *redirect, t_action *action)$/;"	f
heredoc_analyzer	srcs/module/analyzer/state/heredoc_analyzer.c	/^void		heredoc_analyzer(t_resolution *resolve)$/;"	f
heredoc_delimiter	srcs/module/analyzer/state/heredoc_analyzer.c	/^void		heredoc_delimiter(t_resolution *resolve)$/;"	f
heredoc_trim	srcs/module/interpreter/core/heredoc_interpreter.c	/^void	heredoc_trim(t_registry *shell, t_redirect *redirect, t_action *action)$/;"	f
hexadecimal	libft/srcs/ft_printf/unsigned.c	/^void	hexadecimal(t_format *format)$/;"	f
hi	libft/includes/str.h	/^	unsigned long int	hi;$/;"	m	struct:s_magic
hidden_cursor	includes/struct.h	/^	char				*hidden_cursor;$/;"	m	struct:s_termcaps
history	srcs/module/history/history.c	/^char		*history(t_registry *shell, const char *name, const uint64_t option)$/;"	f
history_expansion	srcs/module/history/history_expansion.c	/^int8_t			history_expansion(t_vector *input)$/;"	f
hits	libft/includes/hashmap.h	/^	uint32_t	hits;$/;"	m	struct:s_hnode
holder	libft/includes/ft_printf.h	/^	char				*holder;$/;"	m	struct:s_format
home	includes/struct.h	/^	t_vector			*home;$/;"	m	struct:s_intern
id	includes/struct.h	/^	uint64_t			id;$/;"	m	struct:s_job
id	libft/includes/ft_printf.h	/^	char				id;$/;"	m	struct:s_format
id_to_job	srcs/module/builtin/jobs/utils.c	/^static int8_t		id_to_job(t_job **job, uint64_t job_id)$/;"	f	file:
index	includes/autocompletion.h	/^	size_t				index;$/;"	m	struct:s_autocomplete
index	includes/expansion.h	/^	size_t					index;$/;"	m	struct:s_parameter
index	includes/struct.h	/^	size_t				index;$/;"	m	struct:s_lexer
index	includes/struct.h	/^	uint64_t			index;$/;"	m	struct:s_cursor
index	libft/includes/output.h	/^	unsigned int	index;$/;"	m	struct:s_buffer
index_to_coord	srcs/module/sle/redraw/redraw_tools.c	/^void		index_to_coord(t_sle *sle, uint64_t index, t_coord *co)$/;"	f
info	libft/includes/directory.h	/^	t_stat				info;$/;"	m	struct:s_status
inhibitor	includes/struct.h	/^	uint16_t			inhibitor;$/;"	m	struct:s_lexer
init_advanced_pex	srcs/module/expansion/parameter/parameter_get.c	/^void	init_advanced_pex(t_advanced_pex expansion[PEX_ADVANCED_EXP])$/;"	f
init_analyzer	srcs/module/analyzer/init/init_analyzer.c	/^t_analyzer	*init_analyzer(void)$/;"	f
init_and_reset	srcs/module/autocompletion/autocompletion.c	/^static uint8_t	init_and_reset(t_autocomplete *result, uint64_t option)$/;"	f	file:
init_and_reset	srcs/module/history/history.c	/^static void	init_and_reset(t_registry *shell,$/;"	f	file:
init_assign_data	srcs/module/analyzer/init/init_assign_analyzer.c	/^void	init_assign_data(t_analyzer analyzer)$/;"	f
init_assign_flush	srcs/module/analyzer/init/init_assign_analyzer.c	/^void	init_assign_flush(t_analyzer analyzer)$/;"	f
init_cursor	srcs/module/sle/init/load_sle_struct.c	/^uint64_t    init_cursor(t_sle *sle)$/;"	f
init_debug_logger	srcs/module/logging/debug_logger.c	/^void			init_debug_logger(t_registry *shell)$/;"	f
init_delimiters	srcs/module/expansion/parameter/parameter_parser.c	/^void		init_delimiters(char *delimiters[PEX_DELIMITERS])$/;"	f
init_dup_move	srcs/module/analyzer/init/init_start_analyzer.c	/^void	init_dup_move(t_analyzer analyzer)$/;"	f
init_error	srcs/module/analyzer/init/init_start_analyzer.c	/^void	init_error(t_analyzer analyzer)$/;"	f
init_filename	srcs/module/analyzer/init/init_string_analyzer.c	/^void	init_filename(t_analyzer analyzer)$/;"	f
init_flush_redirect	srcs/module/analyzer/init/init_start_analyzer.c	/^void	init_flush_redirect(t_analyzer analyzer)$/;"	f
init_flush_string	srcs/module/analyzer/init/init_string_analyzer.c	/^void	init_flush_string(t_analyzer analyzer)$/;"	f
init_heredoc	srcs/module/analyzer/init/init_heredoc_analyzer.c	/^void	init_heredoc(t_analyzer analyzer)$/;"	f
init_heredoc_delimiter	srcs/module/analyzer/init/init_heredoc_analyzer.c	/^void	init_heredoc_delimiter(t_analyzer analyzer)$/;"	f
init_heredoc_redirect	srcs/module/analyzer/init/init_heredoc_analyzer.c	/^void	init_heredoc_redirect(t_analyzer analyzer)$/;"	f
init_io	srcs/module/analyzer/init/init_io_analyzer.c	/^void	init_io(t_analyzer analyzer)$/;"	f
init_io_dup_move	srcs/module/analyzer/init/init_io_redirect_analyzer.c	/^void	init_io_dup_move(t_analyzer analyzer)$/;"	f
init_io_filename	srcs/module/analyzer/init/init_io_analyzer.c	/^void	init_io_filename(t_analyzer analyzer)$/;"	f
init_io_filename_and	srcs/module/analyzer/init/init_io_analyzer.c	/^void	init_io_filename_and(t_analyzer analyzer)$/;"	f
init_io_flush	srcs/module/analyzer/init/init_io_analyzer.c	/^void	init_io_flush(t_analyzer analyzer)$/;"	f
init_io_flush_and	srcs/module/analyzer/init/init_io_analyzer.c	/^void	init_io_flush_and(t_analyzer analyzer)$/;"	f
init_io_heredoc	srcs/module/analyzer/init/init_heredoc_analyzer.c	/^void	init_io_heredoc(t_analyzer analyzer)$/;"	f
init_io_heredoc_delimiter	srcs/module/analyzer/init/init_heredoc_analyzer.c	/^void	init_io_heredoc_delimiter(t_analyzer analyzer)$/;"	f
init_io_heredoc_redirect	srcs/module/analyzer/init/init_io_redirect_analyzer.c	/^void	init_io_heredoc_redirect(t_analyzer analyzer)$/;"	f
init_io_rediction_analyzer	srcs/module/analyzer/init/init_analyzer.c	/^static void	init_io_rediction_analyzer(t_analyzer analyzer)$/;"	f	file:
init_io_redirect	srcs/module/analyzer/init/init_io_redirect_analyzer.c	/^void	init_io_redirect(t_analyzer analyzer)$/;"	f
init_lexer	srcs/module/lexer/process/lexer_tools.c	/^void		init_lexer(t_lexer *lexer, t_vector *input)$/;"	f
init_line	srcs/module/sle/init/load_sle.c	/^uint64_t    init_line(t_sle *sle)$/;"	f
init_log	srcs/core/startup/main.c	/^static void		init_log(t_registry *shell)$/;"	f	file:
init_m_close_parent	srcs/module/expansion/arithmetic/math_analyzer.c	/^void		init_m_close_parent(t_ar_analyzer analyzer)$/;"	f
init_m_flush_variable	srcs/module/expansion/arithmetic/math_analyzer.c	/^void		init_m_flush_variable(t_ar_analyzer analyzer)$/;"	f
init_m_logical_operator	srcs/module/expansion/arithmetic/math_analyzer.c	/^void		init_m_logical_operator(t_ar_analyzer analyzer)$/;"	f
init_m_number	srcs/module/expansion/arithmetic/math_analyzer.c	/^void 		init_m_number(t_ar_analyzer analyzer)$/;"	f
init_m_open_parent	srcs/module/expansion/arithmetic/math_analyzer.c	/^void		init_m_open_parent(t_ar_analyzer analyzer)$/;"	f
init_m_operator	srcs/module/expansion/arithmetic/math_analyzer.c	/^void 		init_m_operator(t_ar_analyzer analyzer)$/;"	f
init_m_preffix	srcs/module/expansion/arithmetic/math_analyzer.c	/^void		init_m_preffix(t_ar_analyzer analyzer)$/;"	f
init_m_start	srcs/module/expansion/arithmetic/math_analyzer.c	/^void 		init_m_start(t_ar_analyzer analyzer)$/;"	f
init_m_suffix	srcs/module/expansion/arithmetic/math_analyzer.c	/^void		init_m_suffix(t_ar_analyzer analyzer)$/;"	f
init_m_unary	srcs/module/expansion/arithmetic/math_analyzer.c	/^void		init_m_unary(t_ar_analyzer analyzer)$/;"	f
init_m_variable	srcs/module/expansion/arithmetic/math_analyzer.c	/^void		init_m_variable(t_ar_analyzer analyzer)$/;"	f
init_math_analyzer	srcs/module/expansion/arithmetic/math_analyzer.c	/^t_ar_analyzer	*init_math_analyzer(void)$/;"	f
init_parser	srcs/module/parser/init/init_parser.c	/^t_graph		*init_parser(void)$/;"	f
init_pipe	srcs/module/analyzer/init/init_io_redirect_analyzer.c	/^void	init_pipe(t_analyzer analyzer)$/;"	f
init_prompt	srcs/module/sle/init/load_sle_struct.c	/^uint64_t    init_prompt(t_sle *sle)$/;"	f
init_redirect	srcs/module/analyzer/init/init_start_analyzer.c	/^void	init_redirect(t_analyzer analyzer)$/;"	f
init_resolve	srcs/core/routine/routine.c	/^static t_resolution	init_resolve(t_list *tokens)$/;"	f	file:
init_shell	srcs/core/startup/main.c	/^static int8_t	init_shell(t_registry *shell, char **av, char **env)$/;"	f	file:
init_signal_catcher	libft/srcs/test/framework.c	/^static void		init_signal_catcher(void)$/;"	f	file:
init_sle	srcs/module/sle/init/setup_sle.c	/^static uint64_t				init_sle(t_registry *shell, t_sle *sle)$/;"	f	file:
init_start	srcs/module/analyzer/init/init_start_analyzer.c	/^void	init_start(t_analyzer analyzer)$/;"	f
init_stop	srcs/module/analyzer/init/init_start_analyzer.c	/^void	init_stop(t_analyzer analyzer)$/;"	f
init_string	srcs/module/analyzer/init/init_string_analyzer.c	/^void	init_string(t_analyzer analyzer)$/;"	f
init_tab_signal_dflt	srcs/core/signals/init_signal_profile.c	/^void		init_tab_signal_dflt(struct sigaction tab_signal[NB_SIGNALS])$/;"	f
init_tab_signal_exec	srcs/core/signals/init_signal_profile.c	/^void		init_tab_signal_exec(struct sigaction tab_signal[NB_SIGNALS])$/;"	f
init_tab_signal_sle	srcs/core/signals/init_signal_profile.c	/^void		init_tab_signal_sle(struct sigaction tab_signal[NB_SIGNALS])$/;"	f
init_term_modes	srcs/core/termmode/termmode.c	/^static int16_t          init_term_modes(struct termios *sle,$/;"	f	file:
init_termcaps	srcs/module/sle/init/init_sle.c	/^uint64_t    init_termcaps(t_termcaps *termcap)$/;"	f
init_window	srcs/module/sle/init/load_sle_struct.c	/^uint64_t    init_window(t_sle *sle)$/;"	f
input	includes/expansion.h	/^	t_vector				*input;$/;"	m	struct:s_arithmetic
input	includes/expansion.h	/^	t_vector				*input;$/;"	m	struct:s_math
input	includes/struct.h	/^	t_vector			*input;$/;"	m	struct:s_lexer
insert_intern	srcs/module/interpreter/core/fork_process.c	/^int			insert_intern(t_list **intern, t_list *node)$/;"	f
int_swap	srcs/module/history/history_tools.c	/^void		int_swap(int *nb1, int *nb2)$/;"	f
integer	libft/includes/ft_printf.h	/^	int					integer;$/;"	m	union:u_args
interactive_mode	srcs/core/launch/interactive_mode.c	/^void				interactive_mode(t_registry *shell)$/;"	f
intern	includes/struct.h	/^	t_list				*intern;$/;"	m	struct:s_registry
interns	includes/struct.h	/^	t_intern			interns;$/;"	m	struct:s_sle
interpreter	srcs/module/interpreter/interpreter.c	/^int8_t 			interpreter(t_registry *shell, t_list **cmd_group, int flag)$/;"	f
intmax	libft/includes/ft_printf.h	/^	intmax_t			intmax;$/;"	m	union:u_args
invoke_ps2prompt	srcs/module/sle/prompt/prompt.c	/^t_vector	*invoke_ps2prompt(t_registry *shell, t_sle *sle, uint32_t sle_flag)$/;"	f
invoke_ps3prompt	srcs/module/sle/prompt/prompt.c	/^t_vector	*invoke_ps3prompt(t_registry *shell, t_sle *sle)$/;"	f
io_analyzer	srcs/module/analyzer/state/io_redirect_analyzer.c	/^void	io_analyzer(t_resolution *resolve)$/;"	f
io_and_redirect_flush	srcs/module/analyzer/state/io_redirect_analyzer.c	/^void	io_and_redirect_flush(t_resolution *resolve)$/;"	f
io_append	srcs/module/interpreter/core/io_redirect_functions.c	/^void		io_append(t_registry *shell, t_redirect *redirect$/;"	f
io_dup_move_analyzer	srcs/module/analyzer/state/filename_analyzer.c	/^void	io_dup_move_analyzer(t_resolution *resolve)$/;"	f
io_heredoc	srcs/module/interpreter/core/heredoc_interpreter.c	/^void	io_heredoc(t_registry *shell, t_redirect *redirect, t_action *action)$/;"	f
io_heredoc_analyzer	srcs/module/analyzer/state/heredoc_analyzer.c	/^void		io_heredoc_analyzer(t_resolution *resolve)$/;"	f
io_heredoc_trim	srcs/module/interpreter/core/heredoc_interpreter.c	/^void	io_heredoc_trim(t_registry *shell, t_redirect *redirect$/;"	f
io_readfd	srcs/module/interpreter/core/io_redirect_functions.c	/^void	io_readfd(__unused t_registry *shell, t_redirect *redirect$/;"	f
io_readfile	srcs/module/interpreter/core/io_redirect_functions.c	/^void		io_readfile(t_registry *shell, t_redirect *redirect$/;"	f
io_redirect_analyzer	srcs/module/analyzer/state/io_redirect_analyzer.c	/^void	io_redirect_analyzer(t_resolution *resolve)$/;"	f
io_redirect_and_analyzer	srcs/module/analyzer/state/io_redirect_analyzer.c	/^void	io_redirect_and_analyzer(t_resolution *resolve)$/;"	f
io_redirect_flush	srcs/module/analyzer/state/io_redirect_analyzer.c	/^void	io_redirect_flush(t_resolution *resolve)$/;"	f
io_truncate	srcs/module/interpreter/core/io_redirect_functions.c	/^void		io_truncate(t_registry *shell, t_redirect *redirect$/;"	f
is_a_directory	srcs/module/autocompletion/autocompletion_tools.c	/^uint8_t	is_a_directory(char *dirname, char *file)$/;"	f
is_assignation	srcs/module/lexer/process/checker_module.c	/^uint8_t	is_assignation(t_lexer *lexer)$/;"	f
is_brace_exp	srcs/module/sle/prompt/prompt_subroutine_tools.c	/^uint8_t			is_brace_exp(t_sle *sle, int index)$/;"	f
is_cdpath_env	srcs/module/builtin/cd/cd_cdpath.c	/^char			*is_cdpath_env(t_registry *shell, const char *to_find)$/;"	f
is_cmd_delimiter	srcs/module/autocompletion/autocompletion_tools.c	/^uint8_t	is_cmd_delimiter(char c)$/;"	f
is_delimiter	srcs/module/lexer/process/checker_module.c	/^uint8_t	is_delimiter(t_lexer *lexer)$/;"	f
is_delimiter_m	srcs/module/lexer/process/lexer_maths_interface.c	/^uint8_t	is_delimiter_m(t_lexer *lexer)$/;"	f
is_end_backslash	srcs/module/sle/prompt/prompt_subroutine_tools.c	/^uint8_t			is_end_backslash(t_sle *sle, int index)$/;"	f
is_eof	srcs/module/sle/utils/input_tools.c	/^uint8_t	is_eof(const char *buffer)$/;"	f
is_exclusive	srcs/module/autocompletion/get_completion_cmd.c	/^static uint8_t	is_exclusive(t_list *result, char *data)$/;"	f	file:
is_export	srcs/module/interpreter/tools/generate_env.c	/^int		is_export(void *data, __unused void *to_find)$/;"	f
is_file_type	srcs/module/autocompletion/get_type.c	/^enum e_result_type			is_file_type(char *input, size_t len)$/;"	f
is_history_end	srcs/module/history/history_expansion.c	/^static uint8_t	is_history_end(t_vector *input, const size_t offset)$/;"	f	file:
is_input_end	srcs/module/lexer/process/checker_module.c	/^uint8_t	is_input_end(t_lexer *lexer)$/;"	f
is_input_end_m	srcs/module/lexer/process/lexer_maths_interface.c	/^uint8_t	is_input_end_m(t_lexer *lexer)$/;"	f
is_input_valid	srcs/core/launch/interactive_mode.c	/^static uint8_t		is_input_valid(uint8_t valid)$/;"	f	file:
is_io_number	srcs/module/lexer/process/checker_module.c	/^uint8_t	is_io_number(t_lexer *lexer) $/;"	f
is_ionumber	srcs/module/analyzer/tools/analyzer_tools.c	/^int		is_ionumber(t_resolution *resolve, char *str)$/;"	f
is_left_p	srcs/module/expansion/arithmetic/calculator.c	/^uint8_t		is_left_p(t_stack *operator)$/;"	f
is_maths_exp	srcs/module/sle/prompt/prompt_subroutine_tools.c	/^uint8_t			is_maths_exp(t_sle *sle, int index)$/;"	f
is_number_m	srcs/module/lexer/process/lexer_maths_interface.c	/^uint8_t	is_number_m(t_lexer *lexer)$/;"	f
is_operator	srcs/module/lexer/process/lexer_interface.c	/^static uint8_t	is_operator(t_lexer *lexer) $/;"	f	file:
is_operator_m	srcs/module/lexer/process/lexer_maths_interface.c	/^uint8_t	is_operator_m(t_lexer *lexer)$/;"	f
is_option	srcs/module/builtin/blt_options.c	/^static enum e_state_option	is_option(const char *s)$/;"	f	file:
is_printable	srcs/module/sle/utils/input_tools.c	/^inline uint8_t		is_printable(char c[READ_SIZE])$/;"	f
is_reserved_word	srcs/module/lexer/process/lexer_interface.c	/^static uint8_t	is_reserved_word(t_lexer *lexer) $/;"	f	file:
is_root	srcs/module/builtin/cd/cd.c	/^static int8_t		is_root(char *path)$/;"	f	file:
is_separator	srcs/module/sle/utils/input_tools.c	/^inline uint8_t		is_separator(char character[READ_SIZE + 1])$/;"	f
is_shell_interactive	srcs/core/launch/launch.c	/^inline uint8_t	is_shell_interactive(t_registry *shell)$/;"	f
is_valid_path	srcs/module/builtin/cd/cd_cdpath.c	/^static char		*is_valid_path(char *path, const char *to_find)$/;"	f	file:
job_is_completed	srcs/module/jobcontrol/utils.c	/^uint8_t	job_is_completed(t_job *job)$/;"	f
job_is_stopped	srcs/module/jobcontrol/utils.c	/^uint8_t	job_is_stopped(t_job *job)$/;"	f
job_list	includes/struct.h	/^	t_list				*job_list;$/;"	m	struct:s_registry
job_run_background	srcs/module/jobcontrol/jobctl.c	/^void	job_run_background(t_registry *shell, t_job *job)$/;"	f
job_to_foreground	srcs/module/jobcontrol/jobctl.c	/^void	job_to_foreground(t_registry *shell, t_job *job)$/;"	f
job_to_registry	srcs/module/jobcontrol/jobctl.c	/^static void			job_to_registry(t_registry *shell, t_job *job)$/;"	f	file:
job_type	includes/struct.h	/^	uint8_t				job_type;$/;"	m	struct:s_job
jobctl	srcs/module/jobcontrol/jobctl.c	/^void	jobctl(__unused t_registry *shell, t_job *job, uint8_t flag)$/;"	f
jobs	srcs/module/builtin/jobs/jobs.c	/^void		jobs(t_registry *shell, t_job *job, t_option option)$/;"	f
jobs_blt	srcs/module/builtin/jobs/jobs.c	/^uint8_t		jobs_blt(t_registry *shell, char **av)$/;"	f
key	libft/includes/hashmap.h	/^	char		*key;$/;"	m	struct:s_hnode
kill_active_jobs	srcs/module/builtin/exit/exit.c	/^void			kill_active_jobs(t_registry *shell)$/;"	f
kill_process	srcs/module/interpreter/core/waiter.c	/^int			kill_process(void *context, void *data)$/;"	f
l_double	libft/includes/ft_printf.h	/^	long double			l_double;$/;"	m	union:u_args
l_integer	libft/includes/ft_printf.h	/^	long int			l_integer;$/;"	m	union:u_args
last	includes/struct.h	/^	int		last;$/;"	m	struct:s_param
last_state	includes/struct.h	/^	enum e_analyzer_state	last_state;$/;"	m	struct:s_resolution	typeref:enum:s_resolution::e_analyzer_state
last_token_mtype	includes/struct.h	/^	enum e_mtype		last_token_mtype;$/;"	m	struct:s_lexer	typeref:enum:s_lexer::e_mtype
launch_edition	srcs/module/builtin/fc/fc_editor.c	/^static void		launch_edition(t_registry *shell, char *editor)$/;"	f	file:
launch_pipeline	srcs/module/interpreter/tools/pipe_interpreter.c	/^int8_t	launch_pipeline(t_registry *shell, t_list *process)$/;"	f
launch_shell	srcs/core/launch/launch.c	/^void					launch_shell(t_registry *shell)$/;"	f
launch_sle	srcs/module/sle/launch_sle.c	/^uint8_t		launch_sle(t_registry *shell, t_sle *sle)$/;"	f
left	includes/struct.h	/^	char				*left;$/;"	m	struct:s_termcaps
length	includes/struct.h	/^	uint64_t			length;$/;"	m	struct:s_prompt
lexer	srcs/module/lexer/lexer.c	/^t_list			*lexer(t_vector *input, uint8_t opt)$/;"	f
lexer_m_print_debug	srcs/module/lexer/debug/tmp_display.c	/^void		lexer_m_print_debug(t_registry *shell, t_list *token_list)$/;"	f
lexer_print_debug	srcs/module/lexer/debug/tmp_display.c	/^void		lexer_print_debug(t_registry *shell, t_list *token_list)$/;"	f
line	includes/struct.h	/^	t_vector			*line;$/;"	m	struct:s_sle
line	libft/includes/ft_malloc.h	/^	int			line;$/;"	m	struct:s_meminfo
line_len	includes/struct.h	/^	uint64_t			line_len;$/;"	m	struct:s_redrawinfo
line_save	includes/struct.h	/^	t_vector			*line_save;$/;"	m	struct:s_sle
link_keys_functions	srcs/module/sle/init/load_sle.c	/^uint64_t    link_keys_functions(int8_t (*actionkeys[AK_AMOUNT])(t_registry *shell, t_sle *sle))$/;"	f
list	includes/autocompletion.h	/^	t_list				*list;$/;"	m	struct:s_autocomplete
list_export_size	srcs/core/tools/intern_var/intern_var_tools.c	/^size_t			list_export_size(t_list *lst)$/;"	f
ll_integer	libft/includes/ft_printf.h	/^	long long int		ll_integer;$/;"	m	union:u_args
lo	libft/includes/str.h	/^	unsigned long int	lo;$/;"	m	struct:s_magic
load_interface	srcs/module/sle/init/setup_sle.c	/^static uint64_t				load_interface(t_registry *shell, t_sle *sle)$/;"	f	file:
load_interface_modules	srcs/module/sle/init/setup_sle.c	/^static uint64_t				load_interface_modules(__unused t_sle *sle)$/;"	f	file:
load_profile	srcs/core/signals/signal_profile.c	/^static void	load_profile(struct sigaction signal_profile[NB_SIGNALS])$/;"	f	file:
load_signal_profile	srcs/core/signals/signal_profile.c	/^void	load_signal_profile(uint8_t	profile_flag)$/;"	f
load_test	libft/srcs/test/framework.c	/^int				load_test(t_stack *head, char *name, int (*f)(void))$/;"	f
log_print	srcs/module/logging/debug_logger.c	/^void			log_print(t_registry *shell, const char *importance,$/;"	f
loop_defaults	srcs/core/signals/init_signal_profile.c	/^static void	loop_defaults(struct sigaction generic[NB_SIGNALS])$/;"	f	file:
lst_strcmp	srcs/module/autocompletion/autocompletion_tools.c	/^int		lst_strcmp(void *data1, void *data2)$/;"	f
lw	libft/includes/str.h	/^	unsigned long int	lw;$/;"	m	struct:s_magic
m_end_analyzer	srcs/module/expansion/arithmetic/arithmetic_analyzer.c	/^void		m_end_analyzer(t_arithmetic *arithmetic)$/;"	f
m_error_analyzer	srcs/module/expansion/arithmetic/arithmetic_analyzer.c	/^void		m_error_analyzer(t_arithmetic *arithmetic)$/;"	f
m_flush_variable_analyzer	srcs/module/expansion/arithmetic/arithmetic_variable.c	/^void		m_flush_variable_analyzer(t_arithmetic *arithmetic)$/;"	f
m_get_token	srcs/module/expansion/arithmetic/arithmetic_tools.c	/^void		m_get_token(t_arithmetic *arithmetic, t_list **node)$/;"	f
m_logical_operator	srcs/module/expansion/arithmetic/arithmetic_base_states.c	/^void		m_logical_operator(t_arithmetic *arithmetic)$/;"	f
m_number_analyzer	srcs/module/expansion/arithmetic/arithmetic_base_states.c	/^void		m_number_analyzer(t_arithmetic *arithmetic)$/;"	f
m_operator_analyzer	srcs/module/expansion/arithmetic/arithmetic_variable.c	/^void		m_operator_analyzer(t_arithmetic *arithmetic)$/;"	f
m_parenthesis_analyzer	srcs/module/expansion/arithmetic/arithmetic_variable.c	/^void		m_parenthesis_analyzer(t_arithmetic *arithmetic)$/;"	f
m_postdecrement_analyzer	srcs/module/expansion/arithmetic/arithmetic_preffix_plus_minus.c	/^void		m_postdecrement_analyzer(t_arithmetic *arithmetic)$/;"	f
m_postincrement_analyzer	srcs/module/expansion/arithmetic/arithmetic_preffix_plus_minus.c	/^void		m_postincrement_analyzer(t_arithmetic *arithmetic)$/;"	f
m_predecrement_analyzer	srcs/module/expansion/arithmetic/arithmetic_preffix_plus_minus.c	/^void		m_predecrement_analyzer(t_arithmetic *arithmetic)$/;"	f
m_preffix	srcs/module/expansion/arithmetic/arithmetic_preffix_plus_minus.c	/^void		m_preffix(t_arithmetic *arithmetic)$/;"	f
m_preincrement_analyzer	srcs/module/expansion/arithmetic/arithmetic_preffix_plus_minus.c	/^void		m_preincrement_analyzer(t_arithmetic *arithmetic)$/;"	f
m_suffix	srcs/module/expansion/arithmetic/arithmetic_preffix_plus_minus.c	/^void		m_suffix(t_arithmetic *arithmetic)$/;"	f
m_unary_analyzer	srcs/module/expansion/arithmetic/arithmetic_base_states.c	/^void		m_unary_analyzer(t_arithmetic *arithmetic)$/;"	f
m_variable_analyzer	srcs/module/expansion/arithmetic/arithmetic_variable.c	/^void		m_variable_analyzer(t_arithmetic *arithmetic)$/;"	f
main	libft/vctunit/vct_unit.c	/^int main(int ac, char **av)$/;"	f
main	srcs/core/startup/main.c	/^int		main(int ac, char **av, char **env) \/\/ exit by shell_exit_routine$/;"	f
make_curpath_simple	srcs/module/builtin/cd/cd_simple.c	/^char			*make_curpath_simple(char *curpath)$/;"	f
manage_error_and_subprompt	srcs/module/parser/parser.c	/^static uint8_t	manage_error_and_subprompt(t_vector *input,$/;"	f	file:
map	libft/includes/hashmap.h	/^	t_list		**map;$/;"	m	struct:s_hash
map_size	libft/includes/hashmap.h	/^	size_t		map_size;$/;"	m	struct:s_hash
mapper	libft/srcs/list/ft_lstmap.c	/^int		mapper(t_list *lst, t_list **map, void *context, t_lstmap func)$/;"	f
maths_exp_routine	srcs/module/sle/prompt/prompt_subroutine.c	/^uint8_t			maths_exp_routine(t_sle *sle, size_t *i)$/;"	f
max_chars	includes/struct.h	/^	uint64_t			max_chars;$/;"	m	struct:s_window
max_len	includes/autocompletion.h	/^	size_t				max_len;$/;"	m	struct:s_autocomplete
merge_lists	libft/srcs/list/ft_mergesort.c	/^static t_list	*merge_lists(t_list *a, t_list *b, int (*cmp)(void *, void *))$/;"	f	file:
missing_char	includes/struct.h	/^	char				*missing_char;$/;"	m	struct:s_prompt
modifier	includes/expansion.h	/^	uint8_t					modifier;$/;"	m	struct:s_parameter
move_cursor	srcs/module/sle/cursor.c	/^void     move_cursor(t_sle *sle)$/;"	f
move_cursor_to_coord	srcs/module/sle/cursor.c	/^void     move_cursor_to_coord(t_sle *sle, uint64_t x, uint64_t y)$/;"	f
move_fd	srcs/module/interpreter/core/io_redirect_functions.c	/^void		move_fd(t_registry *shell, t_redirect *redirect, t_action *action)$/;"	f
move_x	srcs/module/sle/cursor.c	/^static inline void move_x(t_sle *sle, uint64_t x)$/;"	f	file:
move_y	srcs/module/sle/cursor.c	/^static inline void move_y(t_sle *sle, uint64_t y)$/;"	f	file:
multi_strchr	srcs/module/builtin/blt_options.c	/^uint8_t multi_strchr(char *search, char *target)$/;"	f
name	includes/struct.h	/^	char				*name;$/;"	m	struct:s_variable
name	libft/includes/directory.h	/^	char				*name;$/;"	m	struct:s_status
name	libft/includes/test.h	/^	char		*name;$/;"	m	struct:s_result
name	libft/includes/test.h	/^	char		*name;$/;"	m	struct:s_test
nb	includes/autocompletion.h	/^	size_t				nb;$/;"	m	struct:s_autocomplete
nb_of_entries	includes/struct.h	/^	int			nb_of_entries;$/;"	m	struct:s_history
need_pop_operator	srcs/module/expansion/arithmetic/calculator.c	/^uint8_t		need_pop_operator(t_rpn_tk *curr, t_stack *operator)$/;"	f
need_subprompt	srcs/module/parser/parser_subprompt.c	/^uint8_t				need_subprompt(enum e_type state, enum e_type type)$/;"	f
next	includes/struct.h	/^	t_entry		*next;$/;"	m	struct:s_entry
next	libft/includes/list.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
normal_cursor	includes/struct.h	/^	char				*normal_cursor;$/;"	m	struct:s_termcaps
numlen	libft/srcs/conversion/ft_itoa.c	/^static int		numlen(long n)$/;"	f	file:
numlen	libft/srcs/conversion/ft_llitoa.c	/^static int		numlen(long long n)$/;"	f	file:
numlen	libft/srcs/conversion/ft_ullitoa.c	/^static int		numlen(unsigned long long n)$/;"	f	file:
octal	libft/srcs/ft_printf/unsigned.c	/^void	octal(t_format *format)$/;"	f
one_only_arg	srcs/module/builtin/cd/cd_simple.c	/^uint8_t			one_only_arg(char **arg)$/;"	f
only_whitespaces_after	srcs/module/sle/utils/move_tools.c	/^static int8_t	only_whitespaces_after(const char *str, const uint32_t index,$/;"	f	file:
operand	includes/expansion.h	/^	t_stack					operand;$/;"	m	struct:s_math
option	includes/struct.h	/^	t_opt				option;$/;"	m	struct:s_registry
option	includes/struct.h	/^	t_option			option;$/;"	m	struct:s_opt
orig_mode	includes/struct.h	/^	struct termios		*orig_mode;$/;"	m	struct:s_registry	typeref:struct:s_registry::termios
out_lexer	srcs/module/lexer/process/lexer_interface.c	/^void			out_lexer(t_lexer *lexer)$/;"	f
out_lexer_m	srcs/module/lexer/process/lexer_maths_interface.c	/^void			out_lexer_m(t_lexer *lexer)$/;"	f
output	libft/includes/ft_printf.h	/^	char				*output;$/;"	m	struct:s_format
p_insert_cwd	srcs/module/sle/prompt/prompt_expansion.c	/^void		p_insert_cwd(t_sle *sle, t_vector *text, uint64_t index)$/;"	f
p_insert_host	srcs/module/sle/prompt/prompt_expansion.c	/^void		p_insert_host(t_vector *text, uint64_t index)$/;"	f
p_insert_missing	srcs/module/sle/prompt/prompt_expansion.c	/^void		p_insert_missing(t_sle *sle, t_vector *text, uint64_t index)$/;"	f
p_insert_name	srcs/module/sle/prompt/prompt_expansion.c	/^void		p_insert_name(t_vector *text, uint64_t index)$/;"	f
p_insert_username	srcs/module/sle/prompt/prompt_expansion.c	/^void		p_insert_username(t_sle *sle, t_vector *text, uint64_t index)$/;"	f
parameter_check	srcs/module/expansion/parameter/parameter_parser.c	/^static int	parameter_check(t_pex_token *token)$/;"	f	file:
parameter_expansion	srcs/module/expansion/parameter.c	/^int 	parameter_expansion(t_list *intern, char **dest, int i)$/;"	f
parameter_get	srcs/module/expansion/parameter/parameter_get.c	/^int		parameter_get(t_list *intern, t_parameter *parameter)$/;"	f
parameter_lexer	srcs/module/expansion/parameter/parameter_lexer.c	/^void	parameter_lexer(t_parameter *parameter)$/;"	f
parameter_parse	srcs/module/expansion/parameter/parameter_parser.c	/^int			parameter_parse(t_list *intern, t_parameter *parameter)$/;"	f
parameter_print_debug	srcs/module/expansion/expansion_debug.c	/^void		parameter_print_debug(t_list *token_list)$/;"	f
parameter_replace	srcs/module/expansion/parameter.c	/^int		parameter_replace(char **dest, int index, t_parameter *param)$/;"	f
parent_manager	libft/srcs/test/framework.c	/^static void		parent_manager(int print_on)$/;"	f	file:
parent_process	srcs/module/interpreter/core/fork_process.c	/^static void	parent_process(t_registry *shell, t_process *process, char ***env)$/;"	f	file:
parenthesis	includes/expansion.h	/^	int						parenthesis;$/;"	m	struct:s_arithmetic
parenthesis	includes/struct.h	/^	uint32_t			parenthesis;$/;"	m	struct:s_lexer
parenthesis	srcs/module/sle/prompt/prompt_subroutine.c	/^static uint8_t	parenthesis(t_sle *sle, size_t *i)$/;"	f	file:
parse_arg	srcs/core/startup/options.c	/^int8_t			parse_arg(char **av, t_opt *option)$/;"	f
parse_jobid	srcs/module/builtin/jobs/utils.c	/^int8_t			parse_jobid(t_job **job, char *param)$/;"	f
parse_jobname	srcs/module/builtin/jobs/utils.c	/^int8_t			parse_jobname(t_job **job, char *jobname)$/;"	f
parser	libft/srcs/ft_printf/format.c	/^static t_list	*parser(char *spec, va_list args)$/;"	f	file:
parser	libft/srcs/other/ft_getopt.c	/^static char		parser(int ac, char **av, const char *optstr, char **opt)$/;"	f	file:
parser	libft/srcs/string/ft_strsplit.c	/^static int	parser(char const *s, char *c)$/;"	f	file:
parser	srcs/module/parser/parser.c	/^int8_t			parser(t_vector *input, t_list *lst)$/;"	f
parser_subprompt	srcs/module/parser/parser_subprompt.c	/^uint8_t				parser_subprompt(enum e_type state,$/;"	f
partition	libft/srcs/list/ft_mergesort.c	/^static void		partition(t_list *lst, t_list **front, t_list **back)$/;"	f	file:
path	libft/includes/directory.h	/^	char				*path;$/;"	m	struct:s_status
pex_delimiter	srcs/module/expansion/parameter/parameter_lexer.c	/^static void	pex_delimiter(t_parameter *param)$/;"	f	file:
pex_next_brace	srcs/module/expansion/parameter/parameter_lexer_word.c	/^static void	pex_next_brace(t_parameter *param)$/;"	f	file:
pex_next_double_quote	srcs/module/expansion/parameter/parameter_lexer_word.c	/^static void	pex_next_double_quote(t_parameter *param)$/;"	f	file:
pex_next_quote	srcs/module/expansion/parameter/parameter_lexer_word.c	/^static void	pex_next_quote(t_parameter *param)$/;"	f	file:
pex_parameter	srcs/module/expansion/parameter/parameter_lexer.c	/^static void	pex_parameter(t_parameter *param)$/;"	f	file:
pex_word	srcs/module/expansion/parameter/parameter_lexer_word.c	/^void		pex_word(t_parameter *param)$/;"	f
pgid	includes/struct.h	/^	pid_t				*pgid;$/;"	m	struct:s_process
pgid	includes/struct.h	/^	pid_t				pgid;			\/* Job process group id *\/$/;"	m	struct:s_job
pid	includes/struct.h	/^	pid_t				pid;$/;"	m	struct:s_process
pid	includes/struct.h	/^	pid_t				pid;$/;"	m	struct:s_registry
pipe_analyzer	srcs/module/analyzer/state/pipe_analyzer.c	/^void	pipe_analyzer(t_resolution *resolve)$/;"	f
point1	includes/struct.h	/^	uint64_t			point1;$/;"	m	struct:s_window
point2	includes/struct.h	/^	uint64_t			point2;$/;"	m	struct:s_window
point_cursor	includes/struct.h	/^	uint64_t			point_cursor;$/;"	m	struct:s_window
pointer	libft/includes/ft_printf.h	/^	void				*pointer;$/;"	m	union:u_args
pointer	libft/srcs/ft_printf/other.c	/^void			pointer(t_format *format)$/;"	f
pop_current_job	srcs/module/jobcontrol/update_jobs.c	/^void	pop_current_job(t_registry *shell, t_job *job)$/;"	f
pop_entry	srcs/module/history/entry_manager.c	/^void	pop_entry(t_entry **entry, t_entry **head)$/;"	f
pop_token_data	srcs/module/analyzer/tools/token_tools.c	/^char	*pop_token_data(t_stack *stack)$/;"	f
pop_token_type	srcs/module/analyzer/tools/token_tools.c	/^t_type	pop_token_type(t_stack *stack)$/;"	f
post_process	srcs/module/autocompletion/print_result.c	/^static void			post_process(t_autocomplete *result)$/;"	f	file:
precision	libft/includes/ft_printf.h	/^	int					precision;$/;"	m	struct:s_format
precision	libft/srcs/ft_printf/widthprec.c	/^char		*precision(t_format *format, char *tmp)$/;"	f
preffix_match	srcs/module/expansion/parameter/parameter_suffix_prefix.c	/^void	preffix_match(t_parameter *param, char *to_search, char *to_find)$/;"	f
prefix	libft/srcs/ft_printf/widthprec.c	/^char		*prefix(t_format *format, char *tmp)$/;"	f
prefix_expansion	srcs/module/expansion/parameter/parameter_suffix_prefix.c	/^int		prefix_expansion(t_list *intern, t_parameter *param)$/;"	f
prev	includes/struct.h	/^	t_entry		*prev;$/;"	m	struct:s_entry
print_action	srcs/module/logging/print_debug.c	/^void		print_action(void *data)$/;"	f
print_char	srcs/module/sle/redraw/redraw_tools.c	/^void		print_char(t_sle *sle, char c)$/;"	f
print_command	srcs/module/logging/print_debug.c	/^void		print_command(void *data)$/;"	f
print_group	srcs/module/logging/print_debug.c	/^void		print_group(void *data)$/;"	f
print_history	srcs/module/history/print_history.c	/^void		print_history(t_history *history,$/;"	f
print_job	srcs/module/interpreter/tools/print_tools.c	/^void	print_job(void *data)$/;"	f
print_jobinfo	srcs/module/builtin/jobs/print.c	/^static void	print_jobinfo(__unused t_job *job, uint8_t __unused flag)$/;"	f	file:
print_joblist	srcs/module/builtin/jobs/print.c	/^static void	print_joblist(__unused uint8_t flag)$/;"	f	file:
print_jobs	srcs/module/builtin/jobs/print.c	/^void	print_jobs(t_registry *shell, t_job *job, uint8_t flag)$/;"	f
print_longformat	srcs/module/builtin/jobs/print.c	/^static void		print_longformat(t_job *job, char *state)$/;"	f	file:
print_loop	srcs/module/sle/redraw/redraw_tools.c	/^void		print_loop(t_sle *sle, char *str)$/;"	f
print_lst	srcs/core/tools/intern_var/intern_var_tools.c	/^void			print_lst(t_list *lst, int fd, char *prefix, t_option flag)$/;"	f
print_map_info	libft/srcs/hashmap/ft_hmap_print.c	/^static void		print_map_info(t_hash *hashmap)$/;"	f	file:
print_mtoken	srcs/module/lexer/debug/tmp_display.c	/^void		print_mtoken(void *data)$/;"	f
print_output	srcs/module/history/print_history.c	/^static void		print_output(const char *cmd,$/;"	f	file:
print_pad	libft/includes/hashmap.h	/^	size_t		print_pad;$/;"	m	struct:s_hash
print_pex_token	srcs/module/expansion/expansion_debug.c	/^static void	print_pex_token(void *data)$/;"	f	file:
print_possibilities	srcs/module/autocompletion/print_result.c	/^void				print_possibilities(t_autocomplete *result)$/;"	f
print_process	srcs/module/interpreter/tools/print_tools.c	/^void	print_process(void *data)$/;"	f
print_prompt	srcs/module/sle/prompt/prompt_tools.c	/^inline void		print_prompt(__unused t_registry *shell, t_sle *sle)$/;"	f
print_prompt_to_window	srcs/module/sle/redraw/redraw_tools.c	/^void	print_prompt_to_window(t_sle *sle, t_vector *text)$/;"	f
print_reverse	srcs/module/history/print_history.c	/^static void		print_reverse(t_history *history, t_param *param,$/;"	f	file:
print_standard	srcs/module/history/print_history.c	/^static void		print_standard(t_history *history, t_param *param,$/;"	f	file:
print_test_header	libft/srcs/test/display_test.c	/^void	print_test_header(void)$/;"	f
print_test_result	libft/srcs/test/display_test.c	/^void	print_test_result(t_list *node)$/;"	f
print_test_separator	libft/srcs/test/display_test.c	/^void	print_test_separator(int print_on)$/;"	f
print_test_summary	libft/srcs/test/display_test.c	/^void	print_test_summary(t_list *summary)$/;"	f
print_token	srcs/module/lexer/debug/tmp_display.c	/^void		print_token(void *data)$/;"	f
print_var_lst	srcs/module/interpreter/tools/print_tools.c	/^void	print_var_lst(void *data)$/;"	f
process_get_result_type	srcs/module/autocompletion/get_type.c	/^static enum e_result_type	process_get_result_type(char *input, size_t len)$/;"	f	file:
process_history_expansion	srcs/module/history/history_expansion.c	/^static int		process_history_expansion(t_vector *input, const size_t i)$/;"	f	file:
process_lexer	srcs/module/lexer/process/lexer_interface.c	/^void			process_lexer(t_lexer *lexer)$/;"	f
process_maths_lexer	srcs/module/lexer/process/lexer_maths_interface.c	/^void			process_maths_lexer(t_lexer *lexer)$/;"	f
process_print	srcs/module/autocompletion/print_result.c	/^static void			process_print(t_list *lst, size_t elem_by_col)$/;"	f	file:
process_type	includes/struct.h	/^	uint32_t			process_type;$/;"	m	struct:s_process
processes	includes/struct.h	/^	t_list				*processes;		\/* Job process list		*\/$/;"	m	struct:s_job
processing	includes/expansion.h	/^	t_stack					processing;$/;"	m	struct:s_arithmetic
prompt	includes/struct.h	/^	t_prompt			prompt;$/;"	m	struct:s_sle
prompt	srcs/module/sle/prompt/prompt.c	/^t_vector	*prompt(t_registry *shell, t_sle *sle)$/;"	f
prompt_len	includes/struct.h	/^	uint64_t			prompt_len;$/;"	m	struct:s_redrawinfo
prompt_mode	srcs/module/sle/prompt/prompt_tools.c	/^void			prompt_mode(t_prompt *prompt, char *state, char *missing)$/;"	f
prompt_need_alignment	srcs/module/sle/prompt/prompt_tools.c	/^static uint8_t            prompt_need_alignment(void)$/;"	f	file:
prompt_post_process	srcs/module/sle/prompt/prompt.c	/^static void	prompt_post_process(t_registry *shell, t_sle *sle)$/;"	f	file:
prompt_pre_process	srcs/module/sle/prompt/prompt.c	/^static void	prompt_pre_process(t_sle *sle)$/;"	f	file:
prompt_type	includes/enum.h	/^enum	prompt_type$/;"	g
ps1	includes/struct.h	/^	t_vector			*ps1;$/;"	m	struct:s_intern
ps2	includes/struct.h	/^	t_vector			*ps2;$/;"	m	struct:s_intern
ps3	includes/struct.h	/^	t_vector			*ps3;$/;"	m	struct:s_intern
ptrdiff	libft/includes/ft_printf.h	/^	ptrdiff_t			ptrdiff;$/;"	m	union:u_args
push_back	libft/srcs/other/ft_getopt.c	/^static int		push_back(char *to_push)$/;"	f	file:
push_current_job	srcs/module/jobcontrol/update_jobs.c	/^void	push_current_job(t_registry *shell, t_list *job)$/;"	f
pwd	includes/struct.h	/^	t_vector			*pwd;$/;"	m	struct:s_intern
pwd_blt	srcs/module/builtin/pwd/pwd.c	/^uint8_t			pwd_blt(t_registry *shell, char **av)$/;"	f
quote_removal	srcs/module/expansion/quoting.c	/^void		quote_removal(char *str)$/;"	f
rd_flag	includes/struct.h	/^	uint32_t			rd_flag;$/;"	m	struct:s_window
rd_info	includes/struct.h	/^	t_redrawinfo		rd_info;$/;"	m	struct:s_sle
re_open_std	srcs/module/interpreter/tools/interpreter_tools.c	/^void		re_open_std(const uint8_t std, char *tty_name)$/;"	f
read_error	srcs/module/sle/prompt/prompt_error.c	/^inline t_vector *read_error(t_registry *shell, t_sle *sle)$/;"	f
read_histfile	srcs/module/history/histfile.c	/^void			read_histfile(t_registry *shell, t_history *history)$/;"	f
read_input	srcs/core/launch/batch_mode.c	/^static t_vector			*read_input(const int fd)$/;"	f	file:
redirect_analyzer	srcs/module/analyzer/state/redirect_analyzer.c	/^void			redirect_analyzer(t_resolution *resolve)$/;"	f
redirect_and_analyzer	srcs/module/analyzer/state/redirect_analyzer.c	/^void			redirect_and_analyzer(t_resolution *resolve)$/;"	f
redirect_or_other	srcs/module/interpreter/core/redirects.c	/^int		redirect_or_other(__unused void *context, void *data)$/;"	f
redirecter_init	srcs/module/interpreter/tools/redirect_tools.c	/^t_redirection	*redirecter_init(void)$/;"	f
redirects	includes/struct.h	/^	t_list				*redirects;$/;"	m	struct:s_process
redraw	srcs/module/sle/redraw/redraw.c	/^void    redraw(t_registry *shell, t_sle *sle)$/;"	f
redraw_line	srcs/module/sle/redraw/redraw.c	/^static void    redraw_line(t_registry *shell, t_sle *sle)$/;"	f	file:
redraw_window	srcs/module/sle/window.c	/^void	redraw_window(__unused  t_sle *sle)$/;"	f
redrawmode_clear	srcs/module/sle/redraw/redraw_modes.c	/^void	redrawmode_clear(t_registry *shell, t_sle *sle)$/;"	f
redrawmode_fpte	srcs/module/sle/redraw/redraw_modes.c	/^void	redrawmode_fpte(t_sle *sle)$/;"	f
redrawmode_fptp	srcs/module/sle/redraw/redraw_modes.c	/^void	redrawmode_fptp(t_sle *sle)$/;"	f
redrawmode_fstp	srcs/module/sle/redraw/redraw_modes.c	/^void	redrawmode_fstp(t_sle *sle)$/;"	f
redrawmode_last	srcs/module/sle/redraw/redraw_modes.c	/^void	redrawmode_last(t_sle *sle)$/;"	f
redrawmode_line	srcs/module/sle/redraw/redraw_modes.c	/^void	redrawmode_line(t_sle *sle)$/;"	f
redrawmode_visual	srcs/module/sle/action_keys/visual_mode.c	/^void					redrawmode_visual(t_sle *sle)$/;"	f
relocate_hash	libft/srcs/hashmap/ft_hmap_resize.c	/^static void	relocate_hash(t_hash *hashmap, t_list **new, size_t nw_size)$/;"	f	file:
remove_data	libft/srcs/hashmap/ft_hmap_remove.c	/^static int		remove_data(t_hash *hashmap, t_list *ptr$/;"	f	file:
remove_done_jobs	srcs/module/jobcontrol/update_jobs.c	/^void	remove_done_jobs(t_registry *shell)$/;"	f
remove_first	libft/srcs/hashmap/ft_hmap_remove.c	/^static int		remove_first(t_hash *hashmap, uint32_t hash$/;"	f	file:
remove_job_from_list	srcs/module/jobcontrol/jobctl.c	/^void			remove_job_from_list(t_list **list, t_job *job)$/;"	f
replace_cmd	srcs/module/builtin/fc/fc_redo.c	/^static int8_t	replace_cmd(char **cmd, char *target, char *result)$/;"	f	file:
replace_expansion	srcs/module/expansion/parameter/parameter_actions.c	/^int			replace_expansion(t_list *intern, t_parameter *param)$/;"	f
reset_redraw_mode	srcs/module/sle/redraw/redraw.c	/^static inline void reset_redraw_mode(t_sle *sle)$/;"	f	file:
resize_check	libft/srcs/hashmap/ft_hmap_remove.c	/^static int		resize_check(t_hash *hashmap)$/;"	f	file:
rest	libft/includes/get_next_line.h	/^	char			*rest;$/;"	m	struct:s_gnl_file
result	includes/expansion.h	/^	int64_t					result;$/;"	m	struct:s_infix
return_manager	libft/srcs/list/ft_lstremove_if.c	/^static int	return_manager(int mask)$/;"	f	file:
reversal	libft/srcs/list/ft_lstrev.c	/^static t_list	*reversal(t_list *previous, t_list *current, t_list *next)$/;"	f	file:
right	includes/struct.h	/^	char				*right;$/;"	m	struct:s_termcaps
room	libft/includes/output.h	/^	unsigned int	room;$/;"	m	struct:s_buffer
round_double	libft/srcs/ft_printf/doubles.c	/^static char			*round_double(long double value)$/;"	f	file:
rows	includes/struct.h	/^	uint32_t			rows;$/;"	m	struct:s_window
run_background_job	srcs/module/interpreter/tools/background_job.c	/^void	run_background_job(t_registry *shell, t_job *job)$/;"	f
run_builtin	srcs/module/interpreter/interpreter.c	/^void			run_builtin(t_registry *shell, t_process *process)$/;"	f
run_job	srcs/module/interpreter/interpreter.c	/^static int		run_job(void *context, void *data)$/;"	f	file:
run_process	srcs/module/interpreter/interpreter.c	/^int				run_process(t_registry *shell, t_process *process)$/;"	f
run_test	libft/srcs/test/framework.c	/^t_result		run_test(t_stack *tests, char *name, int print_on)$/;"	f
s_action	includes/struct.h	/^struct					s_action$/;"	s
s_arithmetic	includes/expansion.h	/^struct						s_arithmetic$/;"	s
s_autocomplete	includes/autocompletion.h	/^typedef struct			s_autocomplete$/;"	s
s_buffer	libft/includes/output.h	/^typedef struct		s_buffer$/;"	s
s_command	includes/struct.h	/^typedef	struct			s_command$/;"	s
s_conv	libft/srcs/conversion/ft_convert_base.c	/^static void			s_conv(long long nb, char *base, int index, char *buffer)$/;"	f	file:
s_coord	includes/struct.h	/^typedef struct			s_coord$/;"	s
s_cursor	includes/struct.h	/^typedef struct			s_cursor$/;"	s
s_double	libft/includes/ft_printf.h	/^	double				s_double;$/;"	m	union:u_args
s_entry	includes/struct.h	/^struct			s_entry$/;"	s
s_file	libft/includes/str.h	/^typedef struct		s_file$/;"	s
s_format	libft/includes/ft_printf.h	/^struct					s_format$/;"	s
s_gnl_file	libft/includes/get_next_line.h	/^typedef struct		s_gnl_file$/;"	s
s_graph	includes/struct.h	/^typedef struct			s_graph$/;"	s
s_group	includes/struct.h	/^typedef struct			s_group$/;"	s
s_hash	libft/includes/hashmap.h	/^typedef struct	s_hash$/;"	s
s_hashmap	includes/struct.h	/^typedef	struct			s_hashmap$/;"	s
s_history	includes/struct.h	/^typedef struct	s_history$/;"	s
s_hnode	libft/includes/hashmap.h	/^typedef struct	s_hnode$/;"	s
s_infix	includes/expansion.h	/^typedef struct				s_infix$/;"	s
s_intern	includes/struct.h	/^typedef struct 			s_intern$/;"	s
s_job	includes/struct.h	/^typedef struct			s_job$/;"	s
s_lexer	includes/struct.h	/^typedef struct			s_lexer$/;"	s
s_list	libft/includes/list.h	/^typedef struct		s_list$/;"	s
s_magic	libft/includes/str.h	/^typedef struct		s_magic$/;"	s
s_math	includes/expansion.h	/^typedef struct				s_math$/;"	s
s_meminfo	libft/includes/ft_malloc.h	/^typedef	struct s_meminfo$/;"	s
s_opt	includes/struct.h	/^typedef struct			s_opt$/;"	s
s_param	includes/struct.h	/^typedef struct	s_param$/;"	s
s_parameter	includes/expansion.h	/^struct						s_parameter$/;"	s
s_pex_token	includes/expansion.h	/^typedef struct				s_pex_token$/;"	s
s_process	includes/struct.h	/^typedef struct			s_process$/;"	s
s_prompt	includes/struct.h	/^typedef struct			s_prompt$/;"	s
s_redirect	includes/struct.h	/^struct					s_redirect$/;"	s
s_redrawinfo	includes/struct.h	/^typedef struct 			s_redrawinfo$/;"	s
s_registry	includes/struct.h	/^typedef struct			s_registry$/;"	s
s_resolution	includes/struct.h	/^struct					s_resolution$/;"	s
s_result	libft/includes/test.h	/^typedef struct	s_result$/;"	s
s_rpn_tk	includes/expansion.h	/^typedef struct				s_rpn_tk$/;"	s
s_short	libft/includes/ft_printf.h	/^	short				s_short;$/;"	m	union:u_args
s_sle	includes/struct.h	/^typedef struct			s_sle$/;"	s
s_stack	libft/includes/list.h	/^typedef struct		s_stack$/;"	s
s_status	libft/includes/directory.h	/^typedef struct			s_status$/;"	s
s_termcaps	includes/struct.h	/^typedef struct			s_termcaps$/;"	s
s_test	libft/includes/test.h	/^typedef struct	s_test$/;"	s
s_token	includes/struct.h	/^typedef struct			s_token$/;"	s
s_variable	includes/struct.h	/^typedef struct			s_variable$/;"	s
s_vector	libft/includes/vector.h	/^typedef struct      s_vector$/;"	s
s_window	includes/struct.h	/^typedef struct			s_window$/;"	s
save_intern_vars	srcs/module/sle/save_interns.c	/^void		save_intern_vars(t_registry *shell, t_sle *sle)$/;"	f
scale	libft/includes/vector.h	/^    uint16_t        scale;$/;"	m	struct:s_vector
search	libft/srcs/string/ft_strrchr.c	/^static	char	*search(const char *s, int c, int len)$/;"	f	file:
search_line	includes/struct.h	/^	t_vector			*search_line;$/;"	m	struct:s_sle
search_type	includes/struct.h	/^	uint16_t			search_type;$/;"	m	struct:s_sle
searching	srcs/module/history/history_expansion.c	/^static int		searching(t_vector *input, t_vector *to_replace, const size_t i,$/;"	f	file:
segbus	libft/includes/test.h	/^	int			segbus;$/;"	m	struct:s_result
segv	libft/includes/test.h	/^	int			segv;$/;"	m	struct:s_result
select_quoting	srcs/module/expansion/expansion.c	/^t_quote	select_quoting(t_quote quote, const char c)$/;"	f
send_rest	srcs/module/autocompletion/autocompletion.c	/^static char		*send_rest(t_autocomplete *result, char *input,$/;"	f	file:
setUp	libft/vctunit/vct_unit.c	/^static void setUp(t_vector **vect)$/;"	f	file:
set_ambigous_redirect	srcs/module/interpreter/core/redirects.c	/^void	set_ambigous_redirect(t_redirect *redirect, t_list *node)$/;"	f
set_assign_token	srcs/module/parser/init/ways_graph.c	/^void		set_assign_token(t_graph *tab_tokens)$/;"	f
set_blt	srcs/module/builtin/set/set.c	/^uint8_t				set_blt(t_registry *shell, __unused char **av)$/;"	f
set_braceparamflag	srcs/module/lexer/process/set_inhibitor.c	/^static void	set_braceparamflag(t_lexer *lexer)$/;"	f	file:
set_context	srcs/module/interpreter/interpreter.c	/^void			set_context(uint8_t *std, t_redirect *redirect)$/;"	f
set_cursor_pos	srcs/module/sle/redraw/redraw.c	/^inline void     set_cursor_pos(t_sle *sle, uint64_t index)$/;"	f
set_doublequoteflag	srcs/module/lexer/process/set_inhibitor.c	/^static void	set_doublequoteflag(t_lexer *lexer)$/;"	f	file:
set_environment	srcs/core/startup/init/setup.c	/^int8_t			set_environment(t_registry *shell, char **av, char **env)$/;"	f
set_filename_special	srcs/module/interpreter/core/redirect_functions.c	/^void	set_filename_special(t_redirect *redirect, char *filename, int type)$/;"	f
set_group_type	srcs/module/analyzer/tools/analyzer_tools.c	/^void	set_group_type(t_group *group, t_action *action)$/;"	f
set_inhibitor	srcs/module/lexer/process/set_inhibitor.c	/^void		set_inhibitor(t_lexer *lexer)$/;"	f
set_intern	srcs/module/interpreter/maping/map.c	/^void		*set_intern(__unused void *context, void *data)$/;"	f
set_ionumber_token	srcs/module/parser/init/ways_graph.c	/^void		set_ionumber_token(t_graph *tab_tokens)$/;"	f
set_mathsflag	srcs/module/lexer/process/set_inhibitor.c	/^static void	set_mathsflag(t_lexer *lexer)$/;"	f	file:
set_mode	srcs/core/termmode/termmode.c	/^static int16_t          set_mode(struct termios *mode)$/;"	f	file:
set_noflag	srcs/module/lexer/process/set_inhibitor.c	/^static void	set_noflag(t_lexer *lexer)$/;"	f	file:
set_oldpwd_and_pwd	srcs/module/builtin/cd/cd.c	/^static void			set_oldpwd_and_pwd(t_registry *shell, char *curpath,$/;"	f	file:
set_options	srcs/module/builtin/blt_options.c	/^t_option					set_options(char ***av, t_get_option get_option)$/;"	f
set_pipe_token	srcs/module/parser/init/ways_graph.c	/^void		set_pipe_token(t_graph *tab_tokens)$/;"	f
set_process	srcs/module/interpreter/maping/map.c	/^void		set_process(t_process *proc, t_command *command, void *context)$/;"	f
set_process_pgid	srcs/module/interpreter/tools/map_tools.c	/^int		set_process_pgid(void *context, void *data)$/;"	f
set_redirect	srcs/module/interpreter/maping/map.c	/^void		*set_redirect(void *context, void *data)$/;"	f
set_redirect_token	srcs/module/parser/init/ways_graph.c	/^void		set_redirect_token(t_graph *tab_tokens)$/;"	f
set_redraw_bounds	srcs/module/sle/redraw/redraw.c	/^inline void     set_redraw_bounds(t_sle *sle, uint64_t start, uint64_t end)$/;"	f
set_redraw_flags	srcs/module/sle/redraw/redraw.c	/^inline void     set_redraw_flags(t_sle *sle, uint32_t rd_flag)$/;"	f
set_shlvl	srcs/core/startup/init/setup.c	/^static int		set_shlvl(t_registry *shell)$/;"	f	file:
set_sigaction_struct	srcs/core/signals/init_signal_profile.c	/^static struct sigaction	set_sigaction_struct(void (*handler)(int),$/;"	f	file:
set_signaled	srcs/module/interpreter/tools/interpreter_tools.c	/^int			set_signaled(void *context, void *data)$/;"	f
set_sle_internals	srcs/module/sle/init/load_sle.c	/^uint64_t    set_sle_internals(t_registry *shell)$/;"	f
set_start_token	srcs/module/parser/init/ways_graph.c	/^void		set_start_token(t_graph *tab_tokens)$/;"	f
set_status	srcs/module/interpreter/core/waiter.c	/^static void		set_status(t_registry *shell, t_job *job,$/;"	f	file:
set_stopped	srcs/module/interpreter/tools/interpreter_tools.c	/^void		set_stopped(void *data)$/;"	f
set_test	libft/srcs/test/setup_test.c	/^void	set_test(t_list **lst, t_result results)$/;"	f
set_unary	srcs/module/expansion/arithmetic/arithmetic_base_states.c	/^void		set_unary(t_token *preffix, t_rpn_tk *token)$/;"	f
set_word_token	srcs/module/parser/init/ways_graph_word.c	/^void		set_word_token(t_graph *tab_tokens)$/;"	f
shell_exit_routine	srcs/core/routine/exit_routine.c	/^void				shell_exit_routine(t_registry *shell, int8_t ret)$/;"	f
shell_option_letter	srcs/core/startup/options.c	/^static int8_t	shell_option_letter(t_opt *option, char *arg)$/;"	f	file:
shell_option_word	srcs/core/startup/options.c	/^static int8_t	shell_option_word(t_opt *option, const char *arg)$/;"	f	file:
shell_usage	srcs/core/startup/main.c	/^int8_t			shell_usage(void)$/;"	f
shift_left	libft/srcs/vector/vct_shift_tool.c	/^void shift_left(t_vector *vector, uint64_t start)$/;"	f
shift_nleft	libft/srcs/vector/vct_shift_tool.c	/^void shift_nleft(t_vector *vector, uint64_t start, uint32_t offset)$/;"	f
shift_nright	libft/srcs/vector/vct_shift_tool.c	/^void shift_nright(t_vector *vector, uint64_t start, uint32_t offset)$/;"	f
shift_right	libft/srcs/vector/vct_shift_tool.c	/^void shift_right(t_vector *vector, uint64_t start)$/;"	f
sigabort	libft/includes/test.h	/^	int			sigabort;$/;"	m	struct:s_result
sigchld_exec	srcs/core/signals/exec_signals.c	/^void	sigchld_exec(int signo)$/;"	f
sigcont_exec	srcs/core/signals/exec_signals.c	/^void	sigcont_exec(__unused int signo)$/;"	f
sigcont_sle	srcs/core/signals/sle_signals.c	/^void	sigcont_sle(int signo)$/;"	f
sigfpe	libft/includes/test.h	/^	int			sigfpe;$/;"	m	struct:s_result
sigint	includes/struct.h	/^	uint8_t				sigint;$/;"	m	struct:s_registry
sigint_sle	srcs/core/signals/sle_signals.c	/^void	sigint_sle(__unused int signo)$/;"	f
sigkill	libft/includes/test.h	/^	int			sigkill;$/;"	m	struct:s_result
sign	includes/expansion.h	/^	t_stack					sign;$/;"	m	struct:s_arithmetic
sign	includes/expansion.h	/^	t_stack					sign;$/;"	m	struct:s_math
signal_catch	libft/srcs/test/framework.c	/^static void		signal_catch(int signal)$/;"	f	file:
signing	libft/srcs/ft_printf/widthprec.c	/^char		*signing(t_format *format, char *tmp, char flag)$/;"	f
signo	includes/struct.h	/^	uint32_t			signo;$/;"	m	struct:s_job
sigstop_exec	srcs/core/signals/exec_signals.c	/^void	sigstop_exec(int signo)$/;"	f
sigterm_sle	srcs/core/signals/sle_signals.c	/^void	sigterm_sle(int signo)$/;"	f
sigtstp_exec	srcs/core/signals/exec_signals.c	/^void	sigtstp_exec(__unused int signo)$/;"	f
sigtstp_sle	srcs/core/signals/sle_signals.c	/^void	sigtstp_sle(int signo)$/;"	f
sigttin_exec	srcs/core/signals/exec_signals.c	/^void	sigttin_exec(int signo)$/;"	f
sigttou_exec	srcs/core/signals/exec_signals.c	/^void	sigttou_exec(int signo)$/;"	f
sigwinch_sle	srcs/core/signals/sle_signals.c	/^void	sigwinch_sle(__unused int signo)$/;"	f
single_parameter	srcs/module/expansion/parameter/parameter_get.c	/^int		single_parameter(t_list *intern, t_parameter *parameter)$/;"	f
single_quote_routine	srcs/module/sle/prompt/prompt_subroutine.c	/^uint8_t			single_quote_routine(t_sle *sle, size_t *i)$/;"	f
size	libft/includes/ft_malloc.h	/^	size_t		size;$/;"	m	struct:s_meminfo
size	libft/includes/ft_printf.h	/^	char				*size;$/;"	m	struct:s_format
size	libft/includes/list.h	/^	size_t			size;$/;"	m	struct:s_stack
size	libft/includes/vector.h	/^    uint64_t        size;$/;"	m	struct:s_vector
sizet	libft/includes/ft_printf.h	/^	size_t				sizet;$/;"	m	union:u_args
slash_is_missing	srcs/module/autocompletion/autocompletion_tools2.c	/^uint8_t		slash_is_missing(char *completion)$/;"	f
sle	srcs/module/sle/launch_sle.c	/^uint8_t		sle(t_registry *shell, t_vector **in, uint32_t sle_flag)$/;"	f
sle_destroy	srcs/module/sle/utils/clean_registry.c	/^static void	sle_destroy(__unused t_sle *sle)$/;"	f	file:
sle_error	srcs/module/sle/init/setup_sle.c	/^void						sle_error(uint64_t report)$/;"	f
sle_get_input	srcs/module/sle/launch_sle.c	/^static uint8_t		sle_get_input(t_registry *shell, t_sle *sle, t_vector **in)$/;"	f	file:
sle_mode	includes/struct.h	/^	struct termios		*sle_mode;$/;"	m	struct:s_registry	typeref:struct:s_registry::termios
sle_setup	srcs/module/sle/init/setup_sle.c	/^uint64_t				sle_setup(t_registry *shell, t_sle *sle)$/;"	f
sle_teardown	srcs/module/sle/utils/clean_registry.c	/^void	sle_teardown(t_sle *sle)$/;"	f
solve_expression	srcs/module/expansion/arithmetic/arithmetic_analyzer.c	/^char		*solve_expression(t_arithmetic *arithmetic)$/;"	f
solving	includes/expansion.h	/^	t_list					*solving;$/;"	m	struct:s_arithmetic
source	includes/expansion.h	/^	char					*source;$/;"	m	struct:s_parameter
soutput	libft/srcs/ft_printf/output.c	/^int				soutput(char **dst, const char *fmt, t_list *node)$/;"	f
special_case	includes/struct.h	/^	unsigned int		special_case;$/;"	m	struct:s_resolution
spliter	libft/srcs/list/ft_lstsplit_if.c	/^static t_list		*spliter(t_list *current, t_list **new,\\$/;"	f	file:
ssizet	libft/includes/ft_printf.h	/^	ssize_t				ssizet;$/;"	m	union:u_args
stack	includes/struct.h	/^	t_stack				stack;$/;"	m	struct:s_resolution
stack_fct	libft/includes/ft_malloc.h	/^	char		**stack_fct;$/;"	m	struct:s_meminfo
stack_size	libft/includes/ft_malloc.h	/^	size_t		stack_size;$/;"	m	struct:s_meminfo
standout_off	includes/struct.h	/^	char				*standout_off;$/;"	m	struct:s_termcaps
standout_on	includes/struct.h	/^	char				*standout_on;$/;"	m	struct:s_termcaps
state	includes/expansion.h	/^	enum e_paramexp			state;$/;"	m	struct:s_parameter	typeref:enum:s_parameter::e_paramexp
state	includes/expansion.h	/^	t_mathstate				state;$/;"	m	struct:s_arithmetic
state	includes/struct.h	/^	char				*state;$/;"	m	struct:s_prompt
state	includes/struct.h	/^	enum e_analyzer_state	state;$/;"	m	struct:s_resolution	typeref:enum:s_resolution::e_analyzer_state
state	includes/struct.h	/^	enum e_lexer_state	state;$/;"	m	struct:s_lexer	typeref:enum:s_lexer::e_lexer_state
state	includes/struct.h	/^	uint8_t				state;			\/* RUNNING | PENDING *\/$/;"	m	struct:s_job
state	includes/struct.h	/^	uint8_t				state;$/;"	m	struct:s_sle
state	libft/includes/get_next_line.h	/^	int				state;$/;"	m	struct:s_gnl_file
state_is_ok	srcs/module/parser/parser.c	/^static uint8_t	state_is_ok(enum e_type to_find, enum e_type *current,$/;"	f	file:
state_search	srcs/module/sle/redraw/redraw_modes.c	/^static void	state_search(t_sle *sle)$/;"	f	file:
state_to_str	srcs/module/builtin/jobs/get_state.c	/^void state_to_str(uint8_t state, char **str)$/;"	f
status	includes/struct.h	/^	int					status;$/;"	m	struct:s_process
status	libft/includes/str.h	/^	int				status;$/;"	m	struct:s_file
stdin_readfd	srcs/module/interpreter/core/redirect_functions.c	/^void	stdin_readfd(__unused t_registry *shell, t_redirect *redirect$/;"	f
stdin_readfile	srcs/module/interpreter/core/redirect_functions.c	/^void	stdin_readfile(t_registry *shell, t_redirect *redirect$/;"	f
stdout_append	srcs/module/interpreter/core/redirect_functions.c	/^void	stdout_append(t_registry *shell, t_redirect *redirect$/;"	f
stdout_truncate	srcs/module/interpreter/core/redirect_functions.c	/^void	stdout_truncate(t_registry *shell, t_redirect *redirect$/;"	f
stdout_truncate_special	srcs/module/interpreter/core/redirect_functions.c	/^void	stdout_truncate_special(t_registry *shell, t_redirect *redirect$/;"	f
stop_analyzer	srcs/module/analyzer/state/analyzer_interface.c	/^void	stop_analyzer(t_resolution *resolve)$/;"	f
stopped	includes/struct.h	/^	uint8_t				stopped;$/;"	m	struct:s_process
str	libft/includes/str.h	/^	char			*str;$/;"	m	struct:s_file
str_colors	libft/srcs/ft_printf/other.c	/^static char		*str_colors(t_format *format, char *tmp)$/;"	f	file:
string	libft/includes/ft_printf.h	/^	char				*string;$/;"	m	union:u_args
string	libft/srcs/ft_printf/other.c	/^void			string(t_format *format)$/;"	f
string_analyzer	srcs/module/analyzer/state/string_analyzer.c	/^void	string_analyzer(t_resolution *resolve)$/;"	f
strmgmt	libft/srcs/other/ft_getdelim.c	/^static int		strmgmt(t_file *current, char **line, char *sub, char delim)$/;"	f	file:
sub_line	includes/struct.h	/^	t_vector			*sub_line;$/;"	m	struct:s_sle
subprompt_call	srcs/module/sle/prompt/prompt_subroutine_tools.c	/^uint8_t		subprompt_call(t_sle *sle, uint32_t option)$/;"	f
success	libft/includes/test.h	/^	int			success;$/;"	m	struct:s_result
suffix_expansion	srcs/module/expansion/parameter/parameter_suffix_prefix.c	/^int		suffix_expansion(t_list *intern, t_parameter *param)$/;"	f
suffix_match	srcs/module/expansion/parameter/parameter_suffix_prefix.c	/^void	suffix_match(t_parameter *param, char *to_search, char *to_find)$/;"	f
t_action	includes/struct.h	/^typedef struct s_action		t_action;$/;"	t	typeref:struct:s_action
t_advanced_pex	includes/expansion.h	/^typedef int					(*t_advanced_pex)(t_list *, t_parameter *);$/;"	t
t_analyzer	includes/struct.h	/^typedef t_resolve			t_analyzer[ANALYZER_STATES][NB_OF_TOKENS];$/;"	t
t_ar_analyzer	includes/expansion.h	/^typedef t_arithmexp			t_ar_analyzer[MATH_STATE][MATH_TOKEN];$/;"	t
t_args	libft/includes/ft_printf.h	/^}						t_args;$/;"	t	typeref:union:u_args
t_arithmetic	includes/expansion.h	/^typedef struct s_arithmetic	t_arithmetic;$/;"	t	typeref:struct:s_arithmetic
t_arithmexp	includes/expansion.h	/^typedef void				(*t_arithmexp)(t_arithmetic *);$/;"	t
t_autocomplete	includes/autocompletion.h	/^}						t_autocomplete;$/;"	t	typeref:struct:s_autocomplete
t_buffer	libft/includes/output.h	/^}					t_buffer;$/;"	t	typeref:struct:s_buffer
t_builtin	includes/struct.h	/^typedef int				(*t_builtin) (t_registry *, char **);$/;"	t
t_cmp	libft/includes/list.h	/^typedef int			(*t_cmp)(void *, void *);$/;"	t
t_command	includes/struct.h	/^}						t_command;$/;"	t	typeref:struct:s_command
t_completion_fct	includes/autocompletion.h	/^typedef 		void (t_completion_fct)(char *, t_autocomplete *, t_registry *);$/;"	t
t_convert	libft/includes/ft_printf.h	/^typedef void			(*t_convert)(t_format *);$/;"	t
t_coord	includes/struct.h	/^}						t_coord;$/;"	t	typeref:struct:s_coord
t_cursor	includes/struct.h	/^}						t_cursor;$/;"	t	typeref:struct:s_cursor
t_del	libft/includes/list.h	/^typedef void		(*t_del)(void *);$/;"	t
t_dirent	libft/includes/directory.h	/^typedef struct dirent	t_dirent;$/;"	t	typeref:struct:dirent
t_entry	includes/struct.h	/^typedef	struct	s_entry	t_entry;$/;"	t	typeref:struct:s_entry
t_file	libft/includes/str.h	/^}					t_file;$/;"	t	typeref:struct:s_file
t_format	libft/includes/ft_printf.h	/^typedef struct s_format	t_format;$/;"	t	typeref:struct:s_format
t_get_option	includes/struct.h	/^typedef t_option		(*t_get_option)(char *s, t_option option);$/;"	t
t_gnl_file	libft/includes/get_next_line.h	/^}					t_gnl_file;$/;"	t	typeref:struct:s_gnl_file
t_graph	includes/struct.h	/^}						t_graph;$/;"	t	typeref:struct:s_graph
t_group	includes/struct.h	/^}						t_group;$/;"	t	typeref:struct:s_group
t_hash	libft/includes/hashmap.h	/^}				t_hash;$/;"	t	typeref:struct:s_hash
t_hashmap	includes/struct.h	/^}						t_hashmap;$/;"	t	typeref:struct:s_hashmap
t_history	includes/struct.h	/^}				t_history;$/;"	t	typeref:struct:s_history
t_hnode	libft/includes/hashmap.h	/^}				t_hnode;$/;"	t	typeref:struct:s_hnode
t_infix	includes/expansion.h	/^}							t_infix;$/;"	t	typeref:struct:s_infix
t_intern	includes/struct.h	/^}						t_intern;$/;"	t	typeref:struct:s_intern
t_job	includes/struct.h	/^}						t_job;$/;"	t	typeref:struct:s_job
t_lexer	includes/struct.h	/^}						t_lexer;$/;"	t	typeref:struct:s_lexer
t_list	libft/includes/list.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_lstmap	libft/includes/list.h	/^typedef void		*(*t_lstmap)(void *, void *);$/;"	t
t_lstmod	libft/includes/list.h	/^typedef void		*(*t_lstmod)(void *);$/;"	t
t_magic	libft/includes/str.h	/^}					t_magic;$/;"	t	typeref:struct:s_magic
t_math	includes/expansion.h	/^}							t_math;$/;"	t	typeref:struct:s_math
t_mathstate	includes/expansion.h	/^typedef enum e_mathstate	t_mathstate;$/;"	t	typeref:enum:e_mathstate
t_meminfo	libft/includes/ft_malloc.h	/^}				t_meminfo;$/;"	t	typeref:struct:s_meminfo
t_mtype	includes/enum.h	/^}				t_mtype;$/;"	t	typeref:enum:e_mtype
t_opt	includes/struct.h	/^}						t_opt;$/;"	t	typeref:struct:s_opt
t_option	includes/struct.h	/^typedef uint64_t		t_option;$/;"	t
t_param	includes/struct.h	/^}				t_param;$/;"	t	typeref:struct:s_param
t_parameter	includes/expansion.h	/^typedef struct s_parameter	t_parameter;$/;"	t	typeref:struct:s_parameter
t_paramexp	includes/expansion.h	/^typedef void				(*t_paramexp)(t_parameter *);$/;"	t
t_pex_token	includes/expansion.h	/^}							t_pex_token;$/;"	t	typeref:struct:s_pex_token
t_process	includes/struct.h	/^}						t_process;$/;"	t	typeref:struct:s_process
t_prompt	includes/struct.h	/^}						t_prompt;$/;"	t	typeref:struct:s_prompt
t_quote	includes/enum.h	/^}				t_quote;$/;"	t	typeref:enum:e_quote
t_redirect	includes/struct.h	/^typedef struct s_redirect	t_redirect;$/;"	t	typeref:struct:s_redirect
t_redirection	includes/struct.h	/^typedef t_set_redirect		t_redirection[REDIRECT_ACTION];$/;"	t
t_redrawinfo	includes/struct.h	/^}						t_redrawinfo;$/;"	t	typeref:struct:s_redrawinfo
t_registry	includes/struct.h	/^}						t_registry;$/;"	t	typeref:struct:s_registry
t_resolution	includes/struct.h	/^typedef struct s_resolution	t_resolution;$/;"	t	typeref:struct:s_resolution
t_resolve	includes/struct.h	/^typedef void				(*t_resolve)(t_resolution *);$/;"	t
t_result	libft/includes/test.h	/^}				t_result;$/;"	t	typeref:struct:s_result
t_rpn_tk	includes/expansion.h	/^}							t_rpn_tk;$/;"	t	typeref:struct:s_rpn_tk
t_set_redirect	includes/struct.h	/^typedef void				(*t_set_redirect)(t_registry *, t_redirect *, t_action *);$/;"	t
t_sle	includes/struct.h	/^}						t_sle;$/;"	t	typeref:struct:s_sle
t_stack	libft/includes/list.h	/^}					t_stack;$/;"	t	typeref:struct:s_stack
t_stat	libft/includes/directory.h	/^typedef struct stat		t_stat;$/;"	t	typeref:struct:stat
t_status	libft/includes/directory.h	/^}						t_status;$/;"	t	typeref:struct:s_status
t_termcaps	includes/struct.h	/^}						t_termcaps;$/;"	t	typeref:struct:s_termcaps
t_test	libft/includes/test.h	/^}				t_test;$/;"	t	typeref:struct:s_test
t_token	includes/struct.h	/^}						t_token;$/;"	t	typeref:struct:s_token
t_type	includes/enum.h	/^}				t_type;$/;"	t	typeref:enum:e_type
t_value	includes/expansion.h	/^}							t_value;$/;"	t	typeref:union:u_value
t_variable	includes/struct.h	/^}						t_variable;$/;"	t	typeref:struct:s_variable
t_vector	libft/includes/vector.h	/^}                   t_vector;$/;"	t	typeref:struct:s_vector
t_window	includes/struct.h	/^}						t_window;$/;"	t	typeref:struct:s_window
tearDown	libft/vctunit/vct_unit.c	/^static void tearDown(t_vector **vect)$/;"	f	file:
term_mode	srcs/core/termmode/termmode.c	/^int16_t          term_mode(uint8_t mode_flag)$/;"	f
term_modes	includes/struct.h	/^	struct termios		*term_modes;	\/* Saved termios mode 	*\/$/;"	m	struct:s_job	typeref:struct:s_job::termios
termcaps	includes/struct.h	/^	t_termcaps			termcaps;$/;"	m	struct:s_sle
test	libft/includes/test.h	/^	int			(*test)(void);$/;"	m	struct:s_test
test_add	libft/vctunit/vct_unit.c	/^static int test_add(void)$/;"	f	file:
test_blt	srcs/module/builtin/test/test.c	/^uint8_t		test_blt(__unused t_registry *shell, __unused char **av)$/;"	f
test_cut	libft/vctunit/vct_unit.c	/^static int test_cut(void)$/;"	f	file:
test_delchar	libft/vctunit/vct_unit.c	/^static int test_delchar(void)$/;"	f	file:
test_delstr	libft/vctunit/vct_unit.c	/^static int test_delstr(void)$/;"	f	file:
test_dups	libft/vctunit/vct_unit.c	/^static int test_dups(void)$/;"	f	file:
test_init	libft/vctunit/vct_unit.c	/^static int test_init(void)$/;"	f	file:
test_inschar	libft/vctunit/vct_unit.c	/^static int test_inschar(void)$/;"	f	file:
test_insstr	libft/vctunit/vct_unit.c	/^static int test_insstr(void)$/;"	f	file:
test_ncat	libft/vctunit/vct_unit.c	/^static int test_ncat(void)$/;"	f	file:
test_pop	libft/vctunit/vct_unit.c	/^static int test_pop(void)$/;"	f	file:
test_push	libft/vctunit/vct_unit.c	/^static int test_push(void)$/;"	f	file:
test_replace_char	libft/vctunit/vct_unit.c	/^static int test_replace_char(void)$/;"	f	file:
test_replace_string	libft/vctunit/vct_unit.c	/^static int test_replace_string(void)$/;"	f	file:
test_shift_l	libft/vctunit/vct_unit.c	/^static int test_shift_l(void)$/;"	f	file:
test_shift_r	libft/vctunit/vct_unit.c	/^static int test_shift_r(void)$/;"	f	file:
test_sncpy	libft/vctunit/vct_unit.c	/^static int test_sncpy(void)$/;"	f	file:
test_string	libft/vctunit/vct_unit.c	/^static int test_string(void)$/;"	f	file:
test_sub	libft/vctunit/vct_unit.c	/^static int test_sub(void)$/;"	f	file:
test_vectors	libft/vctunit/vct_unit.c	/^t_result test_vectors(int print)$/;"	f
test_x	libft/vctunit/vct_unit.c	/^static int test_x(void)$/;"	f	file:
text	includes/struct.h	/^	t_vector			*text;$/;"	m	struct:s_prompt
tilde	srcs/module/expansion/tilde.c	/^char		*tilde(t_list *intern_var, char *str)$/;"	f
tilde_expansion	srcs/module/expansion/tilde.c	/^static char	*tilde_expansion(t_list *intern_var, const char *str)$/;"	f	file:
time	libft/includes/ft_malloc.h	/^	char		time[23];$/;"	m	struct:s_meminfo
to	includes/struct.h	/^	int32_t				to;$/;"	m	struct:s_redirect
token	includes/struct.h	/^	t_token				token;$/;"	m	struct:s_resolution
token_checker	srcs/module/lexer/process/checker_module.c	/^uint8_t	token_checker(t_lexer *lexer, int start, int end)$/;"	f
token_mtype	includes/struct.h	/^	enum e_mtype		token_mtype;$/;"	m	struct:s_lexer	typeref:enum:s_lexer::e_mtype
token_to_str	srcs/module/analyzer/tools/token_tools.c	/^char	*token_to_str(void *data)$/;"	f
token_to_var	srcs/module/analyzer/tools/token_tools.c	/^void	*token_to_var(__unused void *context, void *data)$/;"	f
token_type	includes/struct.h	/^	enum e_type			token_type;$/;"	m	struct:s_lexer	typeref:enum:s_lexer::e_type
tokens	includes/expansion.h	/^	t_list					*tokens;$/;"	m	struct:s_arithmetic
tokens	includes/expansion.h	/^	t_list					*tokens;$/;"	m	struct:s_math
tokens	includes/expansion.h	/^	t_list					*tokens;$/;"	m	struct:s_parameter
tokens	includes/struct.h	/^	t_list				*tokens;$/;"	m	struct:s_lexer
tokens	includes/struct.h	/^	t_list				*tokens;$/;"	m	struct:s_resolution
transform_elem_path	srcs/module/builtin/cd/cd_simple.c	/^static char		*transform_elem_path(const char *path, char **new_path)$/;"	f	file:
tree_node	includes/struct.h	/^	t_stack				tree_node;$/;"	m	struct:s_resolution
trimmer	libft/srcs/string/ft_strtrim.c	/^static char const	*trimmer(char const *s, int *len)$/;"	f	file:
type	includes/autocompletion.h	/^	enum e_result_type	type;$/;"	m	struct:s_autocomplete	typeref:enum:s_autocomplete::e_result_type
type	includes/expansion.h	/^	enum e_paramexp			type;$/;"	m	struct:s_pex_token	typeref:enum:s_pex_token::e_paramexp
type	includes/expansion.h	/^	enum e_rpn				type;$/;"	m	struct:s_rpn_tk	typeref:enum:s_rpn_tk::e_rpn
type	includes/expansion.h	/^	uint64_t				type;$/;"	m	union:u_value
type	includes/expansion.h	/^	uint8_t					type;$/;"	m	struct:s_infix
type	includes/struct.h	/^	enum e_actions		type;$/;"	m	struct:s_action	typeref:enum:s_action::e_actions
type	includes/struct.h	/^	int					type;$/;"	m	struct:s_token
type	includes/struct.h	/^	uint16_t			type;$/;"	m	struct:s_redirect
type	includes/struct.h	/^	uint8_t				type;$/;"	m	struct:s_command
type	includes/struct.h	/^	uint8_t				type;$/;"	m	struct:s_group
type	libft/includes/ft_printf.h	/^	char				type;$/;"	m	struct:s_format
type_blt	srcs/module/builtin/type/type.c	/^uint8_t				type_blt(t_registry *shell, char **av)$/;"	f
type_float	libft/srcs/ft_printf/type.c	/^void				type_float(t_format *format, va_list args)$/;"	f
type_other	libft/srcs/ft_printf/type.c	/^void				type_other(t_format *format, va_list args)$/;"	f
type_signed_integer	libft/srcs/ft_printf/type.c	/^void				type_signed_integer(t_format *format, va_list args)$/;"	f
type_unsigned_integer	libft/srcs/ft_printf/type.c	/^void				type_unsigned_integer(t_format *format, va_list args)$/;"	f
u_args	libft/includes/ft_printf.h	/^typedef union			u_args$/;"	u
u_character	libft/includes/ft_printf.h	/^	unsigned char		u_character;$/;"	m	union:u_args
u_conv	libft/srcs/conversion/ft_convert_base.c	/^static void			u_conv(unsigned long long nb, char *base, int id, char *buf)$/;"	f	file:
u_integer	libft/includes/ft_printf.h	/^	unsigned int		u_integer;$/;"	m	union:u_args
u_integer	libft/srcs/ft_printf/unsigned.c	/^void	u_integer(t_format *format)$/;"	f
u_intmax	libft/includes/ft_printf.h	/^	uintmax_t			u_intmax;$/;"	m	union:u_args
u_short	libft/includes/ft_printf.h	/^	unsigned short		u_short;$/;"	m	union:u_args
u_value	includes/expansion.h	/^typedef union				u_value$/;"	u
ul_integer	libft/includes/ft_printf.h	/^	unsigned long		ul_integer;$/;"	m	union:u_args
ull_integer	libft/includes/ft_printf.h	/^	unsigned long long	ull_integer;$/;"	m	union:u_args
unset_blt	srcs/module/builtin/unset/unset.c	/^uint8_t				unset_blt(t_registry *shell, char **av)$/;"	f
unsigned_convert	libft/srcs/ft_printf/unsigned.c	/^char	*unsigned_convert(t_format *format)$/;"	f
unsigned_converter	libft/srcs/ft_printf/type.c	/^static t_convert	unsigned_converter(t_format *format)$/;"	f	file:
up	includes/struct.h	/^	char				*up;$/;"	m	struct:s_termcaps
update_current_job	srcs/module/jobcontrol/update_jobs.c	/^static void	update_current_job(t_registry *shell)$/;"	f	file:
update_intern	srcs/module/interpreter/core/fork_process.c	/^static int	update_intern(t_variable *variable, char *data)$/;"	f	file:
update_job_ids	srcs/module/jobcontrol/update_jobs.c	/^static void	update_job_ids(t_registry *shell)$/;"	f	file:
update_jobinfos	srcs/module/jobcontrol/update_jobs.c	/^void	update_jobinfos(t_registry *shell)$/;"	f
update_pid	srcs/module/interpreter/core/waiter.c	/^static void		update_pid(t_registry *shell, t_job *job, pid_t pid, int status)$/;"	f	file:
update_window	srcs/module/sle/window.c	/^void	update_window(t_sle *sle)$/;"	f
update_winsize	srcs/module/sle/window.c	/^uint64_t	update_winsize(t_sle *sle)$/;"	f
used	libft/includes/hashmap.h	/^	size_t		used;$/;"	m	struct:s_hash
user_home	srcs/module/expansion/tilde.c	/^static char	*user_home(const char *str)$/;"	f	file:
username	includes/struct.h	/^	t_vector			*username;$/;"	m	struct:s_intern
valid	includes/struct.h	/^	int					valid;$/;"	m	struct:s_resolution
valid	libft/includes/ft_printf.h	/^	char				valid;$/;"	m	struct:s_format
validate_termcaps	srcs/module/sle/init/init_sle.c	/^static uint64_t validate_termcaps(t_termcaps *tc)$/;"	f	file:
value	includes/expansion.h	/^	t_value					value;$/;"	m	struct:s_rpn_tk
variable_concat	srcs/module/expansion/variable.c	/^static int 	variable_concat(t_list *lst, char **dest, int i)$/;"	f	file:
variable_expansion	srcs/module/expansion/variable.c	/^char		*variable_expansion(t_list *intern_var, char *str)$/;"	f
variable_replace	srcs/module/expansion/variable.c	/^static char	*variable_replace(t_list *lst, t_vector *str, uint32_t start_idx)$/;"	f	file:
variable_special	srcs/module/expansion/variable.c	/^static int	variable_special(t_list *intern, char **dest, int i)$/;"	f	file:
variable_to_tab	srcs/module/interpreter/tools/generate_env.c	/^char	*variable_to_tab(void *data)$/;"	f
variable_update	srcs/module/interpreter/tools/generate_env.c	/^int		variable_update(void *context, void *data)$/;"	f
vct_add	libft/srcs/vector/vct_add.c	/^int8_t             vct_add(t_vector *vector, char c)$/;"	f
vct_charat	libft/srcs/vector/vct_charat.c	/^char	vct_charat(t_vector *vct, uint64_t index)$/;"	f
vct_cut	libft/srcs/vector/vct_cut.c	/^int8_t             vct_cut(t_vector *vector)$/;"	f
vct_del	libft/srcs/vector/vct_del.c	/^void        vct_del(t_vector **vector)$/;"	f
vct_del_char	libft/srcs/vector/vct_delchar.c	/^int8_t       vct_del_char(t_vector *vector, uint64_t index)$/;"	f
vct_del_string	libft/srcs/vector/vct_del_string.c	/^int8_t       vct_del_string(t_vector *vector,$/;"	f
vct_dup	libft/srcs/vector/vct_dup.c	/^t_vector    *vct_dup(t_vector *vect)$/;"	f
vct_dups	libft/srcs/vector/vct_dups.c	/^t_vector    *vct_dups(char *str)$/;"	f
vct_get_string	libft/srcs/vector/vct_getstring.c	/^char       *vct_get_string(t_vector *vector)$/;"	f
vct_getcopy	libft/srcs/vector/vct_getcopy.c	/^char       *vct_getcopy(t_vector *vector)$/;"	f
vct_insert_char	libft/srcs/vector/vct_insert_char.c	/^int8_t       vct_insert_char(t_vector *vector, char c, uint64_t index)$/;"	f
vct_insert_string	libft/srcs/vector/vct_insert_string.c	/^int8_t       vct_insert_string(t_vector *vector,$/;"	f
vct_len	libft/srcs/vector/vct_len.c	/^uint64_t            vct_len(t_vector *vector)$/;"	f
vct_ncat	libft/srcs/vector/vct_ncat.c	/^int8_t         vct_ncat(t_vector *dest, t_vector *source,$/;"	f
vct_ncpy	libft/srcs/vector/vct_ncpy.c	/^int8_t         vct_ncpy(t_vector *dest, t_vector *source,$/;"	f
vct_new	libft/srcs/vector/vct_new.c	/^t_vector	*vct_new(uint64_t size)$/;"	f
vct_pop	libft/srcs/vector/vct_pop.c	/^int8_t             vct_pop(t_vector *vector)$/;"	f
vct_push	libft/srcs/vector/vct_push.c	/^int8_t             vct_push(t_vector *vector, char c)$/;"	f
vct_replace_char	libft/srcs/vector/vct_replace_char.c	/^int8_t       vct_replace_char(t_vector *vector, char c, uint64_t index)$/;"	f
vct_replace_string	libft/srcs/vector/vct_replace_string.c	/^int8_t       vct_replace_string(t_vector *vector,$/;"	f
vct_reset	libft/srcs/vector/vct_reset.c	/^int8_t        vct_reset(t_vector *vector)$/;"	f
vct_resize	libft/srcs/vector/vct_resize.c	/^int8_t     vct_resize(t_vector *vector, uint64_t new_size)$/;"	f
vct_scale	libft/srcs/vector/vct_scale.c	/^int8_t     vct_scale(t_vector *vector)$/;"	f
vct_scat	libft/srcs/vector/vct_scat.c	/^int8_t         vct_scat(t_vector *dest, char *source,$/;"	f
vct_scpy	libft/srcs/vector/vct_scpy.c	/^int8_t         vct_scpy(t_vector *dest, char *source,$/;"	f
vct_set_scale	libft/srcs/vector/vct_set_scale.c	/^void     vct_set_scale(t_vector *vector, uint16_t scale)$/;"	f
vct_size	libft/srcs/vector/vct_size.c	/^uint64_t    vct_size(t_vector *vector)$/;"	f
vct_sub	libft/srcs/vector/vct_sub.c	/^char       *vct_sub(t_vector *vector, uint64_t start, uint64_t len)$/;"	f
vector_test	libft/vctunit/vct_unit.c	/^void    vector_test(int print)$/;"	f
verif_arg	srcs/module/builtin/exit/exit.c	/^uint8_t			verif_arg(char *s)$/;"	f
verif_line	srcs/module/sle/prompt/prompt_subroutine.c	/^void				verif_line(t_sle *sle)$/;"	f
vis_start	includes/struct.h	/^	int64_t				vis_start;$/;"	m	struct:s_sle
vis_stop	includes/struct.h	/^	int64_t				vis_stop;$/;"	m	struct:s_sle
visual_bounds_valid	srcs/module/sle/action_keys/visual_mode.c	/^static inline uint8_t	visual_bounds_valid(t_sle *sle)$/;"	f	file:
waiter	srcs/module/interpreter/core/waiter.c	/^int8_t			waiter(t_registry *shell, t_job *job)$/;"	f
width	libft/includes/ft_printf.h	/^	int					width;$/;"	m	struct:s_format
width	libft/srcs/ft_printf/widthprec.c	/^char		*width(t_format *format, char *tmp)$/;"	f
window	includes/struct.h	/^	t_window			window;$/;"	m	struct:s_sle
word_check	srcs/module/expansion/parameter/parameter_parser.c	/^static int	word_check(t_list *intern, t_pex_token *token)$/;"	f	file:
write_esc_sequence	srcs/module/sle/redraw/redraw_tools.c	/^uint32_t	write_esc_sequence(char *str, uint32_t index)$/;"	f
write_file	srcs/module/builtin/fc/fc_editor.c	/^static int8_t	write_file(t_registry *shell, char **av, char *editor)$/;"	f	file:
write_heredoc	srcs/module/interpreter/tools/redirect_tools.c	/^int				write_heredoc(t_list *intern_var, t_vector **vector, int fd$/;"	f
write_histfile	srcs/module/history/histfile.c	/^void			write_histfile(t_registry *shell, t_history *history)$/;"	f
writer	libft/srcs/string/ft_strsplit.c	/^static int	writer(char const *s, char *c, char ***tab, int word)$/;"	f	file:
x	includes/struct.h	/^	uint64_t			x;$/;"	m	struct:s_coord
x	includes/struct.h	/^	uint64_t			x;$/;"	m	struct:s_cursor
x2	includes/struct.h	/^	uint64_t			x2;$/;"	m	struct:s_cursor
x3	includes/struct.h	/^	uint64_t			x3;$/;"	m	struct:s_cursor
y	includes/struct.h	/^	uint64_t			y;$/;"	m	struct:s_coord
y	includes/struct.h	/^	uint64_t			y;$/;"	m	struct:s_cursor
y2	includes/struct.h	/^	uint64_t			y2;$/;"	m	struct:s_cursor
y3	includes/struct.h	/^	uint64_t			y3;$/;"	m	struct:s_cursor
